//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace QuickZip_BankAngular.Entity
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class Demo2_ZipNach_RBLBank_AngularEntities : DbContext
    {
        public Demo2_ZipNach_RBLBank_AngularEntities()
            : base("name=Demo2_ZipNach_RBLBank_AngularEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Tbl_Icon> Tbl_Icon { get; set; }
        public virtual DbSet<Tbl_Links> Tbl_Links { get; set; }
        public virtual DbSet<TblAccessRight> TblAccessRights { get; set; }
        public virtual DbSet<tblAddressMaster> tblAddressMasters { get; set; }
        public virtual DbSet<TblAlertNotification> TblAlertNotifications { get; set; }
        public virtual DbSet<tblAllBulkMandate> tblAllBulkMandates { get; set; }
        public virtual DbSet<tblbankData> tblbankDatas { get; set; }
        public virtual DbSet<tblBankIMP> tblBankIMPS { get; set; }
        public virtual DbSet<tblBankTransAmount> tblBankTransAmounts { get; set; }
        public virtual DbSet<tblBranch> tblBranches { get; set; }
        public virtual DbSet<TblBranchMaster> TblBranchMasters { get; set; }
        public virtual DbSet<tblBranchUser> tblBranchUsers { get; set; }
        public virtual DbSet<TblBusinessSegment> TblBusinessSegments { get; set; }
        public virtual DbSet<tblChargeMaster> tblChargeMasters { get; set; }
        public virtual DbSet<TblChargeTypeMaster> TblChargeTypeMasters { get; set; }
        public virtual DbSet<tblclientData> tblclientDatas { get; set; }
        public virtual DbSet<TblCommunicationMail_Billing> TblCommunicationMail_Billing { get; set; }
        public virtual DbSet<tblConsent> tblConsents { get; set; }
        public virtual DbSet<tblCustomer> tblCustomers { get; set; }
        public virtual DbSet<tblCustomerCardDetail> tblCustomerCardDetails { get; set; }
        public virtual DbSet<tblDateFormat> tblDateFormats { get; set; }
        public virtual DbSet<tblDesignation> tblDesignations { get; set; }
        public virtual DbSet<TblDocumentTypeMaster> TblDocumentTypeMasters { get; set; }
        public virtual DbSet<TblEmployeeMaster> TblEmployeeMasters { get; set; }
        public virtual DbSet<tblEntity> tblEntities { get; set; }
        public virtual DbSet<tblEntityBankSetup> tblEntityBankSetups { get; set; }
        public virtual DbSet<tblEntityBankSetupDate> tblEntityBankSetupDates { get; set; }
        public virtual DbSet<tblEntityBusinessCode> tblEntityBusinessCodes { get; set; }
        public virtual DbSet<tblEntityCategoryCode> tblEntityCategoryCodes { get; set; }
        public virtual DbSet<tblEntityContactPersonDetail> tblEntityContactPersonDetails { get; set; }
        public virtual DbSet<tblEntityDebitType> tblEntityDebitTypes { get; set; }
        public virtual DbSet<TblEntityFinancialDetail> TblEntityFinancialDetails { get; set; }
        public virtual DbSet<tblEntityFrequency> tblEntityFrequencies { get; set; }
        public virtual DbSet<TblEntityH2HDetails> TblEntityH2HDetails { get; set; }
        public virtual DbSet<tblEntityPaymentMode> tblEntityPaymentModes { get; set; }
        public virtual DbSet<tblEntityPeriondEnableOn> tblEntityPeriondEnableOns { get; set; }
        public virtual DbSet<tblEntitySponsorcodeFileName> tblEntitySponsorcodeFileNames { get; set; }
        public virtual DbSet<tblEntityTodebit> tblEntityTodebits { get; set; }
        public virtual DbSet<tblEntitywiseDocument> tblEntitywiseDocuments { get; set; }
        public virtual DbSet<tblEsignErrorMandateLog> tblEsignErrorMandateLogs { get; set; }
        public virtual DbSet<tblEsignLogMessageId> tblEsignLogMessageIds { get; set; }
        public virtual DbSet<tblExlUploadedData> tblExlUploadedDatas { get; set; }
        public virtual DbSet<tblExlUploadedData_BulkTest> tblExlUploadedData_BulkTest { get; set; }
        public virtual DbSet<tblExlUploadedDataHeader> tblExlUploadedDataHeaders { get; set; }
        public virtual DbSet<tblFileFormat> tblFileFormats { get; set; }
        public virtual DbSet<tblFileNumberSequence> tblFileNumberSequences { get; set; }
        public virtual DbSet<TblHeadBank_AddressDetail> TblHeadBank_AddressDetail { get; set; }
        public virtual DbSet<TblHeadBankMaster> TblHeadBankMasters { get; set; }
        public virtual DbSet<tblHolidayMaster> tblHolidayMasters { get; set; }
        public virtual DbSet<tblIFSCBank> tblIFSCBanks { get; set; }
        public virtual DbSet<tblImageActivity> tblImageActivities { get; set; }
        public virtual DbSet<tblImageActivityDetail> tblImageActivityDetails { get; set; }
        public virtual DbSet<tblInCompleteMandate> tblInCompleteMandates { get; set; }
        public virtual DbSet<tblLegacyDetail> tblLegacyDetails { get; set; }
        public virtual DbSet<tblLegacyHeader> tblLegacyHeaders { get; set; }
        public virtual DbSet<TblLoginSessionTrxn> TblLoginSessionTrxns { get; set; }
        public virtual DbSet<tbllogMandate> tbllogMandates { get; set; }
        public virtual DbSet<tbllogMandateDirectDebit> tbllogMandateDirectDebits { get; set; }
        public virtual DbSet<tblLogoImage> tblLogoImages { get; set; }
        public virtual DbSet<tblLogTransaction> tblLogTransactions { get; set; }
        public virtual DbSet<TblMailMsgTransaction> TblMailMsgTransactions { get; set; }
        public virtual DbSet<tblMandate> tblMandates { get; set; }
        public virtual DbSet<tblMandate_Reverse> tblMandate_Reverse { get; set; }
        public virtual DbSet<tblMandateActivity> tblMandateActivities { get; set; }
        public virtual DbSet<tblMandateAdhar> tblMandateAdhars { get; set; }
        public virtual DbSet<tblMandateDirectDebit> tblMandateDirectDebits { get; set; }
        public virtual DbSet<tblMandateDirectdebitUniqueId> tblMandateDirectdebitUniqueIds { get; set; }
        public virtual DbSet<tblMandateFile> tblMandateFiles { get; set; }
        public virtual DbSet<tblMandateMobile> tblMandateMobiles { get; set; }
        public virtual DbSet<tblMandateStatu> tblMandateStatus { get; set; }
        public virtual DbSet<tblMandateTransaction> tblMandateTransactions { get; set; }
        public virtual DbSet<tblMandateUniqueId> tblMandateUniqueIds { get; set; }
        public virtual DbSet<tblMergedData> tblMergedDatas { get; set; }
        public virtual DbSet<tblMobileUserLogin> tblMobileUserLogins { get; set; }
        public virtual DbSet<tblMsgMaster> tblMsgMasters { get; set; }
        public virtual DbSet<tblMsgTransaction> tblMsgTransactions { get; set; }
        public virtual DbSet<tblNPCIResponse> tblNPCIResponses { get; set; }
        public virtual DbSet<TblNPCIResponse_RBL> TblNPCIResponse_RBL { get; set; }
        public virtual DbSet<tblNPCIResponse_Reg> tblNPCIResponse_Reg { get; set; }
        public virtual DbSet<tblPaymentMode> tblPaymentModes { get; set; }
        public virtual DbSet<tblPaymentRequest> tblPaymentRequests { get; set; }
        public virtual DbSet<tblPaymentResponse> tblPaymentResponses { get; set; }
        public virtual DbSet<tblPresentmentDetailSeqCount> tblPresentmentDetailSeqCounts { get; set; }
        public virtual DbSet<tblPresentmentMaker> tblPresentmentMakers { get; set; }
        public virtual DbSet<tblPresentmentResponseDetail> tblPresentmentResponseDetails { get; set; }
        public virtual DbSet<tblPresentmentResponseHeader> tblPresentmentResponseHeaders { get; set; }
        public virtual DbSet<tblPresentmentSeqcount> tblPresentmentSeqcounts { get; set; }
        public virtual DbSet<TblPSMManager> TblPSMManagers { get; set; }
        public virtual DbSet<tblQbackActivity> tblQbackActivities { get; set; }
        public virtual DbSet<tblQbackLogPaymentResponse> tblQbackLogPaymentResponses { get; set; }
        public virtual DbSet<tblQbackPaymentRequest> tblQbackPaymentRequests { get; set; }
        public virtual DbSet<tblQbackPaymentResponse> tblQbackPaymentResponses { get; set; }
        public virtual DbSet<tblReasonCode> tblReasonCodes { get; set; }
        public virtual DbSet<tblRecipientMailId> tblRecipientMailIds { get; set; }
        public virtual DbSet<tblRedirectURL> tblRedirectURLs { get; set; }
        public virtual DbSet<TblRegionalManager> TblRegionalManagers { get; set; }
        public virtual DbSet<TblRegionMaster> TblRegionMasters { get; set; }
        public virtual DbSet<tblReportMapDB> tblReportMapDBs { get; set; }
        public virtual DbSet<tblReturnRegionMaster> tblReturnRegionMasters { get; set; }
        public virtual DbSet<TblRoleDivision> TblRoleDivisions { get; set; }
        public virtual DbSet<TblRoleMaster> TblRoleMasters { get; set; }
        public virtual DbSet<TblRolePolicy> TblRolePolicies { get; set; }
        public virtual DbSet<tblServiceLog> tblServiceLogs { get; set; }
        public virtual DbSet<TblSettlementType> TblSettlementTypes { get; set; }
        public virtual DbSet<tblSponsorBankCode> tblSponsorBankCodes { get; set; }
        public virtual DbSet<tblSponsorBankCodeDetail> tblSponsorBankCodeDetails { get; set; }
        public virtual DbSet<tblStatusMaster> tblStatusMasters { get; set; }
        public virtual DbSet<tblTempletMaster> tblTempletMasters { get; set; }
        public virtual DbSet<tblTransPresentmentHeader> tblTransPresentmentHeaders { get; set; }
        public virtual DbSet<tblUserLogin> tblUserLogins { get; set; }
        public virtual DbSet<tblUserPaymentMode> tblUserPaymentModes { get; set; }
        public virtual DbSet<tblUserSponsorBankCode> tblUserSponsorBankCodes { get; set; }
        public virtual DbSet<tblUserUtilityCode> tblUserUtilityCodes { get; set; }
        public virtual DbSet<tblUtlityCode> tblUtlityCodes { get; set; }
        public virtual DbSet<mirror_tbl_links> mirror_tbl_links { get; set; }
        public virtual DbSet<t1> t1 { get; set; }
        public virtual DbSet<tbl_MSG91_DeliveryReport> tbl_MSG91_DeliveryReport { get; set; }
        public virtual DbSet<tblAccessrights_Temp> tblAccessrights_Temp { get; set; }
        public virtual DbSet<TblBankBulkUploadData> TblBankBulkUploadDatas { get; set; }
        public virtual DbSet<TblBankBulkUploadData_Filter> TblBankBulkUploadData_Filter { get; set; }
        public virtual DbSet<tblBankHeader> tblBankHeaders { get; set; }
        public virtual DbSet<tblBulkUserUploadCheck> tblBulkUserUploadChecks { get; set; }
        public virtual DbSet<tblCity> tblCities { get; set; }
        public virtual DbSet<tblCountry> tblCountries { get; set; }
        public virtual DbSet<TblEntityMandateMode> TblEntityMandateModes { get; set; }
        public virtual DbSet<tblErrorCode> tblErrorCodes { get; set; }
        public virtual DbSet<tblEsignRequest> tblEsignRequests { get; set; }
        public virtual DbSet<tblEsignResponse> tblEsignResponses { get; set; }
        public virtual DbSet<TBLFILESEQUENCE> TBLFILESEQUENCEs { get; set; }
        public virtual DbSet<tblLegacyUploaded> tblLegacyUploadeds { get; set; }
        public virtual DbSet<tblLogoImage1> tblLogoImages1 { get; set; }
        public virtual DbSet<tblMandateBankBulkUploadHistory> tblMandateBankBulkUploadHistories { get; set; }
        public virtual DbSet<tblsponsorbankcode_Temp> tblsponsorbankcode_Temp { get; set; }
        public virtual DbSet<tblState> tblStates { get; set; }
        public virtual DbSet<tblTempIFSCBank> tblTempIFSCBanks { get; set; }
        public virtual DbSet<tblTransactionPresentment> tblTransactionPresentments { get; set; }
        public virtual DbSet<tblTransactionPresentmentHistory> tblTransactionPresentmentHistories { get; set; }
        public virtual DbSet<tblYoekiResponse> tblYoekiResponses { get; set; }
        public virtual DbSet<vwKotakBillingReport> vwKotakBillingReports { get; set; }
        public virtual DbSet<vwMandateLastTransaction> vwMandateLastTransactions { get; set; }
    
        [DbFunction("Demo2_ZipNach_RBLBank_AngularEntities", "GetEntityID")]
        public virtual IQueryable<GetEntityID_Result> GetEntityID(Nullable<int> entityID, Nullable<int> userID)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetEntityID_Result>("[Demo2_ZipNach_RBLBank_AngularEntities].[GetEntityID](@EntityID, @UserID)", entityIDParameter, userIDParameter);
        }
    
        [DbFunction("Demo2_ZipNach_RBLBank_AngularEntities", "GetEntityID_bkp")]
        public virtual IQueryable<GetEntityID_bkp_Result> GetEntityID_bkp(Nullable<int> entityID, Nullable<int> userID)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetEntityID_bkp_Result>("[Demo2_ZipNach_RBLBank_AngularEntities].[GetEntityID_bkp](@EntityID, @UserID)", entityIDParameter, userIDParameter);
        }
    
        [DbFunction("Demo2_ZipNach_RBLBank_AngularEntities", "GetEntityID1")]
        public virtual IQueryable<GetEntityID1_Result> GetEntityID1(Nullable<int> entityID, Nullable<int> userID)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetEntityID1_Result>("[Demo2_ZipNach_RBLBank_AngularEntities].[GetEntityID1](@EntityID, @UserID)", entityIDParameter, userIDParameter);
        }
    
        [DbFunction("Demo2_ZipNach_RBLBank_AngularEntities", "GetMandateStatus")]
        public virtual IQueryable<GetMandateStatus_Result> GetMandateStatus(Nullable<long> mandateId)
        {
            var mandateIdParameter = mandateId.HasValue ?
                new ObjectParameter("MandateId", mandateId) :
                new ObjectParameter("MandateId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetMandateStatus_Result>("[Demo2_ZipNach_RBLBank_AngularEntities].[GetMandateStatus](@MandateId)", mandateIdParameter);
        }
    
        [DbFunction("Demo2_ZipNach_RBLBank_AngularEntities", "GetYears")]
        public virtual IQueryable<GetYears_Result> GetYears()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetYears_Result>("[Demo2_ZipNach_RBLBank_AngularEntities].[GetYears]()");
        }
    
        [DbFunction("Demo2_ZipNach_RBLBank_AngularEntities", "parseJSON")]
        public virtual IQueryable<parseJSON_Result> parseJSON(string jSON)
        {
            var jSONParameter = jSON != null ?
                new ObjectParameter("JSON", jSON) :
                new ObjectParameter("JSON", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<parseJSON_Result>("[Demo2_ZipNach_RBLBank_AngularEntities].[parseJSON](@JSON)", jSONParameter);
        }
    
        [DbFunction("Demo2_ZipNach_RBLBank_AngularEntities", "Split")]
        public virtual IQueryable<Split_Result> Split(string @string, string delimiter)
        {
            var stringParameter = @string != null ?
                new ObjectParameter("String", @string) :
                new ObjectParameter("String", typeof(string));
    
            var delimiterParameter = delimiter != null ?
                new ObjectParameter("Delimiter", delimiter) :
                new ObjectParameter("Delimiter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Split_Result>("[Demo2_ZipNach_RBLBank_AngularEntities].[Split](@String, @Delimiter)", stringParameter, delimiterParameter);
        }
    
        public virtual ObjectResult<Proc_BulkUploadImages_Result> Proc_BulkUploadImages(string queryType, Nullable<int> totalImgages, Nullable<int> userID, string activityId, string reference1, string xmlDimension, Nullable<int> mappedImageCount, Nullable<int> unMappedImageCount, string entityId, string rejectReason, Nullable<bool> isOneThird)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var totalImgagesParameter = totalImgages.HasValue ?
                new ObjectParameter("TotalImgages", totalImgages) :
                new ObjectParameter("TotalImgages", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var activityIdParameter = activityId != null ?
                new ObjectParameter("ActivityId", activityId) :
                new ObjectParameter("ActivityId", typeof(string));
    
            var reference1Parameter = reference1 != null ?
                new ObjectParameter("Reference1", reference1) :
                new ObjectParameter("Reference1", typeof(string));
    
            var xmlDimensionParameter = xmlDimension != null ?
                new ObjectParameter("XmlDimension", xmlDimension) :
                new ObjectParameter("XmlDimension", typeof(string));
    
            var mappedImageCountParameter = mappedImageCount.HasValue ?
                new ObjectParameter("MappedImageCount", mappedImageCount) :
                new ObjectParameter("MappedImageCount", typeof(int));
    
            var unMappedImageCountParameter = unMappedImageCount.HasValue ?
                new ObjectParameter("UnMappedImageCount", unMappedImageCount) :
                new ObjectParameter("UnMappedImageCount", typeof(int));
    
            var entityIdParameter = entityId != null ?
                new ObjectParameter("EntityId", entityId) :
                new ObjectParameter("EntityId", typeof(string));
    
            var rejectReasonParameter = rejectReason != null ?
                new ObjectParameter("RejectReason", rejectReason) :
                new ObjectParameter("RejectReason", typeof(string));
    
            var isOneThirdParameter = isOneThird.HasValue ?
                new ObjectParameter("IsOneThird", isOneThird) :
                new ObjectParameter("IsOneThird", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_BulkUploadImages_Result>("Proc_BulkUploadImages", queryTypeParameter, totalImgagesParameter, userIDParameter, activityIdParameter, reference1Parameter, xmlDimensionParameter, mappedImageCountParameter, unMappedImageCountParameter, entityIdParameter, rejectReasonParameter, isOneThirdParameter);
        }
    
        public virtual ObjectResult<Sp_BankBulkUpload_Result> Sp_BankBulkUpload(string queryType, string xmlDimension, Nullable<int> userID, string entityId, string exlUploadedID, string activityId, Nullable<long> appId, string debitType, string frequency, string toDebit, string acNo, string bankName, string iFSC, Nullable<double> mICR, Nullable<long> netBanking, Nullable<long> debitCard, string amountRupees, string qRCodeImagepath, string refrence1, string refrence2, string addr1, string phNumber, string emailId, string from, string to, Nullable<long> mandateId, string description, string status, string nach, string rupees, string customer1, string customer2, string customer3, string dateOnMandate, string tIPPath, string pNGPath, string utilityCode, string sponsorCode, string strFromDate, string strToDate, string strTable, string paymentDataX, string xmlMandate, string filePath, string bankMICR, string typeData, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string rejectedReason, string fullbankBranch, Nullable<long> bankValidationAdminCount, Nullable<long> bankValidationUserCount, Nullable<long> acValidationAdminCount, Nullable<long> acValidationUserCount, string mandateMode, string amountWords, string sponsorBankCode, Nullable<bool> iSPhysical, Nullable<bool> isEnach, Nullable<int> topVal, string jpgPath, string activityType, string categoryCode, string custIFSC, string bankIFSC, string bulkOrNot, string mandateIdReverse, string uMRN, Nullable<long> sno)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var xmlDimensionParameter = xmlDimension != null ?
                new ObjectParameter("XmlDimension", xmlDimension) :
                new ObjectParameter("XmlDimension", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var entityIdParameter = entityId != null ?
                new ObjectParameter("EntityId", entityId) :
                new ObjectParameter("EntityId", typeof(string));
    
            var exlUploadedIDParameter = exlUploadedID != null ?
                new ObjectParameter("ExlUploadedID", exlUploadedID) :
                new ObjectParameter("ExlUploadedID", typeof(string));
    
            var activityIdParameter = activityId != null ?
                new ObjectParameter("ActivityId", activityId) :
                new ObjectParameter("ActivityId", typeof(string));
    
            var appIdParameter = appId.HasValue ?
                new ObjectParameter("appId", appId) :
                new ObjectParameter("appId", typeof(long));
    
            var debitTypeParameter = debitType != null ?
                new ObjectParameter("DebitType", debitType) :
                new ObjectParameter("DebitType", typeof(string));
    
            var frequencyParameter = frequency != null ?
                new ObjectParameter("Frequency", frequency) :
                new ObjectParameter("Frequency", typeof(string));
    
            var toDebitParameter = toDebit != null ?
                new ObjectParameter("ToDebit", toDebit) :
                new ObjectParameter("ToDebit", typeof(string));
    
            var acNoParameter = acNo != null ?
                new ObjectParameter("AcNo", acNo) :
                new ObjectParameter("AcNo", typeof(string));
    
            var bankNameParameter = bankName != null ?
                new ObjectParameter("BankName", bankName) :
                new ObjectParameter("BankName", typeof(string));
    
            var iFSCParameter = iFSC != null ?
                new ObjectParameter("IFSC", iFSC) :
                new ObjectParameter("IFSC", typeof(string));
    
            var mICRParameter = mICR.HasValue ?
                new ObjectParameter("MICR", mICR) :
                new ObjectParameter("MICR", typeof(double));
    
            var netBankingParameter = netBanking.HasValue ?
                new ObjectParameter("NetBanking", netBanking) :
                new ObjectParameter("NetBanking", typeof(long));
    
            var debitCardParameter = debitCard.HasValue ?
                new ObjectParameter("DebitCard", debitCard) :
                new ObjectParameter("DebitCard", typeof(long));
    
            var amountRupeesParameter = amountRupees != null ?
                new ObjectParameter("AmountRupees", amountRupees) :
                new ObjectParameter("AmountRupees", typeof(string));
    
            var qRCodeImagepathParameter = qRCodeImagepath != null ?
                new ObjectParameter("QRCodeImagepath", qRCodeImagepath) :
                new ObjectParameter("QRCodeImagepath", typeof(string));
    
            var refrence1Parameter = refrence1 != null ?
                new ObjectParameter("Refrence1", refrence1) :
                new ObjectParameter("Refrence1", typeof(string));
    
            var refrence2Parameter = refrence2 != null ?
                new ObjectParameter("Refrence2", refrence2) :
                new ObjectParameter("Refrence2", typeof(string));
    
            var addr1Parameter = addr1 != null ?
                new ObjectParameter("Addr1", addr1) :
                new ObjectParameter("Addr1", typeof(string));
    
            var phNumberParameter = phNumber != null ?
                new ObjectParameter("PhNumber", phNumber) :
                new ObjectParameter("PhNumber", typeof(string));
    
            var emailIdParameter = emailId != null ?
                new ObjectParameter("EmailId", emailId) :
                new ObjectParameter("EmailId", typeof(string));
    
            var fromParameter = from != null ?
                new ObjectParameter("From", from) :
                new ObjectParameter("From", typeof(string));
    
            var toParameter = to != null ?
                new ObjectParameter("To", to) :
                new ObjectParameter("To", typeof(string));
    
            var mandateIdParameter = mandateId.HasValue ?
                new ObjectParameter("MandateId", mandateId) :
                new ObjectParameter("MandateId", typeof(long));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var nachParameter = nach != null ?
                new ObjectParameter("Nach", nach) :
                new ObjectParameter("Nach", typeof(string));
    
            var rupeesParameter = rupees != null ?
                new ObjectParameter("Rupees", rupees) :
                new ObjectParameter("Rupees", typeof(string));
    
            var customer1Parameter = customer1 != null ?
                new ObjectParameter("Customer1", customer1) :
                new ObjectParameter("Customer1", typeof(string));
    
            var customer2Parameter = customer2 != null ?
                new ObjectParameter("Customer2", customer2) :
                new ObjectParameter("Customer2", typeof(string));
    
            var customer3Parameter = customer3 != null ?
                new ObjectParameter("Customer3", customer3) :
                new ObjectParameter("Customer3", typeof(string));
    
            var dateOnMandateParameter = dateOnMandate != null ?
                new ObjectParameter("DateOnMandate", dateOnMandate) :
                new ObjectParameter("DateOnMandate", typeof(string));
    
            var tIPPathParameter = tIPPath != null ?
                new ObjectParameter("TIPPath", tIPPath) :
                new ObjectParameter("TIPPath", typeof(string));
    
            var pNGPathParameter = pNGPath != null ?
                new ObjectParameter("PNGPath", pNGPath) :
                new ObjectParameter("PNGPath", typeof(string));
    
            var utilityCodeParameter = utilityCode != null ?
                new ObjectParameter("UtilityCode", utilityCode) :
                new ObjectParameter("UtilityCode", typeof(string));
    
            var sponsorCodeParameter = sponsorCode != null ?
                new ObjectParameter("SponsorCode", sponsorCode) :
                new ObjectParameter("SponsorCode", typeof(string));
    
            var strFromDateParameter = strFromDate != null ?
                new ObjectParameter("strFromDate", strFromDate) :
                new ObjectParameter("strFromDate", typeof(string));
    
            var strToDateParameter = strToDate != null ?
                new ObjectParameter("strToDate", strToDate) :
                new ObjectParameter("strToDate", typeof(string));
    
            var strTableParameter = strTable != null ?
                new ObjectParameter("strTable", strTable) :
                new ObjectParameter("strTable", typeof(string));
    
            var paymentDataXParameter = paymentDataX != null ?
                new ObjectParameter("PaymentDataX", paymentDataX) :
                new ObjectParameter("PaymentDataX", typeof(string));
    
            var xmlMandateParameter = xmlMandate != null ?
                new ObjectParameter("xmlMandate", xmlMandate) :
                new ObjectParameter("xmlMandate", typeof(string));
    
            var filePathParameter = filePath != null ?
                new ObjectParameter("FilePath", filePath) :
                new ObjectParameter("FilePath", typeof(string));
    
            var bankMICRParameter = bankMICR != null ?
                new ObjectParameter("BankMICR", bankMICR) :
                new ObjectParameter("BankMICR", typeof(string));
    
            var typeDataParameter = typeData != null ?
                new ObjectParameter("TypeData", typeData) :
                new ObjectParameter("TypeData", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var rejectedReasonParameter = rejectedReason != null ?
                new ObjectParameter("RejectedReason", rejectedReason) :
                new ObjectParameter("RejectedReason", typeof(string));
    
            var fullbankBranchParameter = fullbankBranch != null ?
                new ObjectParameter("fullbankBranch", fullbankBranch) :
                new ObjectParameter("fullbankBranch", typeof(string));
    
            var bankValidationAdminCountParameter = bankValidationAdminCount.HasValue ?
                new ObjectParameter("BankValidationAdminCount", bankValidationAdminCount) :
                new ObjectParameter("BankValidationAdminCount", typeof(long));
    
            var bankValidationUserCountParameter = bankValidationUserCount.HasValue ?
                new ObjectParameter("BankValidationUserCount", bankValidationUserCount) :
                new ObjectParameter("BankValidationUserCount", typeof(long));
    
            var acValidationAdminCountParameter = acValidationAdminCount.HasValue ?
                new ObjectParameter("AcValidationAdminCount", acValidationAdminCount) :
                new ObjectParameter("AcValidationAdminCount", typeof(long));
    
            var acValidationUserCountParameter = acValidationUserCount.HasValue ?
                new ObjectParameter("AcValidationUserCount", acValidationUserCount) :
                new ObjectParameter("AcValidationUserCount", typeof(long));
    
            var mandateModeParameter = mandateMode != null ?
                new ObjectParameter("MandateMode", mandateMode) :
                new ObjectParameter("MandateMode", typeof(string));
    
            var amountWordsParameter = amountWords != null ?
                new ObjectParameter("AmountWords", amountWords) :
                new ObjectParameter("AmountWords", typeof(string));
    
            var sponsorBankCodeParameter = sponsorBankCode != null ?
                new ObjectParameter("SponsorBankCode", sponsorBankCode) :
                new ObjectParameter("SponsorBankCode", typeof(string));
    
            var iSPhysicalParameter = iSPhysical.HasValue ?
                new ObjectParameter("ISPhysical", iSPhysical) :
                new ObjectParameter("ISPhysical", typeof(bool));
    
            var isEnachParameter = isEnach.HasValue ?
                new ObjectParameter("IsEnach", isEnach) :
                new ObjectParameter("IsEnach", typeof(bool));
    
            var topValParameter = topVal.HasValue ?
                new ObjectParameter("topVal", topVal) :
                new ObjectParameter("topVal", typeof(int));
    
            var jpgPathParameter = jpgPath != null ?
                new ObjectParameter("jpgPath", jpgPath) :
                new ObjectParameter("jpgPath", typeof(string));
    
            var activityTypeParameter = activityType != null ?
                new ObjectParameter("ActivityType", activityType) :
                new ObjectParameter("ActivityType", typeof(string));
    
            var categoryCodeParameter = categoryCode != null ?
                new ObjectParameter("CategoryCode", categoryCode) :
                new ObjectParameter("CategoryCode", typeof(string));
    
            var custIFSCParameter = custIFSC != null ?
                new ObjectParameter("CustIFSC", custIFSC) :
                new ObjectParameter("CustIFSC", typeof(string));
    
            var bankIFSCParameter = bankIFSC != null ?
                new ObjectParameter("BankIFSC", bankIFSC) :
                new ObjectParameter("BankIFSC", typeof(string));
    
            var bulkOrNotParameter = bulkOrNot != null ?
                new ObjectParameter("BulkOrNot", bulkOrNot) :
                new ObjectParameter("BulkOrNot", typeof(string));
    
            var mandateIdReverseParameter = mandateIdReverse != null ?
                new ObjectParameter("MandateIdReverse", mandateIdReverse) :
                new ObjectParameter("MandateIdReverse", typeof(string));
    
            var uMRNParameter = uMRN != null ?
                new ObjectParameter("UMRN", uMRN) :
                new ObjectParameter("UMRN", typeof(string));
    
            var snoParameter = sno.HasValue ?
                new ObjectParameter("Sno", sno) :
                new ObjectParameter("Sno", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_BankBulkUpload_Result>("Sp_BankBulkUpload", queryTypeParameter, xmlDimensionParameter, userIDParameter, entityIdParameter, exlUploadedIDParameter, activityIdParameter, appIdParameter, debitTypeParameter, frequencyParameter, toDebitParameter, acNoParameter, bankNameParameter, iFSCParameter, mICRParameter, netBankingParameter, debitCardParameter, amountRupeesParameter, qRCodeImagepathParameter, refrence1Parameter, refrence2Parameter, addr1Parameter, phNumberParameter, emailIdParameter, fromParameter, toParameter, mandateIdParameter, descriptionParameter, statusParameter, nachParameter, rupeesParameter, customer1Parameter, customer2Parameter, customer3Parameter, dateOnMandateParameter, tIPPathParameter, pNGPathParameter, utilityCodeParameter, sponsorCodeParameter, strFromDateParameter, strToDateParameter, strTableParameter, paymentDataXParameter, xmlMandateParameter, filePathParameter, bankMICRParameter, typeDataParameter, fromDateParameter, toDateParameter, rejectedReasonParameter, fullbankBranchParameter, bankValidationAdminCountParameter, bankValidationUserCountParameter, acValidationAdminCountParameter, acValidationUserCountParameter, mandateModeParameter, amountWordsParameter, sponsorBankCodeParameter, iSPhysicalParameter, isEnachParameter, topValParameter, jpgPathParameter, activityTypeParameter, categoryCodeParameter, custIFSCParameter, bankIFSCParameter, bulkOrNotParameter, mandateIdReverseParameter, uMRNParameter, snoParameter);
        }
    
        public virtual ObjectResult<Sp_BankBulkUpload_bkp_Result> Sp_BankBulkUpload_bkp(string queryType, string xmlDimension, Nullable<int> userID, string entityId, string exlUploadedID, string activityId, Nullable<long> appId, string debitType, string frequency, string toDebit, string acNo, string bankName, string iFSC, Nullable<double> mICR, Nullable<long> netBanking, Nullable<long> debitCard, string amountRupees, string qRCodeImagepath, string refrence1, string refrence2, string addr1, string phNumber, string emailId, string from, string to, Nullable<long> mandateId, string description, string status, string nach, string rupees, string customer1, string customer2, string customer3, string dateOnMandate, string tIPPath, string pNGPath, string utilityCode, string sponsorCode, string strFromDate, string strToDate, string strTable, string paymentDataX, string xmlMandate, string filePath, string bankMICR, string typeData, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string rejectedReason, string fullbankBranch, Nullable<long> bankValidationAdminCount, Nullable<long> bankValidationUserCount, Nullable<long> acValidationAdminCount, Nullable<long> acValidationUserCount, string mandateMode, string amountWords, string sponsorBankCode, Nullable<bool> iSPhysical, Nullable<bool> isEnach, Nullable<int> topVal, string jpgPath, string activityType, string categoryCode, string custIFSC, string bankIFSC, string bulkOrNot, string mandateIdReverse, string uMRN, Nullable<long> sno)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var xmlDimensionParameter = xmlDimension != null ?
                new ObjectParameter("XmlDimension", xmlDimension) :
                new ObjectParameter("XmlDimension", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var entityIdParameter = entityId != null ?
                new ObjectParameter("EntityId", entityId) :
                new ObjectParameter("EntityId", typeof(string));
    
            var exlUploadedIDParameter = exlUploadedID != null ?
                new ObjectParameter("ExlUploadedID", exlUploadedID) :
                new ObjectParameter("ExlUploadedID", typeof(string));
    
            var activityIdParameter = activityId != null ?
                new ObjectParameter("ActivityId", activityId) :
                new ObjectParameter("ActivityId", typeof(string));
    
            var appIdParameter = appId.HasValue ?
                new ObjectParameter("appId", appId) :
                new ObjectParameter("appId", typeof(long));
    
            var debitTypeParameter = debitType != null ?
                new ObjectParameter("DebitType", debitType) :
                new ObjectParameter("DebitType", typeof(string));
    
            var frequencyParameter = frequency != null ?
                new ObjectParameter("Frequency", frequency) :
                new ObjectParameter("Frequency", typeof(string));
    
            var toDebitParameter = toDebit != null ?
                new ObjectParameter("ToDebit", toDebit) :
                new ObjectParameter("ToDebit", typeof(string));
    
            var acNoParameter = acNo != null ?
                new ObjectParameter("AcNo", acNo) :
                new ObjectParameter("AcNo", typeof(string));
    
            var bankNameParameter = bankName != null ?
                new ObjectParameter("BankName", bankName) :
                new ObjectParameter("BankName", typeof(string));
    
            var iFSCParameter = iFSC != null ?
                new ObjectParameter("IFSC", iFSC) :
                new ObjectParameter("IFSC", typeof(string));
    
            var mICRParameter = mICR.HasValue ?
                new ObjectParameter("MICR", mICR) :
                new ObjectParameter("MICR", typeof(double));
    
            var netBankingParameter = netBanking.HasValue ?
                new ObjectParameter("NetBanking", netBanking) :
                new ObjectParameter("NetBanking", typeof(long));
    
            var debitCardParameter = debitCard.HasValue ?
                new ObjectParameter("DebitCard", debitCard) :
                new ObjectParameter("DebitCard", typeof(long));
    
            var amountRupeesParameter = amountRupees != null ?
                new ObjectParameter("AmountRupees", amountRupees) :
                new ObjectParameter("AmountRupees", typeof(string));
    
            var qRCodeImagepathParameter = qRCodeImagepath != null ?
                new ObjectParameter("QRCodeImagepath", qRCodeImagepath) :
                new ObjectParameter("QRCodeImagepath", typeof(string));
    
            var refrence1Parameter = refrence1 != null ?
                new ObjectParameter("Refrence1", refrence1) :
                new ObjectParameter("Refrence1", typeof(string));
    
            var refrence2Parameter = refrence2 != null ?
                new ObjectParameter("Refrence2", refrence2) :
                new ObjectParameter("Refrence2", typeof(string));
    
            var addr1Parameter = addr1 != null ?
                new ObjectParameter("Addr1", addr1) :
                new ObjectParameter("Addr1", typeof(string));
    
            var phNumberParameter = phNumber != null ?
                new ObjectParameter("PhNumber", phNumber) :
                new ObjectParameter("PhNumber", typeof(string));
    
            var emailIdParameter = emailId != null ?
                new ObjectParameter("EmailId", emailId) :
                new ObjectParameter("EmailId", typeof(string));
    
            var fromParameter = from != null ?
                new ObjectParameter("From", from) :
                new ObjectParameter("From", typeof(string));
    
            var toParameter = to != null ?
                new ObjectParameter("To", to) :
                new ObjectParameter("To", typeof(string));
    
            var mandateIdParameter = mandateId.HasValue ?
                new ObjectParameter("MandateId", mandateId) :
                new ObjectParameter("MandateId", typeof(long));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var nachParameter = nach != null ?
                new ObjectParameter("Nach", nach) :
                new ObjectParameter("Nach", typeof(string));
    
            var rupeesParameter = rupees != null ?
                new ObjectParameter("Rupees", rupees) :
                new ObjectParameter("Rupees", typeof(string));
    
            var customer1Parameter = customer1 != null ?
                new ObjectParameter("Customer1", customer1) :
                new ObjectParameter("Customer1", typeof(string));
    
            var customer2Parameter = customer2 != null ?
                new ObjectParameter("Customer2", customer2) :
                new ObjectParameter("Customer2", typeof(string));
    
            var customer3Parameter = customer3 != null ?
                new ObjectParameter("Customer3", customer3) :
                new ObjectParameter("Customer3", typeof(string));
    
            var dateOnMandateParameter = dateOnMandate != null ?
                new ObjectParameter("DateOnMandate", dateOnMandate) :
                new ObjectParameter("DateOnMandate", typeof(string));
    
            var tIPPathParameter = tIPPath != null ?
                new ObjectParameter("TIPPath", tIPPath) :
                new ObjectParameter("TIPPath", typeof(string));
    
            var pNGPathParameter = pNGPath != null ?
                new ObjectParameter("PNGPath", pNGPath) :
                new ObjectParameter("PNGPath", typeof(string));
    
            var utilityCodeParameter = utilityCode != null ?
                new ObjectParameter("UtilityCode", utilityCode) :
                new ObjectParameter("UtilityCode", typeof(string));
    
            var sponsorCodeParameter = sponsorCode != null ?
                new ObjectParameter("SponsorCode", sponsorCode) :
                new ObjectParameter("SponsorCode", typeof(string));
    
            var strFromDateParameter = strFromDate != null ?
                new ObjectParameter("strFromDate", strFromDate) :
                new ObjectParameter("strFromDate", typeof(string));
    
            var strToDateParameter = strToDate != null ?
                new ObjectParameter("strToDate", strToDate) :
                new ObjectParameter("strToDate", typeof(string));
    
            var strTableParameter = strTable != null ?
                new ObjectParameter("strTable", strTable) :
                new ObjectParameter("strTable", typeof(string));
    
            var paymentDataXParameter = paymentDataX != null ?
                new ObjectParameter("PaymentDataX", paymentDataX) :
                new ObjectParameter("PaymentDataX", typeof(string));
    
            var xmlMandateParameter = xmlMandate != null ?
                new ObjectParameter("xmlMandate", xmlMandate) :
                new ObjectParameter("xmlMandate", typeof(string));
    
            var filePathParameter = filePath != null ?
                new ObjectParameter("FilePath", filePath) :
                new ObjectParameter("FilePath", typeof(string));
    
            var bankMICRParameter = bankMICR != null ?
                new ObjectParameter("BankMICR", bankMICR) :
                new ObjectParameter("BankMICR", typeof(string));
    
            var typeDataParameter = typeData != null ?
                new ObjectParameter("TypeData", typeData) :
                new ObjectParameter("TypeData", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var rejectedReasonParameter = rejectedReason != null ?
                new ObjectParameter("RejectedReason", rejectedReason) :
                new ObjectParameter("RejectedReason", typeof(string));
    
            var fullbankBranchParameter = fullbankBranch != null ?
                new ObjectParameter("fullbankBranch", fullbankBranch) :
                new ObjectParameter("fullbankBranch", typeof(string));
    
            var bankValidationAdminCountParameter = bankValidationAdminCount.HasValue ?
                new ObjectParameter("BankValidationAdminCount", bankValidationAdminCount) :
                new ObjectParameter("BankValidationAdminCount", typeof(long));
    
            var bankValidationUserCountParameter = bankValidationUserCount.HasValue ?
                new ObjectParameter("BankValidationUserCount", bankValidationUserCount) :
                new ObjectParameter("BankValidationUserCount", typeof(long));
    
            var acValidationAdminCountParameter = acValidationAdminCount.HasValue ?
                new ObjectParameter("AcValidationAdminCount", acValidationAdminCount) :
                new ObjectParameter("AcValidationAdminCount", typeof(long));
    
            var acValidationUserCountParameter = acValidationUserCount.HasValue ?
                new ObjectParameter("AcValidationUserCount", acValidationUserCount) :
                new ObjectParameter("AcValidationUserCount", typeof(long));
    
            var mandateModeParameter = mandateMode != null ?
                new ObjectParameter("MandateMode", mandateMode) :
                new ObjectParameter("MandateMode", typeof(string));
    
            var amountWordsParameter = amountWords != null ?
                new ObjectParameter("AmountWords", amountWords) :
                new ObjectParameter("AmountWords", typeof(string));
    
            var sponsorBankCodeParameter = sponsorBankCode != null ?
                new ObjectParameter("SponsorBankCode", sponsorBankCode) :
                new ObjectParameter("SponsorBankCode", typeof(string));
    
            var iSPhysicalParameter = iSPhysical.HasValue ?
                new ObjectParameter("ISPhysical", iSPhysical) :
                new ObjectParameter("ISPhysical", typeof(bool));
    
            var isEnachParameter = isEnach.HasValue ?
                new ObjectParameter("IsEnach", isEnach) :
                new ObjectParameter("IsEnach", typeof(bool));
    
            var topValParameter = topVal.HasValue ?
                new ObjectParameter("topVal", topVal) :
                new ObjectParameter("topVal", typeof(int));
    
            var jpgPathParameter = jpgPath != null ?
                new ObjectParameter("jpgPath", jpgPath) :
                new ObjectParameter("jpgPath", typeof(string));
    
            var activityTypeParameter = activityType != null ?
                new ObjectParameter("ActivityType", activityType) :
                new ObjectParameter("ActivityType", typeof(string));
    
            var categoryCodeParameter = categoryCode != null ?
                new ObjectParameter("CategoryCode", categoryCode) :
                new ObjectParameter("CategoryCode", typeof(string));
    
            var custIFSCParameter = custIFSC != null ?
                new ObjectParameter("CustIFSC", custIFSC) :
                new ObjectParameter("CustIFSC", typeof(string));
    
            var bankIFSCParameter = bankIFSC != null ?
                new ObjectParameter("BankIFSC", bankIFSC) :
                new ObjectParameter("BankIFSC", typeof(string));
    
            var bulkOrNotParameter = bulkOrNot != null ?
                new ObjectParameter("BulkOrNot", bulkOrNot) :
                new ObjectParameter("BulkOrNot", typeof(string));
    
            var mandateIdReverseParameter = mandateIdReverse != null ?
                new ObjectParameter("MandateIdReverse", mandateIdReverse) :
                new ObjectParameter("MandateIdReverse", typeof(string));
    
            var uMRNParameter = uMRN != null ?
                new ObjectParameter("UMRN", uMRN) :
                new ObjectParameter("UMRN", typeof(string));
    
            var snoParameter = sno.HasValue ?
                new ObjectParameter("Sno", sno) :
                new ObjectParameter("Sno", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_BankBulkUpload_bkp_Result>("Sp_BankBulkUpload_bkp", queryTypeParameter, xmlDimensionParameter, userIDParameter, entityIdParameter, exlUploadedIDParameter, activityIdParameter, appIdParameter, debitTypeParameter, frequencyParameter, toDebitParameter, acNoParameter, bankNameParameter, iFSCParameter, mICRParameter, netBankingParameter, debitCardParameter, amountRupeesParameter, qRCodeImagepathParameter, refrence1Parameter, refrence2Parameter, addr1Parameter, phNumberParameter, emailIdParameter, fromParameter, toParameter, mandateIdParameter, descriptionParameter, statusParameter, nachParameter, rupeesParameter, customer1Parameter, customer2Parameter, customer3Parameter, dateOnMandateParameter, tIPPathParameter, pNGPathParameter, utilityCodeParameter, sponsorCodeParameter, strFromDateParameter, strToDateParameter, strTableParameter, paymentDataXParameter, xmlMandateParameter, filePathParameter, bankMICRParameter, typeDataParameter, fromDateParameter, toDateParameter, rejectedReasonParameter, fullbankBranchParameter, bankValidationAdminCountParameter, bankValidationUserCountParameter, acValidationAdminCountParameter, acValidationUserCountParameter, mandateModeParameter, amountWordsParameter, sponsorBankCodeParameter, iSPhysicalParameter, isEnachParameter, topValParameter, jpgPathParameter, activityTypeParameter, categoryCodeParameter, custIFSCParameter, bankIFSCParameter, bulkOrNotParameter, mandateIdReverseParameter, uMRNParameter, snoParameter);
        }
    
        public virtual ObjectResult<Sp_BankMaster_Result> Sp_BankMaster(string queryType, Nullable<long> stateId, Nullable<long> countryId, string name, string contactPerson, string sponsorBankCode, string utilityCode, string sponsorBankName, Nullable<long> entityId, string addr1, string email, Nullable<long> cityId, string mobile, string pincode, string fax, string imagePath, Nullable<long> userId, string userName, string password, string passwordKey, string code, string xmlEntity, string dtBillingMail, string type, string debitType, string frequencyType, string toDebit, string xmlUtilityCode, string xmlSponsorBankCode, string instructingMemberId, string amount, string xmlPaymentMode, string activate, string entityBusinessCode, Nullable<bool> isOverMandate, Nullable<bool> isRefrenceCheck, Nullable<bool> isValidationCountEnable, Nullable<long> bankValidationAdminCount, Nullable<long> bankValidationUserCount, Nullable<long> acValidationAdminCount, Nullable<long> acValidationUserCount, Nullable<bool> isRefNumerc, Nullable<bool> isSendEmailCustomer, Nullable<bool> isShowMandateMode, Nullable<bool> ischkEmandate, Nullable<bool> ischkPhysical, string xmldebittype, string xmlToDebit, string xmlType, string xmlfrequency, Nullable<bool> chkIsRefrence2Mandatory, string dtBankAmount, Nullable<bool> isThirdTransaction, Nullable<bool> chkIsZipSure, Nullable<bool> chkIsAllowEManadte, Nullable<bool> iSTodateMandatoryEnach, string xmlFileName, string accountNumber, Nullable<long> aPPId, string presentmentSeqNumber, Nullable<bool> reCheck, Nullable<bool> checkerRequire, string xmlModeType, Nullable<bool> chkIsaccountvalidation, Nullable<bool> chkIsmobileapp, Nullable<long> bankMasterId, Nullable<long> corporateId, string xmlDimension, string xmlCategoryCode, string pAN, string tAN, string gSTIN, Nullable<bool> isNachPresentment, string billingAddress, string chargeDebitAcNo, string bankCorporateId, string branchCode, string iFSC, Nullable<long> regionalManagerId, Nullable<long> pSM, string billingContactPerson, string designation, string contactNo, string faxNo, Nullable<int> arrangementInDays, string pickUpLocationAddress, string pickUpContactPerson, string communicationMailPrimary, string ip, string url, string h2hUsername, string h2hpassword, string xmlFileNameImgDOC, string branchName, Nullable<long> settlementTypeId, Nullable<long> businessSegmentId, string dtcontactperson)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var stateIdParameter = stateId.HasValue ?
                new ObjectParameter("StateId", stateId) :
                new ObjectParameter("StateId", typeof(long));
    
            var countryIdParameter = countryId.HasValue ?
                new ObjectParameter("CountryId", countryId) :
                new ObjectParameter("CountryId", typeof(long));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var contactPersonParameter = contactPerson != null ?
                new ObjectParameter("ContactPerson", contactPerson) :
                new ObjectParameter("ContactPerson", typeof(string));
    
            var sponsorBankCodeParameter = sponsorBankCode != null ?
                new ObjectParameter("SponsorBankCode", sponsorBankCode) :
                new ObjectParameter("SponsorBankCode", typeof(string));
    
            var utilityCodeParameter = utilityCode != null ?
                new ObjectParameter("UtilityCode", utilityCode) :
                new ObjectParameter("UtilityCode", typeof(string));
    
            var sponsorBankNameParameter = sponsorBankName != null ?
                new ObjectParameter("SponsorBankName", sponsorBankName) :
                new ObjectParameter("SponsorBankName", typeof(string));
    
            var entityIdParameter = entityId.HasValue ?
                new ObjectParameter("EntityId", entityId) :
                new ObjectParameter("EntityId", typeof(long));
    
            var addr1Parameter = addr1 != null ?
                new ObjectParameter("Addr1", addr1) :
                new ObjectParameter("Addr1", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var cityIdParameter = cityId.HasValue ?
                new ObjectParameter("CityId", cityId) :
                new ObjectParameter("CityId", typeof(long));
    
            var mobileParameter = mobile != null ?
                new ObjectParameter("Mobile", mobile) :
                new ObjectParameter("Mobile", typeof(string));
    
            var pincodeParameter = pincode != null ?
                new ObjectParameter("Pincode", pincode) :
                new ObjectParameter("Pincode", typeof(string));
    
            var faxParameter = fax != null ?
                new ObjectParameter("Fax", fax) :
                new ObjectParameter("Fax", typeof(string));
    
            var imagePathParameter = imagePath != null ?
                new ObjectParameter("ImagePath", imagePath) :
                new ObjectParameter("ImagePath", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            var passwordKeyParameter = passwordKey != null ?
                new ObjectParameter("passwordKey", passwordKey) :
                new ObjectParameter("passwordKey", typeof(string));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var xmlEntityParameter = xmlEntity != null ?
                new ObjectParameter("XmlEntity", xmlEntity) :
                new ObjectParameter("XmlEntity", typeof(string));
    
            var dtBillingMailParameter = dtBillingMail != null ?
                new ObjectParameter("dtBillingMail", dtBillingMail) :
                new ObjectParameter("dtBillingMail", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var debitTypeParameter = debitType != null ?
                new ObjectParameter("DebitType", debitType) :
                new ObjectParameter("DebitType", typeof(string));
    
            var frequencyTypeParameter = frequencyType != null ?
                new ObjectParameter("FrequencyType", frequencyType) :
                new ObjectParameter("FrequencyType", typeof(string));
    
            var toDebitParameter = toDebit != null ?
                new ObjectParameter("ToDebit", toDebit) :
                new ObjectParameter("ToDebit", typeof(string));
    
            var xmlUtilityCodeParameter = xmlUtilityCode != null ?
                new ObjectParameter("XmlUtilityCode", xmlUtilityCode) :
                new ObjectParameter("XmlUtilityCode", typeof(string));
    
            var xmlSponsorBankCodeParameter = xmlSponsorBankCode != null ?
                new ObjectParameter("XmlSponsorBankCode", xmlSponsorBankCode) :
                new ObjectParameter("XmlSponsorBankCode", typeof(string));
    
            var instructingMemberIdParameter = instructingMemberId != null ?
                new ObjectParameter("InstructingMemberId", instructingMemberId) :
                new ObjectParameter("InstructingMemberId", typeof(string));
    
            var amountParameter = amount != null ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(string));
    
            var xmlPaymentModeParameter = xmlPaymentMode != null ?
                new ObjectParameter("XmlPaymentMode", xmlPaymentMode) :
                new ObjectParameter("XmlPaymentMode", typeof(string));
    
            var activateParameter = activate != null ?
                new ObjectParameter("Activate", activate) :
                new ObjectParameter("Activate", typeof(string));
    
            var entityBusinessCodeParameter = entityBusinessCode != null ?
                new ObjectParameter("EntityBusinessCode", entityBusinessCode) :
                new ObjectParameter("EntityBusinessCode", typeof(string));
    
            var isOverMandateParameter = isOverMandate.HasValue ?
                new ObjectParameter("IsOverMandate", isOverMandate) :
                new ObjectParameter("IsOverMandate", typeof(bool));
    
            var isRefrenceCheckParameter = isRefrenceCheck.HasValue ?
                new ObjectParameter("IsRefrenceCheck", isRefrenceCheck) :
                new ObjectParameter("IsRefrenceCheck", typeof(bool));
    
            var isValidationCountEnableParameter = isValidationCountEnable.HasValue ?
                new ObjectParameter("IsValidationCountEnable", isValidationCountEnable) :
                new ObjectParameter("IsValidationCountEnable", typeof(bool));
    
            var bankValidationAdminCountParameter = bankValidationAdminCount.HasValue ?
                new ObjectParameter("BankValidationAdminCount", bankValidationAdminCount) :
                new ObjectParameter("BankValidationAdminCount", typeof(long));
    
            var bankValidationUserCountParameter = bankValidationUserCount.HasValue ?
                new ObjectParameter("BankValidationUserCount", bankValidationUserCount) :
                new ObjectParameter("BankValidationUserCount", typeof(long));
    
            var acValidationAdminCountParameter = acValidationAdminCount.HasValue ?
                new ObjectParameter("AcValidationAdminCount", acValidationAdminCount) :
                new ObjectParameter("AcValidationAdminCount", typeof(long));
    
            var acValidationUserCountParameter = acValidationUserCount.HasValue ?
                new ObjectParameter("AcValidationUserCount", acValidationUserCount) :
                new ObjectParameter("AcValidationUserCount", typeof(long));
    
            var isRefNumercParameter = isRefNumerc.HasValue ?
                new ObjectParameter("IsRefNumerc", isRefNumerc) :
                new ObjectParameter("IsRefNumerc", typeof(bool));
    
            var isSendEmailCustomerParameter = isSendEmailCustomer.HasValue ?
                new ObjectParameter("IsSendEmailCustomer", isSendEmailCustomer) :
                new ObjectParameter("IsSendEmailCustomer", typeof(bool));
    
            var isShowMandateModeParameter = isShowMandateMode.HasValue ?
                new ObjectParameter("IsShowMandateMode", isShowMandateMode) :
                new ObjectParameter("IsShowMandateMode", typeof(bool));
    
            var ischkEmandateParameter = ischkEmandate.HasValue ?
                new ObjectParameter("IschkEmandate", ischkEmandate) :
                new ObjectParameter("IschkEmandate", typeof(bool));
    
            var ischkPhysicalParameter = ischkPhysical.HasValue ?
                new ObjectParameter("IschkPhysical", ischkPhysical) :
                new ObjectParameter("IschkPhysical", typeof(bool));
    
            var xmldebittypeParameter = xmldebittype != null ?
                new ObjectParameter("Xmldebittype", xmldebittype) :
                new ObjectParameter("Xmldebittype", typeof(string));
    
            var xmlToDebitParameter = xmlToDebit != null ?
                new ObjectParameter("XmlToDebit", xmlToDebit) :
                new ObjectParameter("XmlToDebit", typeof(string));
    
            var xmlTypeParameter = xmlType != null ?
                new ObjectParameter("XmlType", xmlType) :
                new ObjectParameter("XmlType", typeof(string));
    
            var xmlfrequencyParameter = xmlfrequency != null ?
                new ObjectParameter("Xmlfrequency", xmlfrequency) :
                new ObjectParameter("Xmlfrequency", typeof(string));
    
            var chkIsRefrence2MandatoryParameter = chkIsRefrence2Mandatory.HasValue ?
                new ObjectParameter("chkIsRefrence2Mandatory", chkIsRefrence2Mandatory) :
                new ObjectParameter("chkIsRefrence2Mandatory", typeof(bool));
    
            var dtBankAmountParameter = dtBankAmount != null ?
                new ObjectParameter("dtBankAmount", dtBankAmount) :
                new ObjectParameter("dtBankAmount", typeof(string));
    
            var isThirdTransactionParameter = isThirdTransaction.HasValue ?
                new ObjectParameter("IsThirdTransaction", isThirdTransaction) :
                new ObjectParameter("IsThirdTransaction", typeof(bool));
    
            var chkIsZipSureParameter = chkIsZipSure.HasValue ?
                new ObjectParameter("chkIsZipSure", chkIsZipSure) :
                new ObjectParameter("chkIsZipSure", typeof(bool));
    
            var chkIsAllowEManadteParameter = chkIsAllowEManadte.HasValue ?
                new ObjectParameter("chkIsAllowEManadte", chkIsAllowEManadte) :
                new ObjectParameter("chkIsAllowEManadte", typeof(bool));
    
            var iSTodateMandatoryEnachParameter = iSTodateMandatoryEnach.HasValue ?
                new ObjectParameter("ISTodateMandatoryEnach", iSTodateMandatoryEnach) :
                new ObjectParameter("ISTodateMandatoryEnach", typeof(bool));
    
            var xmlFileNameParameter = xmlFileName != null ?
                new ObjectParameter("XmlFileName", xmlFileName) :
                new ObjectParameter("XmlFileName", typeof(string));
    
            var accountNumberParameter = accountNumber != null ?
                new ObjectParameter("AccountNumber", accountNumber) :
                new ObjectParameter("AccountNumber", typeof(string));
    
            var aPPIdParameter = aPPId.HasValue ?
                new ObjectParameter("APPId", aPPId) :
                new ObjectParameter("APPId", typeof(long));
    
            var presentmentSeqNumberParameter = presentmentSeqNumber != null ?
                new ObjectParameter("PresentmentSeqNumber", presentmentSeqNumber) :
                new ObjectParameter("PresentmentSeqNumber", typeof(string));
    
            var reCheckParameter = reCheck.HasValue ?
                new ObjectParameter("ReCheck", reCheck) :
                new ObjectParameter("ReCheck", typeof(bool));
    
            var checkerRequireParameter = checkerRequire.HasValue ?
                new ObjectParameter("CheckerRequire", checkerRequire) :
                new ObjectParameter("CheckerRequire", typeof(bool));
    
            var xmlModeTypeParameter = xmlModeType != null ?
                new ObjectParameter("XmlModeType", xmlModeType) :
                new ObjectParameter("XmlModeType", typeof(string));
    
            var chkIsaccountvalidationParameter = chkIsaccountvalidation.HasValue ?
                new ObjectParameter("chkIsaccountvalidation", chkIsaccountvalidation) :
                new ObjectParameter("chkIsaccountvalidation", typeof(bool));
    
            var chkIsmobileappParameter = chkIsmobileapp.HasValue ?
                new ObjectParameter("chkIsmobileapp", chkIsmobileapp) :
                new ObjectParameter("chkIsmobileapp", typeof(bool));
    
            var bankMasterIdParameter = bankMasterId.HasValue ?
                new ObjectParameter("BankMasterId", bankMasterId) :
                new ObjectParameter("BankMasterId", typeof(long));
    
            var corporateIdParameter = corporateId.HasValue ?
                new ObjectParameter("CorporateId", corporateId) :
                new ObjectParameter("CorporateId", typeof(long));
    
            var xmlDimensionParameter = xmlDimension != null ?
                new ObjectParameter("XmlDimension", xmlDimension) :
                new ObjectParameter("XmlDimension", typeof(string));
    
            var xmlCategoryCodeParameter = xmlCategoryCode != null ?
                new ObjectParameter("XmlCategoryCode", xmlCategoryCode) :
                new ObjectParameter("XmlCategoryCode", typeof(string));
    
            var pANParameter = pAN != null ?
                new ObjectParameter("PAN", pAN) :
                new ObjectParameter("PAN", typeof(string));
    
            var tANParameter = tAN != null ?
                new ObjectParameter("TAN", tAN) :
                new ObjectParameter("TAN", typeof(string));
    
            var gSTINParameter = gSTIN != null ?
                new ObjectParameter("GSTIN", gSTIN) :
                new ObjectParameter("GSTIN", typeof(string));
    
            var isNachPresentmentParameter = isNachPresentment.HasValue ?
                new ObjectParameter("IsNachPresentment", isNachPresentment) :
                new ObjectParameter("IsNachPresentment", typeof(bool));
    
            var billingAddressParameter = billingAddress != null ?
                new ObjectParameter("BillingAddress", billingAddress) :
                new ObjectParameter("BillingAddress", typeof(string));
    
            var chargeDebitAcNoParameter = chargeDebitAcNo != null ?
                new ObjectParameter("ChargeDebitAcNo", chargeDebitAcNo) :
                new ObjectParameter("ChargeDebitAcNo", typeof(string));
    
            var bankCorporateIdParameter = bankCorporateId != null ?
                new ObjectParameter("BankCorporateId", bankCorporateId) :
                new ObjectParameter("BankCorporateId", typeof(string));
    
            var branchCodeParameter = branchCode != null ?
                new ObjectParameter("BranchCode", branchCode) :
                new ObjectParameter("BranchCode", typeof(string));
    
            var iFSCParameter = iFSC != null ?
                new ObjectParameter("IFSC", iFSC) :
                new ObjectParameter("IFSC", typeof(string));
    
            var regionalManagerIdParameter = regionalManagerId.HasValue ?
                new ObjectParameter("RegionalManagerId", regionalManagerId) :
                new ObjectParameter("RegionalManagerId", typeof(long));
    
            var pSMParameter = pSM.HasValue ?
                new ObjectParameter("PSM", pSM) :
                new ObjectParameter("PSM", typeof(long));
    
            var billingContactPersonParameter = billingContactPerson != null ?
                new ObjectParameter("BillingContactPerson", billingContactPerson) :
                new ObjectParameter("BillingContactPerson", typeof(string));
    
            var designationParameter = designation != null ?
                new ObjectParameter("Designation", designation) :
                new ObjectParameter("Designation", typeof(string));
    
            var contactNoParameter = contactNo != null ?
                new ObjectParameter("ContactNo", contactNo) :
                new ObjectParameter("ContactNo", typeof(string));
    
            var faxNoParameter = faxNo != null ?
                new ObjectParameter("FaxNo", faxNo) :
                new ObjectParameter("FaxNo", typeof(string));
    
            var arrangementInDaysParameter = arrangementInDays.HasValue ?
                new ObjectParameter("ArrangementInDays", arrangementInDays) :
                new ObjectParameter("ArrangementInDays", typeof(int));
    
            var pickUpLocationAddressParameter = pickUpLocationAddress != null ?
                new ObjectParameter("PickUpLocationAddress", pickUpLocationAddress) :
                new ObjectParameter("PickUpLocationAddress", typeof(string));
    
            var pickUpContactPersonParameter = pickUpContactPerson != null ?
                new ObjectParameter("PickUpContactPerson", pickUpContactPerson) :
                new ObjectParameter("PickUpContactPerson", typeof(string));
    
            var communicationMailPrimaryParameter = communicationMailPrimary != null ?
                new ObjectParameter("CommunicationMailPrimary", communicationMailPrimary) :
                new ObjectParameter("CommunicationMailPrimary", typeof(string));
    
            var ipParameter = ip != null ?
                new ObjectParameter("Ip", ip) :
                new ObjectParameter("Ip", typeof(string));
    
            var urlParameter = url != null ?
                new ObjectParameter("Url", url) :
                new ObjectParameter("Url", typeof(string));
    
            var h2hUsernameParameter = h2hUsername != null ?
                new ObjectParameter("h2hUsername", h2hUsername) :
                new ObjectParameter("h2hUsername", typeof(string));
    
            var h2hpasswordParameter = h2hpassword != null ?
                new ObjectParameter("h2hpassword", h2hpassword) :
                new ObjectParameter("h2hpassword", typeof(string));
    
            var xmlFileNameImgDOCParameter = xmlFileNameImgDOC != null ?
                new ObjectParameter("XmlFileNameImgDOC", xmlFileNameImgDOC) :
                new ObjectParameter("XmlFileNameImgDOC", typeof(string));
    
            var branchNameParameter = branchName != null ?
                new ObjectParameter("BranchName", branchName) :
                new ObjectParameter("BranchName", typeof(string));
    
            var settlementTypeIdParameter = settlementTypeId.HasValue ?
                new ObjectParameter("SettlementTypeId", settlementTypeId) :
                new ObjectParameter("SettlementTypeId", typeof(long));
    
            var businessSegmentIdParameter = businessSegmentId.HasValue ?
                new ObjectParameter("BusinessSegmentId", businessSegmentId) :
                new ObjectParameter("BusinessSegmentId", typeof(long));
    
            var dtcontactpersonParameter = dtcontactperson != null ?
                new ObjectParameter("dtcontactperson", dtcontactperson) :
                new ObjectParameter("dtcontactperson", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_BankMaster_Result>("Sp_BankMaster", queryTypeParameter, stateIdParameter, countryIdParameter, nameParameter, contactPersonParameter, sponsorBankCodeParameter, utilityCodeParameter, sponsorBankNameParameter, entityIdParameter, addr1Parameter, emailParameter, cityIdParameter, mobileParameter, pincodeParameter, faxParameter, imagePathParameter, userIdParameter, userNameParameter, passwordParameter, passwordKeyParameter, codeParameter, xmlEntityParameter, dtBillingMailParameter, typeParameter, debitTypeParameter, frequencyTypeParameter, toDebitParameter, xmlUtilityCodeParameter, xmlSponsorBankCodeParameter, instructingMemberIdParameter, amountParameter, xmlPaymentModeParameter, activateParameter, entityBusinessCodeParameter, isOverMandateParameter, isRefrenceCheckParameter, isValidationCountEnableParameter, bankValidationAdminCountParameter, bankValidationUserCountParameter, acValidationAdminCountParameter, acValidationUserCountParameter, isRefNumercParameter, isSendEmailCustomerParameter, isShowMandateModeParameter, ischkEmandateParameter, ischkPhysicalParameter, xmldebittypeParameter, xmlToDebitParameter, xmlTypeParameter, xmlfrequencyParameter, chkIsRefrence2MandatoryParameter, dtBankAmountParameter, isThirdTransactionParameter, chkIsZipSureParameter, chkIsAllowEManadteParameter, iSTodateMandatoryEnachParameter, xmlFileNameParameter, accountNumberParameter, aPPIdParameter, presentmentSeqNumberParameter, reCheckParameter, checkerRequireParameter, xmlModeTypeParameter, chkIsaccountvalidationParameter, chkIsmobileappParameter, bankMasterIdParameter, corporateIdParameter, xmlDimensionParameter, xmlCategoryCodeParameter, pANParameter, tANParameter, gSTINParameter, isNachPresentmentParameter, billingAddressParameter, chargeDebitAcNoParameter, bankCorporateIdParameter, branchCodeParameter, iFSCParameter, regionalManagerIdParameter, pSMParameter, billingContactPersonParameter, designationParameter, contactNoParameter, faxNoParameter, arrangementInDaysParameter, pickUpLocationAddressParameter, pickUpContactPersonParameter, communicationMailPrimaryParameter, ipParameter, urlParameter, h2hUsernameParameter, h2hpasswordParameter, xmlFileNameImgDOCParameter, branchNameParameter, settlementTypeIdParameter, businessSegmentIdParameter, dtcontactpersonParameter);
        }
    
        public virtual ObjectResult<Sp_BankUpdatedDetails_Result> Sp_BankUpdatedDetails(string queryType, string ifsc, string micr, string branch, string bankname, Nullable<long> userid, Nullable<long> bankid)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var ifscParameter = ifsc != null ?
                new ObjectParameter("ifsc", ifsc) :
                new ObjectParameter("ifsc", typeof(string));
    
            var micrParameter = micr != null ?
                new ObjectParameter("micr", micr) :
                new ObjectParameter("micr", typeof(string));
    
            var branchParameter = branch != null ?
                new ObjectParameter("branch", branch) :
                new ObjectParameter("branch", typeof(string));
    
            var banknameParameter = bankname != null ?
                new ObjectParameter("bankname", bankname) :
                new ObjectParameter("bankname", typeof(string));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(long));
    
            var bankidParameter = bankid.HasValue ?
                new ObjectParameter("bankid", bankid) :
                new ObjectParameter("bankid", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_BankUpdatedDetails_Result>("Sp_BankUpdatedDetails", queryTypeParameter, ifscParameter, micrParameter, branchParameter, banknameParameter, useridParameter, bankidParameter);
        }
    
        public virtual ObjectResult<Sp_BranchCreation_Result> Sp_BranchCreation(string queryType, Nullable<long> branchId, string branchCode, string branchName, string address, string contactPerson, Nullable<long> mobileNo, string emailId, string password, string passwordKey, Nullable<long> userId, string name, string xmlDeleteBranches, Nullable<bool> status, Nullable<long> branchUserId, string xmlDeleteBranchUser)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(long));
    
            var branchCodeParameter = branchCode != null ?
                new ObjectParameter("BranchCode", branchCode) :
                new ObjectParameter("BranchCode", typeof(string));
    
            var branchNameParameter = branchName != null ?
                new ObjectParameter("BranchName", branchName) :
                new ObjectParameter("BranchName", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var contactPersonParameter = contactPerson != null ?
                new ObjectParameter("ContactPerson", contactPerson) :
                new ObjectParameter("ContactPerson", typeof(string));
    
            var mobileNoParameter = mobileNo.HasValue ?
                new ObjectParameter("MobileNo", mobileNo) :
                new ObjectParameter("MobileNo", typeof(long));
    
            var emailIdParameter = emailId != null ?
                new ObjectParameter("EmailId", emailId) :
                new ObjectParameter("EmailId", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var passwordKeyParameter = passwordKey != null ?
                new ObjectParameter("PasswordKey", passwordKey) :
                new ObjectParameter("PasswordKey", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var xmlDeleteBranchesParameter = xmlDeleteBranches != null ?
                new ObjectParameter("xmlDeleteBranches", xmlDeleteBranches) :
                new ObjectParameter("xmlDeleteBranches", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            var branchUserIdParameter = branchUserId.HasValue ?
                new ObjectParameter("BranchUserId", branchUserId) :
                new ObjectParameter("BranchUserId", typeof(long));
    
            var xmlDeleteBranchUserParameter = xmlDeleteBranchUser != null ?
                new ObjectParameter("xmlDeleteBranchUser", xmlDeleteBranchUser) :
                new ObjectParameter("xmlDeleteBranchUser", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_BranchCreation_Result>("Sp_BranchCreation", queryTypeParameter, branchIdParameter, branchCodeParameter, branchNameParameter, addressParameter, contactPersonParameter, mobileNoParameter, emailIdParameter, passwordParameter, passwordKeyParameter, userIdParameter, nameParameter, xmlDeleteBranchesParameter, statusParameter, branchUserIdParameter, xmlDeleteBranchUserParameter);
        }
    
        public virtual ObjectResult<Nullable<bool>> Sp_BulkESign(string queryType, Nullable<long> userId, Nullable<long> entityId, string strTable, Nullable<long> mandateid)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var entityIdParameter = entityId.HasValue ?
                new ObjectParameter("EntityId", entityId) :
                new ObjectParameter("EntityId", typeof(long));
    
            var strTableParameter = strTable != null ?
                new ObjectParameter("strTable", strTable) :
                new ObjectParameter("strTable", typeof(string));
    
            var mandateidParameter = mandateid.HasValue ?
                new ObjectParameter("mandateid", mandateid) :
                new ObjectParameter("mandateid", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<bool>>("Sp_BulkESign", queryTypeParameter, userIdParameter, entityIdParameter, strTableParameter, mandateidParameter);
        }
    
        public virtual ObjectResult<Sp_Bulkmandate_Result> Sp_Bulkmandate(string queryType, string xmlMandate, Nullable<long> entityId, string filePath, Nullable<long> activityId, Nullable<long> userId, string xMLMandateId, string xMLNameUpdate, string tEUHID, Nullable<int> topVal, string mandID, string activityType, Nullable<long> appId)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var xmlMandateParameter = xmlMandate != null ?
                new ObjectParameter("xmlMandate", xmlMandate) :
                new ObjectParameter("xmlMandate", typeof(string));
    
            var entityIdParameter = entityId.HasValue ?
                new ObjectParameter("EntityId", entityId) :
                new ObjectParameter("EntityId", typeof(long));
    
            var filePathParameter = filePath != null ?
                new ObjectParameter("FilePath", filePath) :
                new ObjectParameter("FilePath", typeof(string));
    
            var activityIdParameter = activityId.HasValue ?
                new ObjectParameter("ActivityId", activityId) :
                new ObjectParameter("ActivityId", typeof(long));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var xMLMandateIdParameter = xMLMandateId != null ?
                new ObjectParameter("XMLMandateId", xMLMandateId) :
                new ObjectParameter("XMLMandateId", typeof(string));
    
            var xMLNameUpdateParameter = xMLNameUpdate != null ?
                new ObjectParameter("XMLNameUpdate", xMLNameUpdate) :
                new ObjectParameter("XMLNameUpdate", typeof(string));
    
            var tEUHIDParameter = tEUHID != null ?
                new ObjectParameter("TEUHID", tEUHID) :
                new ObjectParameter("TEUHID", typeof(string));
    
            var topValParameter = topVal.HasValue ?
                new ObjectParameter("topVal", topVal) :
                new ObjectParameter("topVal", typeof(int));
    
            var mandIDParameter = mandID != null ?
                new ObjectParameter("MandID", mandID) :
                new ObjectParameter("MandID", typeof(string));
    
            var activityTypeParameter = activityType != null ?
                new ObjectParameter("ActivityType", activityType) :
                new ObjectParameter("ActivityType", typeof(string));
    
            var appIdParameter = appId.HasValue ?
                new ObjectParameter("AppId", appId) :
                new ObjectParameter("AppId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_Bulkmandate_Result>("Sp_Bulkmandate", queryTypeParameter, xmlMandateParameter, entityIdParameter, filePathParameter, activityIdParameter, userIdParameter, xMLMandateIdParameter, xMLNameUpdateParameter, tEUHIDParameter, topValParameter, mandIDParameter, activityTypeParameter, appIdParameter);
        }
    
        public virtual ObjectResult<Sp_Bulkmandate_Physical_Result> Sp_Bulkmandate_Physical(string queryType, string xmlMandate, Nullable<long> entityId, string filePath, Nullable<long> activityId, Nullable<long> userId, string xMLMandateId, string xMLNameUpdate, string tEUHID, Nullable<int> topVal, string mandID, string activityType, Nullable<long> appId)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var xmlMandateParameter = xmlMandate != null ?
                new ObjectParameter("xmlMandate", xmlMandate) :
                new ObjectParameter("xmlMandate", typeof(string));
    
            var entityIdParameter = entityId.HasValue ?
                new ObjectParameter("EntityId", entityId) :
                new ObjectParameter("EntityId", typeof(long));
    
            var filePathParameter = filePath != null ?
                new ObjectParameter("FilePath", filePath) :
                new ObjectParameter("FilePath", typeof(string));
    
            var activityIdParameter = activityId.HasValue ?
                new ObjectParameter("ActivityId", activityId) :
                new ObjectParameter("ActivityId", typeof(long));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var xMLMandateIdParameter = xMLMandateId != null ?
                new ObjectParameter("XMLMandateId", xMLMandateId) :
                new ObjectParameter("XMLMandateId", typeof(string));
    
            var xMLNameUpdateParameter = xMLNameUpdate != null ?
                new ObjectParameter("XMLNameUpdate", xMLNameUpdate) :
                new ObjectParameter("XMLNameUpdate", typeof(string));
    
            var tEUHIDParameter = tEUHID != null ?
                new ObjectParameter("TEUHID", tEUHID) :
                new ObjectParameter("TEUHID", typeof(string));
    
            var topValParameter = topVal.HasValue ?
                new ObjectParameter("topVal", topVal) :
                new ObjectParameter("topVal", typeof(int));
    
            var mandIDParameter = mandID != null ?
                new ObjectParameter("MandID", mandID) :
                new ObjectParameter("MandID", typeof(string));
    
            var activityTypeParameter = activityType != null ?
                new ObjectParameter("ActivityType", activityType) :
                new ObjectParameter("ActivityType", typeof(string));
    
            var appIdParameter = appId.HasValue ?
                new ObjectParameter("AppId", appId) :
                new ObjectParameter("AppId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_Bulkmandate_Physical_Result>("Sp_Bulkmandate_Physical", queryTypeParameter, xmlMandateParameter, entityIdParameter, filePathParameter, activityIdParameter, userIdParameter, xMLMandateIdParameter, xMLNameUpdateParameter, tEUHIDParameter, topValParameter, mandIDParameter, activityTypeParameter, appIdParameter);
        }
    
        public virtual ObjectResult<Sp_ChargeMaster_Result> Sp_ChargeMaster(string queryType, Nullable<long> cMId, string utilityCode, Nullable<long> enityId, Nullable<long> bankId, Nullable<decimal> txnType, Nullable<decimal> mandatePrintingCharges, Nullable<decimal> mandateCharge, Nullable<decimal> txnCharge, Nullable<decimal> mandateReturnCharges, Nullable<decimal> transactionReturncharges, Nullable<decimal> courierCharges, Nullable<decimal> dispatchCharges, Nullable<decimal> chargeAdvice, Nullable<long> createdBy, Nullable<long> updatedBy)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var cMIdParameter = cMId.HasValue ?
                new ObjectParameter("CMId", cMId) :
                new ObjectParameter("CMId", typeof(long));
    
            var utilityCodeParameter = utilityCode != null ?
                new ObjectParameter("UtilityCode", utilityCode) :
                new ObjectParameter("UtilityCode", typeof(string));
    
            var enityIdParameter = enityId.HasValue ?
                new ObjectParameter("EnityId", enityId) :
                new ObjectParameter("EnityId", typeof(long));
    
            var bankIdParameter = bankId.HasValue ?
                new ObjectParameter("BankId", bankId) :
                new ObjectParameter("BankId", typeof(long));
    
            var txnTypeParameter = txnType.HasValue ?
                new ObjectParameter("TxnType", txnType) :
                new ObjectParameter("TxnType", typeof(decimal));
    
            var mandatePrintingChargesParameter = mandatePrintingCharges.HasValue ?
                new ObjectParameter("MandatePrintingCharges", mandatePrintingCharges) :
                new ObjectParameter("MandatePrintingCharges", typeof(decimal));
    
            var mandateChargeParameter = mandateCharge.HasValue ?
                new ObjectParameter("MandateCharge", mandateCharge) :
                new ObjectParameter("MandateCharge", typeof(decimal));
    
            var txnChargeParameter = txnCharge.HasValue ?
                new ObjectParameter("TxnCharge", txnCharge) :
                new ObjectParameter("TxnCharge", typeof(decimal));
    
            var mandateReturnChargesParameter = mandateReturnCharges.HasValue ?
                new ObjectParameter("MandateReturnCharges", mandateReturnCharges) :
                new ObjectParameter("MandateReturnCharges", typeof(decimal));
    
            var transactionReturnchargesParameter = transactionReturncharges.HasValue ?
                new ObjectParameter("TransactionReturncharges", transactionReturncharges) :
                new ObjectParameter("TransactionReturncharges", typeof(decimal));
    
            var courierChargesParameter = courierCharges.HasValue ?
                new ObjectParameter("CourierCharges", courierCharges) :
                new ObjectParameter("CourierCharges", typeof(decimal));
    
            var dispatchChargesParameter = dispatchCharges.HasValue ?
                new ObjectParameter("DispatchCharges", dispatchCharges) :
                new ObjectParameter("DispatchCharges", typeof(decimal));
    
            var chargeAdviceParameter = chargeAdvice.HasValue ?
                new ObjectParameter("ChargeAdvice", chargeAdvice) :
                new ObjectParameter("ChargeAdvice", typeof(decimal));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_ChargeMaster_Result>("Sp_ChargeMaster", queryTypeParameter, cMIdParameter, utilityCodeParameter, enityIdParameter, bankIdParameter, txnTypeParameter, mandatePrintingChargesParameter, mandateChargeParameter, txnChargeParameter, mandateReturnChargesParameter, transactionReturnchargesParameter, courierChargesParameter, dispatchChargesParameter, chargeAdviceParameter, createdByParameter, updatedByParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> Sp_ClientDataUpload(string queryType, string xmlBankData, Nullable<long> maxId, string xmlClientData, Nullable<long> branchId, string status, Nullable<long> clientid, Nullable<long> uniqueNo, Nullable<long> isMerged, string xmlClientData1)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var xmlBankDataParameter = xmlBankData != null ?
                new ObjectParameter("XmlBankData", xmlBankData) :
                new ObjectParameter("XmlBankData", typeof(string));
    
            var maxIdParameter = maxId.HasValue ?
                new ObjectParameter("MaxId", maxId) :
                new ObjectParameter("MaxId", typeof(long));
    
            var xmlClientDataParameter = xmlClientData != null ?
                new ObjectParameter("XmlClientData", xmlClientData) :
                new ObjectParameter("XmlClientData", typeof(string));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(long));
    
            var statusParameter = status != null ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(string));
    
            var clientidParameter = clientid.HasValue ?
                new ObjectParameter("clientid", clientid) :
                new ObjectParameter("clientid", typeof(long));
    
            var uniqueNoParameter = uniqueNo.HasValue ?
                new ObjectParameter("uniqueNo", uniqueNo) :
                new ObjectParameter("uniqueNo", typeof(long));
    
            var isMergedParameter = isMerged.HasValue ?
                new ObjectParameter("isMerged", isMerged) :
                new ObjectParameter("isMerged", typeof(long));
    
            var xmlClientData1Parameter = xmlClientData1 != null ?
                new ObjectParameter("XmlClientData1", xmlClientData1) :
                new ObjectParameter("XmlClientData1", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("Sp_ClientDataUpload", queryTypeParameter, xmlBankDataParameter, maxIdParameter, xmlClientDataParameter, branchIdParameter, statusParameter, clientidParameter, uniqueNoParameter, isMergedParameter, xmlClientData1Parameter);
        }
    
        public virtual ObjectResult<Sp_CollectionStatus_Result> Sp_CollectionStatus(Nullable<int> entityId)
        {
            var entityIdParameter = entityId.HasValue ?
                new ObjectParameter("EntityId", entityId) :
                new ObjectParameter("EntityId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_CollectionStatus_Result>("Sp_CollectionStatus", entityIdParameter);
        }
    
        public virtual int Sp_CreateLAndTFile(string queryType, string bankName, string fileNo, Nullable<int> entityID, Nullable<int> userID, string appId, Nullable<long> transheaderId, Nullable<long> bank_ID, string xmlXlData, string xmlXlDetailData, Nullable<long> resheaderId)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var bankNameParameter = bankName != null ?
                new ObjectParameter("BankName", bankName) :
                new ObjectParameter("BankName", typeof(string));
    
            var fileNoParameter = fileNo != null ?
                new ObjectParameter("FileNo", fileNo) :
                new ObjectParameter("FileNo", typeof(string));
    
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var appIdParameter = appId != null ?
                new ObjectParameter("AppId", appId) :
                new ObjectParameter("AppId", typeof(string));
    
            var transheaderIdParameter = transheaderId.HasValue ?
                new ObjectParameter("TransheaderId", transheaderId) :
                new ObjectParameter("TransheaderId", typeof(long));
    
            var bank_IDParameter = bank_ID.HasValue ?
                new ObjectParameter("Bank_ID", bank_ID) :
                new ObjectParameter("Bank_ID", typeof(long));
    
            var xmlXlDataParameter = xmlXlData != null ?
                new ObjectParameter("XmlXlData", xmlXlData) :
                new ObjectParameter("XmlXlData", typeof(string));
    
            var xmlXlDetailDataParameter = xmlXlDetailData != null ?
                new ObjectParameter("XmlXlDetailData", xmlXlDetailData) :
                new ObjectParameter("XmlXlDetailData", typeof(string));
    
            var resheaderIdParameter = resheaderId.HasValue ?
                new ObjectParameter("ResheaderId", resheaderId) :
                new ObjectParameter("ResheaderId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_CreateLAndTFile", queryTypeParameter, bankNameParameter, fileNoParameter, entityIDParameter, userIDParameter, appIdParameter, transheaderIdParameter, bank_IDParameter, xmlXlDataParameter, xmlXlDetailDataParameter, resheaderIdParameter);
        }
    
        public virtual ObjectResult<Sp_CreatePresenmentFile_Result> Sp_CreatePresenmentFile(string queryType, string bankName, string fileNo, Nullable<int> entityID, Nullable<int> userID, string appId, Nullable<long> transheaderId, Nullable<long> bank_ID, string xmlXlData, string xmlXlDetailData, Nullable<long> resheaderId)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var bankNameParameter = bankName != null ?
                new ObjectParameter("BankName", bankName) :
                new ObjectParameter("BankName", typeof(string));
    
            var fileNoParameter = fileNo != null ?
                new ObjectParameter("FileNo", fileNo) :
                new ObjectParameter("FileNo", typeof(string));
    
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var appIdParameter = appId != null ?
                new ObjectParameter("AppId", appId) :
                new ObjectParameter("AppId", typeof(string));
    
            var transheaderIdParameter = transheaderId.HasValue ?
                new ObjectParameter("TransheaderId", transheaderId) :
                new ObjectParameter("TransheaderId", typeof(long));
    
            var bank_IDParameter = bank_ID.HasValue ?
                new ObjectParameter("Bank_ID", bank_ID) :
                new ObjectParameter("Bank_ID", typeof(long));
    
            var xmlXlDataParameter = xmlXlData != null ?
                new ObjectParameter("XmlXlData", xmlXlData) :
                new ObjectParameter("XmlXlData", typeof(string));
    
            var xmlXlDetailDataParameter = xmlXlDetailData != null ?
                new ObjectParameter("XmlXlDetailData", xmlXlDetailData) :
                new ObjectParameter("XmlXlDetailData", typeof(string));
    
            var resheaderIdParameter = resheaderId.HasValue ?
                new ObjectParameter("ResheaderId", resheaderId) :
                new ObjectParameter("ResheaderId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_CreatePresenmentFile_Result>("Sp_CreatePresenmentFile", queryTypeParameter, bankNameParameter, fileNoParameter, entityIDParameter, userIDParameter, appIdParameter, transheaderIdParameter, bank_IDParameter, xmlXlDataParameter, xmlXlDetailDataParameter, resheaderIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> Sp_CustomerCardDetail(string queryType, Nullable<long> clientid, string name, string fatherName, string address, string state, Nullable<long> pincode, Nullable<System.DateTime> dob, string cardtype, string cardno, string photo, string pan, string adhar, string passport, string pancardImage, string adharcardImage, string passportImage, Nullable<long> customerId, string gender)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var clientidParameter = clientid.HasValue ?
                new ObjectParameter("clientid", clientid) :
                new ObjectParameter("clientid", typeof(long));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var fatherNameParameter = fatherName != null ?
                new ObjectParameter("FatherName", fatherName) :
                new ObjectParameter("FatherName", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("state", state) :
                new ObjectParameter("state", typeof(string));
    
            var pincodeParameter = pincode.HasValue ?
                new ObjectParameter("pincode", pincode) :
                new ObjectParameter("pincode", typeof(long));
    
            var dobParameter = dob.HasValue ?
                new ObjectParameter("dob", dob) :
                new ObjectParameter("dob", typeof(System.DateTime));
    
            var cardtypeParameter = cardtype != null ?
                new ObjectParameter("cardtype", cardtype) :
                new ObjectParameter("cardtype", typeof(string));
    
            var cardnoParameter = cardno != null ?
                new ObjectParameter("cardno", cardno) :
                new ObjectParameter("cardno", typeof(string));
    
            var photoParameter = photo != null ?
                new ObjectParameter("photo", photo) :
                new ObjectParameter("photo", typeof(string));
    
            var panParameter = pan != null ?
                new ObjectParameter("pan", pan) :
                new ObjectParameter("pan", typeof(string));
    
            var adharParameter = adhar != null ?
                new ObjectParameter("Adhar", adhar) :
                new ObjectParameter("Adhar", typeof(string));
    
            var passportParameter = passport != null ?
                new ObjectParameter("passport", passport) :
                new ObjectParameter("passport", typeof(string));
    
            var pancardImageParameter = pancardImage != null ?
                new ObjectParameter("PancardImage", pancardImage) :
                new ObjectParameter("PancardImage", typeof(string));
    
            var adharcardImageParameter = adharcardImage != null ?
                new ObjectParameter("AdharcardImage", adharcardImage) :
                new ObjectParameter("AdharcardImage", typeof(string));
    
            var passportImageParameter = passportImage != null ?
                new ObjectParameter("PassportImage", passportImage) :
                new ObjectParameter("PassportImage", typeof(string));
    
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(long));
    
            var genderParameter = gender != null ?
                new ObjectParameter("gender", gender) :
                new ObjectParameter("gender", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("Sp_CustomerCardDetail", queryTypeParameter, clientidParameter, nameParameter, fatherNameParameter, addressParameter, stateParameter, pincodeParameter, dobParameter, cardtypeParameter, cardnoParameter, photoParameter, panParameter, adharParameter, passportParameter, pancardImageParameter, adharcardImageParameter, passportImageParameter, customerIdParameter, genderParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> Sp_CustomerDetail(string queryType, Nullable<long> customerId, string name, string fatherName, string address, string state, Nullable<long> pincode, Nullable<System.DateTime> dob, string cardtype, string cardno, string photo, string pan, string adhar, string passport, string pancardImage, string adharcardImage, string passportImage)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(long));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var fatherNameParameter = fatherName != null ?
                new ObjectParameter("FatherName", fatherName) :
                new ObjectParameter("FatherName", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("state", state) :
                new ObjectParameter("state", typeof(string));
    
            var pincodeParameter = pincode.HasValue ?
                new ObjectParameter("pincode", pincode) :
                new ObjectParameter("pincode", typeof(long));
    
            var dobParameter = dob.HasValue ?
                new ObjectParameter("dob", dob) :
                new ObjectParameter("dob", typeof(System.DateTime));
    
            var cardtypeParameter = cardtype != null ?
                new ObjectParameter("cardtype", cardtype) :
                new ObjectParameter("cardtype", typeof(string));
    
            var cardnoParameter = cardno != null ?
                new ObjectParameter("cardno", cardno) :
                new ObjectParameter("cardno", typeof(string));
    
            var photoParameter = photo != null ?
                new ObjectParameter("photo", photo) :
                new ObjectParameter("photo", typeof(string));
    
            var panParameter = pan != null ?
                new ObjectParameter("pan", pan) :
                new ObjectParameter("pan", typeof(string));
    
            var adharParameter = adhar != null ?
                new ObjectParameter("Adhar", adhar) :
                new ObjectParameter("Adhar", typeof(string));
    
            var passportParameter = passport != null ?
                new ObjectParameter("passport", passport) :
                new ObjectParameter("passport", typeof(string));
    
            var pancardImageParameter = pancardImage != null ?
                new ObjectParameter("PancardImage", pancardImage) :
                new ObjectParameter("PancardImage", typeof(string));
    
            var adharcardImageParameter = adharcardImage != null ?
                new ObjectParameter("AdharcardImage", adharcardImage) :
                new ObjectParameter("AdharcardImage", typeof(string));
    
            var passportImageParameter = passportImage != null ?
                new ObjectParameter("PassportImage", passportImage) :
                new ObjectParameter("PassportImage", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("Sp_CustomerDetail", queryTypeParameter, customerIdParameter, nameParameter, fatherNameParameter, addressParameter, stateParameter, pincodeParameter, dobParameter, cardtypeParameter, cardnoParameter, photoParameter, panParameter, adharParameter, passportParameter, pancardImageParameter, adharcardImageParameter, passportImageParameter);
        }
    
        public virtual ObjectResult<Sp_Dashboard_Result> Sp_Dashboard(string queryType, Nullable<long> userId, Nullable<long> legalId, Nullable<long> proDimensionId, Nullable<long> projectId, string code, string name, Nullable<long> proGroupId, string userType, Nullable<long> refId, Nullable<long> branchId, Nullable<System.DateTime> weekDate, string strFromDate, string strToDate, Nullable<long> entityId, Nullable<System.DateTime> date, Nullable<int> month, string bankID, string accountValDB_DashBoard, Nullable<int> year, Nullable<bool> isAmount)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var legalIdParameter = legalId.HasValue ?
                new ObjectParameter("LegalId", legalId) :
                new ObjectParameter("LegalId", typeof(long));
    
            var proDimensionIdParameter = proDimensionId.HasValue ?
                new ObjectParameter("ProDimensionId", proDimensionId) :
                new ObjectParameter("ProDimensionId", typeof(long));
    
            var projectIdParameter = projectId.HasValue ?
                new ObjectParameter("ProjectId", projectId) :
                new ObjectParameter("ProjectId", typeof(long));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var proGroupIdParameter = proGroupId.HasValue ?
                new ObjectParameter("ProGroupId", proGroupId) :
                new ObjectParameter("ProGroupId", typeof(long));
    
            var userTypeParameter = userType != null ?
                new ObjectParameter("UserType", userType) :
                new ObjectParameter("UserType", typeof(string));
    
            var refIdParameter = refId.HasValue ?
                new ObjectParameter("RefId", refId) :
                new ObjectParameter("RefId", typeof(long));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(long));
    
            var weekDateParameter = weekDate.HasValue ?
                new ObjectParameter("WeekDate", weekDate) :
                new ObjectParameter("WeekDate", typeof(System.DateTime));
    
            var strFromDateParameter = strFromDate != null ?
                new ObjectParameter("strFromDate", strFromDate) :
                new ObjectParameter("strFromDate", typeof(string));
    
            var strToDateParameter = strToDate != null ?
                new ObjectParameter("strToDate", strToDate) :
                new ObjectParameter("strToDate", typeof(string));
    
            var entityIdParameter = entityId.HasValue ?
                new ObjectParameter("EntityId", entityId) :
                new ObjectParameter("EntityId", typeof(long));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var monthParameter = month.HasValue ?
                new ObjectParameter("Month", month) :
                new ObjectParameter("Month", typeof(int));
    
            var bankIDParameter = bankID != null ?
                new ObjectParameter("BankID", bankID) :
                new ObjectParameter("BankID", typeof(string));
    
            var accountValDB_DashBoardParameter = accountValDB_DashBoard != null ?
                new ObjectParameter("AccountValDB_DashBoard", accountValDB_DashBoard) :
                new ObjectParameter("AccountValDB_DashBoard", typeof(string));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            var isAmountParameter = isAmount.HasValue ?
                new ObjectParameter("IsAmount", isAmount) :
                new ObjectParameter("IsAmount", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_Dashboard_Result>("Sp_Dashboard", queryTypeParameter, userIdParameter, legalIdParameter, proDimensionIdParameter, projectIdParameter, codeParameter, nameParameter, proGroupIdParameter, userTypeParameter, refIdParameter, branchIdParameter, weekDateParameter, strFromDateParameter, strToDateParameter, entityIdParameter, dateParameter, monthParameter, bankIDParameter, accountValDB_DashBoardParameter, yearParameter, isAmountParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> Sp_Detail(Nullable<long> clientid, Nullable<long> bankid, string queryType, Nullable<long> userId, string accountNo, string benificiaryName, string sponserBankCode, string utilityCode, string createdStatus, string companyName, string debitTo, Nullable<decimal> amount, string frequency, string debitType, string reference1, string reference2, string phoneNo, string emailId, Nullable<System.DateTime> periodFrom, Nullable<System.DateTime> periodTo, string isMerged, string refId, string iFSCcode, string mICRcode, string transactionStatus, string bankName, Nullable<long> branchId, string refEmailId, Nullable<long> mergeDataId, string uniqueNo, string status, string emailtype, string xmlToEmail, string xmlCcEmail, string xmlBCcEmail, Nullable<long> mergeid, Nullable<long> clientDataId, Nullable<long> unit, Nullable<long> bankIMPSID)
        {
            var clientidParameter = clientid.HasValue ?
                new ObjectParameter("clientid", clientid) :
                new ObjectParameter("clientid", typeof(long));
    
            var bankidParameter = bankid.HasValue ?
                new ObjectParameter("bankid", bankid) :
                new ObjectParameter("bankid", typeof(long));
    
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var accountNoParameter = accountNo != null ?
                new ObjectParameter("accountNo", accountNo) :
                new ObjectParameter("accountNo", typeof(string));
    
            var benificiaryNameParameter = benificiaryName != null ?
                new ObjectParameter("benificiaryName", benificiaryName) :
                new ObjectParameter("benificiaryName", typeof(string));
    
            var sponserBankCodeParameter = sponserBankCode != null ?
                new ObjectParameter("sponserBankCode", sponserBankCode) :
                new ObjectParameter("sponserBankCode", typeof(string));
    
            var utilityCodeParameter = utilityCode != null ?
                new ObjectParameter("utilityCode", utilityCode) :
                new ObjectParameter("utilityCode", typeof(string));
    
            var createdStatusParameter = createdStatus != null ?
                new ObjectParameter("createdStatus", createdStatus) :
                new ObjectParameter("createdStatus", typeof(string));
    
            var companyNameParameter = companyName != null ?
                new ObjectParameter("companyName", companyName) :
                new ObjectParameter("companyName", typeof(string));
    
            var debitToParameter = debitTo != null ?
                new ObjectParameter("debitTo", debitTo) :
                new ObjectParameter("debitTo", typeof(string));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("amount", amount) :
                new ObjectParameter("amount", typeof(decimal));
    
            var frequencyParameter = frequency != null ?
                new ObjectParameter("frequency", frequency) :
                new ObjectParameter("frequency", typeof(string));
    
            var debitTypeParameter = debitType != null ?
                new ObjectParameter("debitType", debitType) :
                new ObjectParameter("debitType", typeof(string));
    
            var reference1Parameter = reference1 != null ?
                new ObjectParameter("reference1", reference1) :
                new ObjectParameter("reference1", typeof(string));
    
            var reference2Parameter = reference2 != null ?
                new ObjectParameter("reference2", reference2) :
                new ObjectParameter("reference2", typeof(string));
    
            var phoneNoParameter = phoneNo != null ?
                new ObjectParameter("phoneNo", phoneNo) :
                new ObjectParameter("phoneNo", typeof(string));
    
            var emailIdParameter = emailId != null ?
                new ObjectParameter("emailId", emailId) :
                new ObjectParameter("emailId", typeof(string));
    
            var periodFromParameter = periodFrom.HasValue ?
                new ObjectParameter("periodFrom", periodFrom) :
                new ObjectParameter("periodFrom", typeof(System.DateTime));
    
            var periodToParameter = periodTo.HasValue ?
                new ObjectParameter("periodTo", periodTo) :
                new ObjectParameter("periodTo", typeof(System.DateTime));
    
            var isMergedParameter = isMerged != null ?
                new ObjectParameter("isMerged", isMerged) :
                new ObjectParameter("isMerged", typeof(string));
    
            var refIdParameter = refId != null ?
                new ObjectParameter("RefId", refId) :
                new ObjectParameter("RefId", typeof(string));
    
            var iFSCcodeParameter = iFSCcode != null ?
                new ObjectParameter("IFSCcode", iFSCcode) :
                new ObjectParameter("IFSCcode", typeof(string));
    
            var mICRcodeParameter = mICRcode != null ?
                new ObjectParameter("MICRcode", mICRcode) :
                new ObjectParameter("MICRcode", typeof(string));
    
            var transactionStatusParameter = transactionStatus != null ?
                new ObjectParameter("TransactionStatus", transactionStatus) :
                new ObjectParameter("TransactionStatus", typeof(string));
    
            var bankNameParameter = bankName != null ?
                new ObjectParameter("bankName", bankName) :
                new ObjectParameter("bankName", typeof(string));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(long));
    
            var refEmailIdParameter = refEmailId != null ?
                new ObjectParameter("RefEmailId", refEmailId) :
                new ObjectParameter("RefEmailId", typeof(string));
    
            var mergeDataIdParameter = mergeDataId.HasValue ?
                new ObjectParameter("MergeDataId", mergeDataId) :
                new ObjectParameter("MergeDataId", typeof(long));
    
            var uniqueNoParameter = uniqueNo != null ?
                new ObjectParameter("uniqueNo", uniqueNo) :
                new ObjectParameter("uniqueNo", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(string));
    
            var emailtypeParameter = emailtype != null ?
                new ObjectParameter("emailtype", emailtype) :
                new ObjectParameter("emailtype", typeof(string));
    
            var xmlToEmailParameter = xmlToEmail != null ?
                new ObjectParameter("XmlToEmail", xmlToEmail) :
                new ObjectParameter("XmlToEmail", typeof(string));
    
            var xmlCcEmailParameter = xmlCcEmail != null ?
                new ObjectParameter("XmlCcEmail", xmlCcEmail) :
                new ObjectParameter("XmlCcEmail", typeof(string));
    
            var xmlBCcEmailParameter = xmlBCcEmail != null ?
                new ObjectParameter("XmlBCcEmail", xmlBCcEmail) :
                new ObjectParameter("XmlBCcEmail", typeof(string));
    
            var mergeidParameter = mergeid.HasValue ?
                new ObjectParameter("mergeid", mergeid) :
                new ObjectParameter("mergeid", typeof(long));
    
            var clientDataIdParameter = clientDataId.HasValue ?
                new ObjectParameter("ClientDataId", clientDataId) :
                new ObjectParameter("ClientDataId", typeof(long));
    
            var unitParameter = unit.HasValue ?
                new ObjectParameter("unit", unit) :
                new ObjectParameter("unit", typeof(long));
    
            var bankIMPSIDParameter = bankIMPSID.HasValue ?
                new ObjectParameter("BankIMPSID", bankIMPSID) :
                new ObjectParameter("BankIMPSID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("Sp_Detail", clientidParameter, bankidParameter, queryTypeParameter, userIdParameter, accountNoParameter, benificiaryNameParameter, sponserBankCodeParameter, utilityCodeParameter, createdStatusParameter, companyNameParameter, debitToParameter, amountParameter, frequencyParameter, debitTypeParameter, reference1Parameter, reference2Parameter, phoneNoParameter, emailIdParameter, periodFromParameter, periodToParameter, isMergedParameter, refIdParameter, iFSCcodeParameter, mICRcodeParameter, transactionStatusParameter, bankNameParameter, branchIdParameter, refEmailIdParameter, mergeDataIdParameter, uniqueNoParameter, statusParameter, emailtypeParameter, xmlToEmailParameter, xmlCcEmailParameter, xmlBCcEmailParameter, mergeidParameter, clientDataIdParameter, unitParameter, bankIMPSIDParameter);
        }
    
        public virtual ObjectResult<Sp_DownloadMandate_Result> Sp_DownloadMandate(string queryType, Nullable<long> userId, string strFromDate, string strToDate, Nullable<long> entityId, string sponsorBankCode, string refrence1, string activityId, string isEntity)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var strFromDateParameter = strFromDate != null ?
                new ObjectParameter("strFromDate", strFromDate) :
                new ObjectParameter("strFromDate", typeof(string));
    
            var strToDateParameter = strToDate != null ?
                new ObjectParameter("strToDate", strToDate) :
                new ObjectParameter("strToDate", typeof(string));
    
            var entityIdParameter = entityId.HasValue ?
                new ObjectParameter("EntityId", entityId) :
                new ObjectParameter("EntityId", typeof(long));
    
            var sponsorBankCodeParameter = sponsorBankCode != null ?
                new ObjectParameter("SponsorBankCode", sponsorBankCode) :
                new ObjectParameter("SponsorBankCode", typeof(string));
    
            var refrence1Parameter = refrence1 != null ?
                new ObjectParameter("Refrence1", refrence1) :
                new ObjectParameter("Refrence1", typeof(string));
    
            var activityIdParameter = activityId != null ?
                new ObjectParameter("ActivityId", activityId) :
                new ObjectParameter("ActivityId", typeof(string));
    
            var isEntityParameter = isEntity != null ?
                new ObjectParameter("IsEntity", isEntity) :
                new ObjectParameter("IsEntity", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_DownloadMandate_Result>("Sp_DownloadMandate", queryTypeParameter, userIdParameter, strFromDateParameter, strToDateParameter, entityIdParameter, sponsorBankCodeParameter, refrence1Parameter, activityIdParameter, isEntityParameter);
        }
    
        public virtual ObjectResult<Nullable<bool>> Sp_EMandate(string queryType, Nullable<long> entityId, Nullable<long> userId, string refrence1, string strFromDate, string strToDate, string xmlPath, Nullable<long> mandateId, string error, string enachMessageId, string messageid, string creationdatetime, string accptRefNo, string status, string errorDesc, string strTable, string bankName, string sponsorBankCode)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var entityIdParameter = entityId.HasValue ?
                new ObjectParameter("EntityId", entityId) :
                new ObjectParameter("EntityId", typeof(long));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var refrence1Parameter = refrence1 != null ?
                new ObjectParameter("Refrence1", refrence1) :
                new ObjectParameter("Refrence1", typeof(string));
    
            var strFromDateParameter = strFromDate != null ?
                new ObjectParameter("strFromDate", strFromDate) :
                new ObjectParameter("strFromDate", typeof(string));
    
            var strToDateParameter = strToDate != null ?
                new ObjectParameter("strToDate", strToDate) :
                new ObjectParameter("strToDate", typeof(string));
    
            var xmlPathParameter = xmlPath != null ?
                new ObjectParameter("XmlPath", xmlPath) :
                new ObjectParameter("XmlPath", typeof(string));
    
            var mandateIdParameter = mandateId.HasValue ?
                new ObjectParameter("MandateId", mandateId) :
                new ObjectParameter("MandateId", typeof(long));
    
            var errorParameter = error != null ?
                new ObjectParameter("Error", error) :
                new ObjectParameter("Error", typeof(string));
    
            var enachMessageIdParameter = enachMessageId != null ?
                new ObjectParameter("EnachMessageId", enachMessageId) :
                new ObjectParameter("EnachMessageId", typeof(string));
    
            var messageidParameter = messageid != null ?
                new ObjectParameter("messageid", messageid) :
                new ObjectParameter("messageid", typeof(string));
    
            var creationdatetimeParameter = creationdatetime != null ?
                new ObjectParameter("Creationdatetime", creationdatetime) :
                new ObjectParameter("Creationdatetime", typeof(string));
    
            var accptRefNoParameter = accptRefNo != null ?
                new ObjectParameter("AccptRefNo", accptRefNo) :
                new ObjectParameter("AccptRefNo", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var errorDescParameter = errorDesc != null ?
                new ObjectParameter("ErrorDesc", errorDesc) :
                new ObjectParameter("ErrorDesc", typeof(string));
    
            var strTableParameter = strTable != null ?
                new ObjectParameter("strTable", strTable) :
                new ObjectParameter("strTable", typeof(string));
    
            var bankNameParameter = bankName != null ?
                new ObjectParameter("BankName", bankName) :
                new ObjectParameter("BankName", typeof(string));
    
            var sponsorBankCodeParameter = sponsorBankCode != null ?
                new ObjectParameter("SponsorBankCode", sponsorBankCode) :
                new ObjectParameter("SponsorBankCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<bool>>("Sp_EMandate", queryTypeParameter, entityIdParameter, userIdParameter, refrence1Parameter, strFromDateParameter, strToDateParameter, xmlPathParameter, mandateIdParameter, errorParameter, enachMessageIdParameter, messageidParameter, creationdatetimeParameter, accptRefNoParameter, statusParameter, errorDescParameter, strTableParameter, bankNameParameter, sponsorBankCodeParameter);
        }
    
        public virtual ObjectResult<sp_ENach_Result> sp_ENach(string queryType, Nullable<long> mandateId, string adharNo, string mobileNo, string enachEmail, Nullable<long> id, string eMandatetype, Nullable<bool> isPhysical, Nullable<bool> enach, string emailId)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var mandateIdParameter = mandateId.HasValue ?
                new ObjectParameter("MandateId", mandateId) :
                new ObjectParameter("MandateId", typeof(long));
    
            var adharNoParameter = adharNo != null ?
                new ObjectParameter("AdharNo", adharNo) :
                new ObjectParameter("AdharNo", typeof(string));
    
            var mobileNoParameter = mobileNo != null ?
                new ObjectParameter("MobileNo", mobileNo) :
                new ObjectParameter("MobileNo", typeof(string));
    
            var enachEmailParameter = enachEmail != null ?
                new ObjectParameter("EnachEmail", enachEmail) :
                new ObjectParameter("EnachEmail", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var eMandatetypeParameter = eMandatetype != null ?
                new ObjectParameter("EMandatetype", eMandatetype) :
                new ObjectParameter("EMandatetype", typeof(string));
    
            var isPhysicalParameter = isPhysical.HasValue ?
                new ObjectParameter("IsPhysical", isPhysical) :
                new ObjectParameter("IsPhysical", typeof(bool));
    
            var enachParameter = enach.HasValue ?
                new ObjectParameter("Enach", enach) :
                new ObjectParameter("Enach", typeof(bool));
    
            var emailIdParameter = emailId != null ?
                new ObjectParameter("EmailId", emailId) :
                new ObjectParameter("EmailId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ENach_Result>("sp_ENach", queryTypeParameter, mandateIdParameter, adharNoParameter, mobileNoParameter, enachEmailParameter, idParameter, eMandatetypeParameter, isPhysicalParameter, enachParameter, emailIdParameter);
        }
    
        public virtual ObjectResult<Sp_Entity_Result> Sp_Entity(string queryType, Nullable<long> stateId, Nullable<long> countryId, string name, string contactPerson, string sponsorBankCode, string utilityCode, string sponsorBankName, Nullable<long> entityId, string addr1, string email, Nullable<long> cityId, string mobile, string pincode, string fax, string imagePath, Nullable<long> userId, string userName, string password, string passwordKey, string code, string xmlEntity, string type, string debitType, string frequencyType, string toDebit, string xmlUtilityCode, string xmlSponsorBankCode, string dtBilligMail, string instructingMemberId, string amount, string xmlPaymentMode, string activate, Nullable<long> entityBusinessCode, Nullable<bool> isOverMandate, Nullable<bool> isRefrenceCheck, Nullable<bool> isValidationCountEnable, Nullable<long> bankValidationAdminCount, Nullable<long> bankValidationUserCount, Nullable<long> acValidationAdminCount, Nullable<long> acValidationUserCount, Nullable<bool> isRefNumerc, Nullable<bool> isSendEmailCustomer, Nullable<bool> isShowMandateMode, Nullable<bool> ischkEmandate, Nullable<bool> ischkPhysical, string xmldebittype, string xmlToDebit, string xmlType, string xmlfrequency, Nullable<bool> chkIsRefrence2Mandatory, string dtBankAmount, Nullable<bool> isThirdTransaction, Nullable<bool> chkIsZipSure, Nullable<bool> chkIsAllowEManadte, Nullable<bool> iSTodateMandatoryEnach, string xmlFileName, string accountNumber, Nullable<long> aPPId, string presentmentSeqNumber, Nullable<bool> reCheck, Nullable<bool> checkerRequire, string xmlModeType, Nullable<bool> chkIsaccountvalidation, Nullable<bool> chkIsmobileapp, Nullable<long> corporateId, string xmlDimension, string activityId, string emailId, string xmlCategoryCode, string pAN, string tAN, string gSTIN, Nullable<bool> isNachPresentment, string billingAddress, string chargeDebitAcNo, string bankCorporateId, string branchCode, string iFSC, Nullable<long> regionalManagerId, Nullable<long> pSM, string billingContactPerson, string designation, string contactNo, string faxNo, string arrangementInDays, string pickUpLocationAddress, string pickUpContactPerson, string communicationMailPrimary, string ip, string url, string h2hUsername, string h2hpassword, Nullable<long> referencelength, string referenceRdoValue, string branchName, Nullable<long> settlementTypeId, Nullable<long> businessSegmentId, string dtcontactperson, string xmlFileNameImgDOC)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var stateIdParameter = stateId.HasValue ?
                new ObjectParameter("StateId", stateId) :
                new ObjectParameter("StateId", typeof(long));
    
            var countryIdParameter = countryId.HasValue ?
                new ObjectParameter("CountryId", countryId) :
                new ObjectParameter("CountryId", typeof(long));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var contactPersonParameter = contactPerson != null ?
                new ObjectParameter("ContactPerson", contactPerson) :
                new ObjectParameter("ContactPerson", typeof(string));
    
            var sponsorBankCodeParameter = sponsorBankCode != null ?
                new ObjectParameter("SponsorBankCode", sponsorBankCode) :
                new ObjectParameter("SponsorBankCode", typeof(string));
    
            var utilityCodeParameter = utilityCode != null ?
                new ObjectParameter("UtilityCode", utilityCode) :
                new ObjectParameter("UtilityCode", typeof(string));
    
            var sponsorBankNameParameter = sponsorBankName != null ?
                new ObjectParameter("SponsorBankName", sponsorBankName) :
                new ObjectParameter("SponsorBankName", typeof(string));
    
            var entityIdParameter = entityId.HasValue ?
                new ObjectParameter("EntityId", entityId) :
                new ObjectParameter("EntityId", typeof(long));
    
            var addr1Parameter = addr1 != null ?
                new ObjectParameter("Addr1", addr1) :
                new ObjectParameter("Addr1", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var cityIdParameter = cityId.HasValue ?
                new ObjectParameter("CityId", cityId) :
                new ObjectParameter("CityId", typeof(long));
    
            var mobileParameter = mobile != null ?
                new ObjectParameter("Mobile", mobile) :
                new ObjectParameter("Mobile", typeof(string));
    
            var pincodeParameter = pincode != null ?
                new ObjectParameter("Pincode", pincode) :
                new ObjectParameter("Pincode", typeof(string));
    
            var faxParameter = fax != null ?
                new ObjectParameter("Fax", fax) :
                new ObjectParameter("Fax", typeof(string));
    
            var imagePathParameter = imagePath != null ?
                new ObjectParameter("ImagePath", imagePath) :
                new ObjectParameter("ImagePath", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            var passwordKeyParameter = passwordKey != null ?
                new ObjectParameter("passwordKey", passwordKey) :
                new ObjectParameter("passwordKey", typeof(string));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var xmlEntityParameter = xmlEntity != null ?
                new ObjectParameter("XmlEntity", xmlEntity) :
                new ObjectParameter("XmlEntity", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var debitTypeParameter = debitType != null ?
                new ObjectParameter("DebitType", debitType) :
                new ObjectParameter("DebitType", typeof(string));
    
            var frequencyTypeParameter = frequencyType != null ?
                new ObjectParameter("FrequencyType", frequencyType) :
                new ObjectParameter("FrequencyType", typeof(string));
    
            var toDebitParameter = toDebit != null ?
                new ObjectParameter("ToDebit", toDebit) :
                new ObjectParameter("ToDebit", typeof(string));
    
            var xmlUtilityCodeParameter = xmlUtilityCode != null ?
                new ObjectParameter("XmlUtilityCode", xmlUtilityCode) :
                new ObjectParameter("XmlUtilityCode", typeof(string));
    
            var xmlSponsorBankCodeParameter = xmlSponsorBankCode != null ?
                new ObjectParameter("XmlSponsorBankCode", xmlSponsorBankCode) :
                new ObjectParameter("XmlSponsorBankCode", typeof(string));
    
            var dtBilligMailParameter = dtBilligMail != null ?
                new ObjectParameter("dtBilligMail", dtBilligMail) :
                new ObjectParameter("dtBilligMail", typeof(string));
    
            var instructingMemberIdParameter = instructingMemberId != null ?
                new ObjectParameter("InstructingMemberId", instructingMemberId) :
                new ObjectParameter("InstructingMemberId", typeof(string));
    
            var amountParameter = amount != null ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(string));
    
            var xmlPaymentModeParameter = xmlPaymentMode != null ?
                new ObjectParameter("XmlPaymentMode", xmlPaymentMode) :
                new ObjectParameter("XmlPaymentMode", typeof(string));
    
            var activateParameter = activate != null ?
                new ObjectParameter("Activate", activate) :
                new ObjectParameter("Activate", typeof(string));
    
            var entityBusinessCodeParameter = entityBusinessCode.HasValue ?
                new ObjectParameter("EntityBusinessCode", entityBusinessCode) :
                new ObjectParameter("EntityBusinessCode", typeof(long));
    
            var isOverMandateParameter = isOverMandate.HasValue ?
                new ObjectParameter("IsOverMandate", isOverMandate) :
                new ObjectParameter("IsOverMandate", typeof(bool));
    
            var isRefrenceCheckParameter = isRefrenceCheck.HasValue ?
                new ObjectParameter("IsRefrenceCheck", isRefrenceCheck) :
                new ObjectParameter("IsRefrenceCheck", typeof(bool));
    
            var isValidationCountEnableParameter = isValidationCountEnable.HasValue ?
                new ObjectParameter("IsValidationCountEnable", isValidationCountEnable) :
                new ObjectParameter("IsValidationCountEnable", typeof(bool));
    
            var bankValidationAdminCountParameter = bankValidationAdminCount.HasValue ?
                new ObjectParameter("BankValidationAdminCount", bankValidationAdminCount) :
                new ObjectParameter("BankValidationAdminCount", typeof(long));
    
            var bankValidationUserCountParameter = bankValidationUserCount.HasValue ?
                new ObjectParameter("BankValidationUserCount", bankValidationUserCount) :
                new ObjectParameter("BankValidationUserCount", typeof(long));
    
            var acValidationAdminCountParameter = acValidationAdminCount.HasValue ?
                new ObjectParameter("AcValidationAdminCount", acValidationAdminCount) :
                new ObjectParameter("AcValidationAdminCount", typeof(long));
    
            var acValidationUserCountParameter = acValidationUserCount.HasValue ?
                new ObjectParameter("AcValidationUserCount", acValidationUserCount) :
                new ObjectParameter("AcValidationUserCount", typeof(long));
    
            var isRefNumercParameter = isRefNumerc.HasValue ?
                new ObjectParameter("IsRefNumerc", isRefNumerc) :
                new ObjectParameter("IsRefNumerc", typeof(bool));
    
            var isSendEmailCustomerParameter = isSendEmailCustomer.HasValue ?
                new ObjectParameter("IsSendEmailCustomer", isSendEmailCustomer) :
                new ObjectParameter("IsSendEmailCustomer", typeof(bool));
    
            var isShowMandateModeParameter = isShowMandateMode.HasValue ?
                new ObjectParameter("IsShowMandateMode", isShowMandateMode) :
                new ObjectParameter("IsShowMandateMode", typeof(bool));
    
            var ischkEmandateParameter = ischkEmandate.HasValue ?
                new ObjectParameter("IschkEmandate", ischkEmandate) :
                new ObjectParameter("IschkEmandate", typeof(bool));
    
            var ischkPhysicalParameter = ischkPhysical.HasValue ?
                new ObjectParameter("IschkPhysical", ischkPhysical) :
                new ObjectParameter("IschkPhysical", typeof(bool));
    
            var xmldebittypeParameter = xmldebittype != null ?
                new ObjectParameter("Xmldebittype", xmldebittype) :
                new ObjectParameter("Xmldebittype", typeof(string));
    
            var xmlToDebitParameter = xmlToDebit != null ?
                new ObjectParameter("XmlToDebit", xmlToDebit) :
                new ObjectParameter("XmlToDebit", typeof(string));
    
            var xmlTypeParameter = xmlType != null ?
                new ObjectParameter("XmlType", xmlType) :
                new ObjectParameter("XmlType", typeof(string));
    
            var xmlfrequencyParameter = xmlfrequency != null ?
                new ObjectParameter("Xmlfrequency", xmlfrequency) :
                new ObjectParameter("Xmlfrequency", typeof(string));
    
            var chkIsRefrence2MandatoryParameter = chkIsRefrence2Mandatory.HasValue ?
                new ObjectParameter("chkIsRefrence2Mandatory", chkIsRefrence2Mandatory) :
                new ObjectParameter("chkIsRefrence2Mandatory", typeof(bool));
    
            var dtBankAmountParameter = dtBankAmount != null ?
                new ObjectParameter("dtBankAmount", dtBankAmount) :
                new ObjectParameter("dtBankAmount", typeof(string));
    
            var isThirdTransactionParameter = isThirdTransaction.HasValue ?
                new ObjectParameter("IsThirdTransaction", isThirdTransaction) :
                new ObjectParameter("IsThirdTransaction", typeof(bool));
    
            var chkIsZipSureParameter = chkIsZipSure.HasValue ?
                new ObjectParameter("chkIsZipSure", chkIsZipSure) :
                new ObjectParameter("chkIsZipSure", typeof(bool));
    
            var chkIsAllowEManadteParameter = chkIsAllowEManadte.HasValue ?
                new ObjectParameter("chkIsAllowEManadte", chkIsAllowEManadte) :
                new ObjectParameter("chkIsAllowEManadte", typeof(bool));
    
            var iSTodateMandatoryEnachParameter = iSTodateMandatoryEnach.HasValue ?
                new ObjectParameter("ISTodateMandatoryEnach", iSTodateMandatoryEnach) :
                new ObjectParameter("ISTodateMandatoryEnach", typeof(bool));
    
            var xmlFileNameParameter = xmlFileName != null ?
                new ObjectParameter("XmlFileName", xmlFileName) :
                new ObjectParameter("XmlFileName", typeof(string));
    
            var accountNumberParameter = accountNumber != null ?
                new ObjectParameter("AccountNumber", accountNumber) :
                new ObjectParameter("AccountNumber", typeof(string));
    
            var aPPIdParameter = aPPId.HasValue ?
                new ObjectParameter("APPId", aPPId) :
                new ObjectParameter("APPId", typeof(long));
    
            var presentmentSeqNumberParameter = presentmentSeqNumber != null ?
                new ObjectParameter("PresentmentSeqNumber", presentmentSeqNumber) :
                new ObjectParameter("PresentmentSeqNumber", typeof(string));
    
            var reCheckParameter = reCheck.HasValue ?
                new ObjectParameter("ReCheck", reCheck) :
                new ObjectParameter("ReCheck", typeof(bool));
    
            var checkerRequireParameter = checkerRequire.HasValue ?
                new ObjectParameter("CheckerRequire", checkerRequire) :
                new ObjectParameter("CheckerRequire", typeof(bool));
    
            var xmlModeTypeParameter = xmlModeType != null ?
                new ObjectParameter("XmlModeType", xmlModeType) :
                new ObjectParameter("XmlModeType", typeof(string));
    
            var chkIsaccountvalidationParameter = chkIsaccountvalidation.HasValue ?
                new ObjectParameter("chkIsaccountvalidation", chkIsaccountvalidation) :
                new ObjectParameter("chkIsaccountvalidation", typeof(bool));
    
            var chkIsmobileappParameter = chkIsmobileapp.HasValue ?
                new ObjectParameter("chkIsmobileapp", chkIsmobileapp) :
                new ObjectParameter("chkIsmobileapp", typeof(bool));
    
            var corporateIdParameter = corporateId.HasValue ?
                new ObjectParameter("CorporateId", corporateId) :
                new ObjectParameter("CorporateId", typeof(long));
    
            var xmlDimensionParameter = xmlDimension != null ?
                new ObjectParameter("XmlDimension", xmlDimension) :
                new ObjectParameter("XmlDimension", typeof(string));
    
            var activityIdParameter = activityId != null ?
                new ObjectParameter("ActivityId", activityId) :
                new ObjectParameter("ActivityId", typeof(string));
    
            var emailIdParameter = emailId != null ?
                new ObjectParameter("EmailId", emailId) :
                new ObjectParameter("EmailId", typeof(string));
    
            var xmlCategoryCodeParameter = xmlCategoryCode != null ?
                new ObjectParameter("XmlCategoryCode", xmlCategoryCode) :
                new ObjectParameter("XmlCategoryCode", typeof(string));
    
            var pANParameter = pAN != null ?
                new ObjectParameter("PAN", pAN) :
                new ObjectParameter("PAN", typeof(string));
    
            var tANParameter = tAN != null ?
                new ObjectParameter("TAN", tAN) :
                new ObjectParameter("TAN", typeof(string));
    
            var gSTINParameter = gSTIN != null ?
                new ObjectParameter("GSTIN", gSTIN) :
                new ObjectParameter("GSTIN", typeof(string));
    
            var isNachPresentmentParameter = isNachPresentment.HasValue ?
                new ObjectParameter("IsNachPresentment", isNachPresentment) :
                new ObjectParameter("IsNachPresentment", typeof(bool));
    
            var billingAddressParameter = billingAddress != null ?
                new ObjectParameter("BillingAddress", billingAddress) :
                new ObjectParameter("BillingAddress", typeof(string));
    
            var chargeDebitAcNoParameter = chargeDebitAcNo != null ?
                new ObjectParameter("ChargeDebitAcNo", chargeDebitAcNo) :
                new ObjectParameter("ChargeDebitAcNo", typeof(string));
    
            var bankCorporateIdParameter = bankCorporateId != null ?
                new ObjectParameter("BankCorporateId", bankCorporateId) :
                new ObjectParameter("BankCorporateId", typeof(string));
    
            var branchCodeParameter = branchCode != null ?
                new ObjectParameter("BranchCode", branchCode) :
                new ObjectParameter("BranchCode", typeof(string));
    
            var iFSCParameter = iFSC != null ?
                new ObjectParameter("IFSC", iFSC) :
                new ObjectParameter("IFSC", typeof(string));
    
            var regionalManagerIdParameter = regionalManagerId.HasValue ?
                new ObjectParameter("RegionalManagerId", regionalManagerId) :
                new ObjectParameter("RegionalManagerId", typeof(long));
    
            var pSMParameter = pSM.HasValue ?
                new ObjectParameter("PSM", pSM) :
                new ObjectParameter("PSM", typeof(long));
    
            var billingContactPersonParameter = billingContactPerson != null ?
                new ObjectParameter("BillingContactPerson", billingContactPerson) :
                new ObjectParameter("BillingContactPerson", typeof(string));
    
            var designationParameter = designation != null ?
                new ObjectParameter("Designation", designation) :
                new ObjectParameter("Designation", typeof(string));
    
            var contactNoParameter = contactNo != null ?
                new ObjectParameter("ContactNo", contactNo) :
                new ObjectParameter("ContactNo", typeof(string));
    
            var faxNoParameter = faxNo != null ?
                new ObjectParameter("FaxNo", faxNo) :
                new ObjectParameter("FaxNo", typeof(string));
    
            var arrangementInDaysParameter = arrangementInDays != null ?
                new ObjectParameter("ArrangementInDays", arrangementInDays) :
                new ObjectParameter("ArrangementInDays", typeof(string));
    
            var pickUpLocationAddressParameter = pickUpLocationAddress != null ?
                new ObjectParameter("PickUpLocationAddress", pickUpLocationAddress) :
                new ObjectParameter("PickUpLocationAddress", typeof(string));
    
            var pickUpContactPersonParameter = pickUpContactPerson != null ?
                new ObjectParameter("PickUpContactPerson", pickUpContactPerson) :
                new ObjectParameter("PickUpContactPerson", typeof(string));
    
            var communicationMailPrimaryParameter = communicationMailPrimary != null ?
                new ObjectParameter("CommunicationMailPrimary", communicationMailPrimary) :
                new ObjectParameter("CommunicationMailPrimary", typeof(string));
    
            var ipParameter = ip != null ?
                new ObjectParameter("Ip", ip) :
                new ObjectParameter("Ip", typeof(string));
    
            var urlParameter = url != null ?
                new ObjectParameter("Url", url) :
                new ObjectParameter("Url", typeof(string));
    
            var h2hUsernameParameter = h2hUsername != null ?
                new ObjectParameter("h2hUsername", h2hUsername) :
                new ObjectParameter("h2hUsername", typeof(string));
    
            var h2hpasswordParameter = h2hpassword != null ?
                new ObjectParameter("h2hpassword", h2hpassword) :
                new ObjectParameter("h2hpassword", typeof(string));
    
            var referencelengthParameter = referencelength.HasValue ?
                new ObjectParameter("Referencelength", referencelength) :
                new ObjectParameter("Referencelength", typeof(long));
    
            var referenceRdoValueParameter = referenceRdoValue != null ?
                new ObjectParameter("ReferenceRdoValue", referenceRdoValue) :
                new ObjectParameter("ReferenceRdoValue", typeof(string));
    
            var branchNameParameter = branchName != null ?
                new ObjectParameter("BranchName", branchName) :
                new ObjectParameter("BranchName", typeof(string));
    
            var settlementTypeIdParameter = settlementTypeId.HasValue ?
                new ObjectParameter("SettlementTypeId", settlementTypeId) :
                new ObjectParameter("SettlementTypeId", typeof(long));
    
            var businessSegmentIdParameter = businessSegmentId.HasValue ?
                new ObjectParameter("BusinessSegmentId", businessSegmentId) :
                new ObjectParameter("BusinessSegmentId", typeof(long));
    
            var dtcontactpersonParameter = dtcontactperson != null ?
                new ObjectParameter("dtcontactperson", dtcontactperson) :
                new ObjectParameter("dtcontactperson", typeof(string));
    
            var xmlFileNameImgDOCParameter = xmlFileNameImgDOC != null ?
                new ObjectParameter("XmlFileNameImgDOC", xmlFileNameImgDOC) :
                new ObjectParameter("XmlFileNameImgDOC", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_Entity_Result>("Sp_Entity", queryTypeParameter, stateIdParameter, countryIdParameter, nameParameter, contactPersonParameter, sponsorBankCodeParameter, utilityCodeParameter, sponsorBankNameParameter, entityIdParameter, addr1Parameter, emailParameter, cityIdParameter, mobileParameter, pincodeParameter, faxParameter, imagePathParameter, userIdParameter, userNameParameter, passwordParameter, passwordKeyParameter, codeParameter, xmlEntityParameter, typeParameter, debitTypeParameter, frequencyTypeParameter, toDebitParameter, xmlUtilityCodeParameter, xmlSponsorBankCodeParameter, dtBilligMailParameter, instructingMemberIdParameter, amountParameter, xmlPaymentModeParameter, activateParameter, entityBusinessCodeParameter, isOverMandateParameter, isRefrenceCheckParameter, isValidationCountEnableParameter, bankValidationAdminCountParameter, bankValidationUserCountParameter, acValidationAdminCountParameter, acValidationUserCountParameter, isRefNumercParameter, isSendEmailCustomerParameter, isShowMandateModeParameter, ischkEmandateParameter, ischkPhysicalParameter, xmldebittypeParameter, xmlToDebitParameter, xmlTypeParameter, xmlfrequencyParameter, chkIsRefrence2MandatoryParameter, dtBankAmountParameter, isThirdTransactionParameter, chkIsZipSureParameter, chkIsAllowEManadteParameter, iSTodateMandatoryEnachParameter, xmlFileNameParameter, accountNumberParameter, aPPIdParameter, presentmentSeqNumberParameter, reCheckParameter, checkerRequireParameter, xmlModeTypeParameter, chkIsaccountvalidationParameter, chkIsmobileappParameter, corporateIdParameter, xmlDimensionParameter, activityIdParameter, emailIdParameter, xmlCategoryCodeParameter, pANParameter, tANParameter, gSTINParameter, isNachPresentmentParameter, billingAddressParameter, chargeDebitAcNoParameter, bankCorporateIdParameter, branchCodeParameter, iFSCParameter, regionalManagerIdParameter, pSMParameter, billingContactPersonParameter, designationParameter, contactNoParameter, faxNoParameter, arrangementInDaysParameter, pickUpLocationAddressParameter, pickUpContactPersonParameter, communicationMailPrimaryParameter, ipParameter, urlParameter, h2hUsernameParameter, h2hpasswordParameter, referencelengthParameter, referenceRdoValueParameter, branchNameParameter, settlementTypeIdParameter, businessSegmentIdParameter, dtcontactpersonParameter, xmlFileNameImgDOCParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> Sp_EntityBankSetup(string queryType, Nullable<long> entityId, Nullable<long> bankId, Nullable<bool> fileformatxml, Nullable<bool> fileformatexcel, Nullable<bool> fileformatcsv, Nullable<bool> filesendDaily, Nullable<bool> filesendWeekly, Nullable<bool> filesendMonthly, Nullable<bool> filesendSpecific, string timeDuration, Nullable<System.DateTime> weekDate, Nullable<System.DateTime> specificDate, Nullable<long> entityBankId, string dtFileSequence, Nullable<long> id, Nullable<long> userId, string dailyTime, string dtDate)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var entityIdParameter = entityId.HasValue ?
                new ObjectParameter("EntityId", entityId) :
                new ObjectParameter("EntityId", typeof(long));
    
            var bankIdParameter = bankId.HasValue ?
                new ObjectParameter("BankId", bankId) :
                new ObjectParameter("BankId", typeof(long));
    
            var fileformatxmlParameter = fileformatxml.HasValue ?
                new ObjectParameter("fileformatxml", fileformatxml) :
                new ObjectParameter("fileformatxml", typeof(bool));
    
            var fileformatexcelParameter = fileformatexcel.HasValue ?
                new ObjectParameter("fileformatexcel", fileformatexcel) :
                new ObjectParameter("fileformatexcel", typeof(bool));
    
            var fileformatcsvParameter = fileformatcsv.HasValue ?
                new ObjectParameter("fileformatcsv", fileformatcsv) :
                new ObjectParameter("fileformatcsv", typeof(bool));
    
            var filesendDailyParameter = filesendDaily.HasValue ?
                new ObjectParameter("FilesendDaily", filesendDaily) :
                new ObjectParameter("FilesendDaily", typeof(bool));
    
            var filesendWeeklyParameter = filesendWeekly.HasValue ?
                new ObjectParameter("FilesendWeekly", filesendWeekly) :
                new ObjectParameter("FilesendWeekly", typeof(bool));
    
            var filesendMonthlyParameter = filesendMonthly.HasValue ?
                new ObjectParameter("FilesendMonthly", filesendMonthly) :
                new ObjectParameter("FilesendMonthly", typeof(bool));
    
            var filesendSpecificParameter = filesendSpecific.HasValue ?
                new ObjectParameter("FilesendSpecific", filesendSpecific) :
                new ObjectParameter("FilesendSpecific", typeof(bool));
    
            var timeDurationParameter = timeDuration != null ?
                new ObjectParameter("TimeDuration", timeDuration) :
                new ObjectParameter("TimeDuration", typeof(string));
    
            var weekDateParameter = weekDate.HasValue ?
                new ObjectParameter("WeekDate", weekDate) :
                new ObjectParameter("WeekDate", typeof(System.DateTime));
    
            var specificDateParameter = specificDate.HasValue ?
                new ObjectParameter("SpecificDate", specificDate) :
                new ObjectParameter("SpecificDate", typeof(System.DateTime));
    
            var entityBankIdParameter = entityBankId.HasValue ?
                new ObjectParameter("EntityBankId", entityBankId) :
                new ObjectParameter("EntityBankId", typeof(long));
    
            var dtFileSequenceParameter = dtFileSequence != null ?
                new ObjectParameter("dtFileSequence", dtFileSequence) :
                new ObjectParameter("dtFileSequence", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var dailyTimeParameter = dailyTime != null ?
                new ObjectParameter("DailyTime", dailyTime) :
                new ObjectParameter("DailyTime", typeof(string));
    
            var dtDateParameter = dtDate != null ?
                new ObjectParameter("dtDate", dtDate) :
                new ObjectParameter("dtDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("Sp_EntityBankSetup", queryTypeParameter, entityIdParameter, bankIdParameter, fileformatxmlParameter, fileformatexcelParameter, fileformatcsvParameter, filesendDailyParameter, filesendWeeklyParameter, filesendMonthlyParameter, filesendSpecificParameter, timeDurationParameter, weekDateParameter, specificDateParameter, entityBankIdParameter, dtFileSequenceParameter, idParameter, userIdParameter, dailyTimeParameter, dtDateParameter);
        }
    
        public virtual ObjectResult<sp_ESign_Result> sp_ESign(string queryType, Nullable<long> userId, Nullable<long> mandateid, string emandatetype)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var mandateidParameter = mandateid.HasValue ?
                new ObjectParameter("mandateid", mandateid) :
                new ObjectParameter("mandateid", typeof(long));
    
            var emandatetypeParameter = emandatetype != null ?
                new ObjectParameter("emandatetype", emandatetype) :
                new ObjectParameter("emandatetype", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ESign_Result>("sp_ESign", queryTypeParameter, userIdParameter, mandateidParameter, emandatetypeParameter);
        }
    
        public virtual ObjectResult<string> Sp_ExlUploadedData(string queryType, string entityID, string userID, string xmlDimension, Nullable<int> topVal, string tEUHID, string actID)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var entityIDParameter = entityID != null ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(string));
    
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            var xmlDimensionParameter = xmlDimension != null ?
                new ObjectParameter("XmlDimension", xmlDimension) :
                new ObjectParameter("XmlDimension", typeof(string));
    
            var topValParameter = topVal.HasValue ?
                new ObjectParameter("topVal", topVal) :
                new ObjectParameter("topVal", typeof(int));
    
            var tEUHIDParameter = tEUHID != null ?
                new ObjectParameter("TEUHID", tEUHID) :
                new ObjectParameter("TEUHID", typeof(string));
    
            var actIDParameter = actID != null ?
                new ObjectParameter("ActID", actID) :
                new ObjectParameter("ActID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("Sp_ExlUploadedData", queryTypeParameter, entityIDParameter, userIDParameter, xmlDimensionParameter, topValParameter, tEUHIDParameter, actIDParameter);
        }
    
        public virtual ObjectResult<Sp_FinalDashbaord_Result> Sp_FinalDashbaord(string queryType, Nullable<int> entityId, Nullable<int> userId, string xmlDimension, string fILENO, string bankID, string fromDate, string toDate, Nullable<int> mode)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var entityIdParameter = entityId.HasValue ?
                new ObjectParameter("EntityId", entityId) :
                new ObjectParameter("EntityId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var xmlDimensionParameter = xmlDimension != null ?
                new ObjectParameter("XmlDimension", xmlDimension) :
                new ObjectParameter("XmlDimension", typeof(string));
    
            var fILENOParameter = fILENO != null ?
                new ObjectParameter("FILENO", fILENO) :
                new ObjectParameter("FILENO", typeof(string));
    
            var bankIDParameter = bankID != null ?
                new ObjectParameter("BankID", bankID) :
                new ObjectParameter("BankID", typeof(string));
    
            var fromDateParameter = fromDate != null ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(string));
    
            var toDateParameter = toDate != null ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(string));
    
            var modeParameter = mode.HasValue ?
                new ObjectParameter("Mode", mode) :
                new ObjectParameter("Mode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_FinalDashbaord_Result>("Sp_FinalDashbaord", queryTypeParameter, entityIdParameter, userIdParameter, xmlDimensionParameter, fILENOParameter, bankIDParameter, fromDateParameter, toDateParameter, modeParameter);
        }
    
        public virtual ObjectResult<SP_GeneraateMandateRegFile_Result> SP_GeneraateMandateRegFile(string queryType, Nullable<long> userId, Nullable<System.DateTime> fromDate, string xmlXlData, Nullable<System.DateTime> toDate, string strTable, Nullable<long> ddlUserId, Nullable<long> count, string status, Nullable<long> entityId, string lotNo)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var xmlXlDataParameter = xmlXlData != null ?
                new ObjectParameter("XmlXlData", xmlXlData) :
                new ObjectParameter("XmlXlData", typeof(string));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var strTableParameter = strTable != null ?
                new ObjectParameter("strTable", strTable) :
                new ObjectParameter("strTable", typeof(string));
    
            var ddlUserIdParameter = ddlUserId.HasValue ?
                new ObjectParameter("ddlUserId", ddlUserId) :
                new ObjectParameter("ddlUserId", typeof(long));
    
            var countParameter = count.HasValue ?
                new ObjectParameter("count", count) :
                new ObjectParameter("count", typeof(long));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var entityIdParameter = entityId.HasValue ?
                new ObjectParameter("EntityId", entityId) :
                new ObjectParameter("EntityId", typeof(long));
    
            var lotNoParameter = lotNo != null ?
                new ObjectParameter("LotNo", lotNo) :
                new ObjectParameter("LotNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GeneraateMandateRegFile_Result>("SP_GeneraateMandateRegFile", queryTypeParameter, userIdParameter, fromDateParameter, xmlXlDataParameter, toDateParameter, strTableParameter, ddlUserIdParameter, countParameter, statusParameter, entityIdParameter, lotNoParameter);
        }
    
        public virtual ObjectResult<SP_GenerateZipFromService_Result> SP_GenerateZipFromService(string queryType, Nullable<long> userId, Nullable<System.DateTime> fromDate, string xmlXlData, Nullable<System.DateTime> toDate, string strTable, Nullable<long> ddlUserId, Nullable<long> count)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var xmlXlDataParameter = xmlXlData != null ?
                new ObjectParameter("XmlXlData", xmlXlData) :
                new ObjectParameter("XmlXlData", typeof(string));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var strTableParameter = strTable != null ?
                new ObjectParameter("strTable", strTable) :
                new ObjectParameter("strTable", typeof(string));
    
            var ddlUserIdParameter = ddlUserId.HasValue ?
                new ObjectParameter("ddlUserId", ddlUserId) :
                new ObjectParameter("ddlUserId", typeof(long));
    
            var countParameter = count.HasValue ?
                new ObjectParameter("count", count) :
                new ObjectParameter("count", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GenerateZipFromService_Result>("SP_GenerateZipFromService", queryTypeParameter, userIdParameter, fromDateParameter, xmlXlDataParameter, toDateParameter, strTableParameter, ddlUserIdParameter, countParameter);
        }
    
        public virtual ObjectResult<Sp_GetDashBoardData_Result> Sp_GetDashBoardData(string queryType, Nullable<System.DateTime> weekDate, Nullable<long> branchId, Nullable<int> yearNo)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var weekDateParameter = weekDate.HasValue ?
                new ObjectParameter("WeekDate", weekDate) :
                new ObjectParameter("WeekDate", typeof(System.DateTime));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(long));
    
            var yearNoParameter = yearNo.HasValue ?
                new ObjectParameter("YearNo", yearNo) :
                new ObjectParameter("YearNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_GetDashBoardData_Result>("Sp_GetDashBoardData", queryTypeParameter, weekDateParameter, branchIdParameter, yearNoParameter);
        }
    
        public virtual ObjectResult<Sp_GetEmailData_Result> Sp_GetEmailData(string queryType, Nullable<long> mergeDataId, Nullable<long> id, Nullable<long> entityId)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var mergeDataIdParameter = mergeDataId.HasValue ?
                new ObjectParameter("MergeDataId", mergeDataId) :
                new ObjectParameter("MergeDataId", typeof(long));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var entityIdParameter = entityId.HasValue ?
                new ObjectParameter("EntityId", entityId) :
                new ObjectParameter("EntityId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_GetEmailData_Result>("Sp_GetEmailData", queryTypeParameter, mergeDataIdParameter, idParameter, entityIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> Sp_HolidayMaster(string queryType, Nullable<long> holidayID, Nullable<long> regionID, string holidayName, Nullable<System.DateTime> holidayDate, Nullable<System.DateTime> createdOn, Nullable<System.DateTime> updatedOn, Nullable<long> userId, Nullable<long> entityId, string regionCode, string regionName, string stateIDs, Nullable<int> iSActive, string dtStatsName)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var holidayIDParameter = holidayID.HasValue ?
                new ObjectParameter("HolidayID", holidayID) :
                new ObjectParameter("HolidayID", typeof(long));
    
            var regionIDParameter = regionID.HasValue ?
                new ObjectParameter("RegionID", regionID) :
                new ObjectParameter("RegionID", typeof(long));
    
            var holidayNameParameter = holidayName != null ?
                new ObjectParameter("HolidayName", holidayName) :
                new ObjectParameter("HolidayName", typeof(string));
    
            var holidayDateParameter = holidayDate.HasValue ?
                new ObjectParameter("HolidayDate", holidayDate) :
                new ObjectParameter("HolidayDate", typeof(System.DateTime));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var entityIdParameter = entityId.HasValue ?
                new ObjectParameter("EntityId", entityId) :
                new ObjectParameter("EntityId", typeof(long));
    
            var regionCodeParameter = regionCode != null ?
                new ObjectParameter("RegionCode", regionCode) :
                new ObjectParameter("RegionCode", typeof(string));
    
            var regionNameParameter = regionName != null ?
                new ObjectParameter("RegionName", regionName) :
                new ObjectParameter("RegionName", typeof(string));
    
            var stateIDsParameter = stateIDs != null ?
                new ObjectParameter("StateIDs", stateIDs) :
                new ObjectParameter("StateIDs", typeof(string));
    
            var iSActiveParameter = iSActive.HasValue ?
                new ObjectParameter("ISActive", iSActive) :
                new ObjectParameter("ISActive", typeof(int));
    
            var dtStatsNameParameter = dtStatsName != null ?
                new ObjectParameter("dtStatsName", dtStatsName) :
                new ObjectParameter("dtStatsName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("Sp_HolidayMaster", queryTypeParameter, holidayIDParameter, regionIDParameter, holidayNameParameter, holidayDateParameter, createdOnParameter, updatedOnParameter, userIdParameter, entityIdParameter, regionCodeParameter, regionNameParameter, stateIDsParameter, iSActiveParameter, dtStatsNameParameter);
        }
    
        public virtual ObjectResult<Sp_Home_Result> Sp_Home(string queryType, Nullable<long> userId, Nullable<long> entityId, string type)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var entityIdParameter = entityId.HasValue ?
                new ObjectParameter("EntityId", entityId) :
                new ObjectParameter("EntityId", typeof(long));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_Home_Result>("Sp_Home", queryTypeParameter, userIdParameter, entityIdParameter, typeParameter);
        }
    
        public virtual int sp_KotakDashboard(string queryType, string xmlXlData, string corporateName, string dBId, string year, string month)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var xmlXlDataParameter = xmlXlData != null ?
                new ObjectParameter("XmlXlData", xmlXlData) :
                new ObjectParameter("XmlXlData", typeof(string));
    
            var corporateNameParameter = corporateName != null ?
                new ObjectParameter("CorporateName", corporateName) :
                new ObjectParameter("CorporateName", typeof(string));
    
            var dBIdParameter = dBId != null ?
                new ObjectParameter("DBId", dBId) :
                new ObjectParameter("DBId", typeof(string));
    
            var yearParameter = year != null ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(string));
    
            var monthParameter = month != null ?
                new ObjectParameter("Month", month) :
                new ObjectParameter("Month", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_KotakDashboard", queryTypeParameter, xmlXlDataParameter, corporateNameParameter, dBIdParameter, yearParameter, monthParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> Sp_LinksCreation()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("Sp_LinksCreation");
        }
    
        public virtual ObjectResult<Nullable<decimal>> Sp_LinkSetup(string queryType, string linkName, string url, Nullable<int> orderNo, string purpose, Nullable<bool> isActive, string iconName, Nullable<long> linkID)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var linkNameParameter = linkName != null ?
                new ObjectParameter("LinkName", linkName) :
                new ObjectParameter("LinkName", typeof(string));
    
            var urlParameter = url != null ?
                new ObjectParameter("url", url) :
                new ObjectParameter("url", typeof(string));
    
            var orderNoParameter = orderNo.HasValue ?
                new ObjectParameter("OrderNo", orderNo) :
                new ObjectParameter("OrderNo", typeof(int));
    
            var purposeParameter = purpose != null ?
                new ObjectParameter("Purpose", purpose) :
                new ObjectParameter("Purpose", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var iconNameParameter = iconName != null ?
                new ObjectParameter("IconName", iconName) :
                new ObjectParameter("IconName", typeof(string));
    
            var linkIDParameter = linkID.HasValue ?
                new ObjectParameter("LinkID", linkID) :
                new ObjectParameter("LinkID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("Sp_LinkSetup", queryTypeParameter, linkNameParameter, urlParameter, orderNoParameter, purposeParameter, isActiveParameter, iconNameParameter, linkIDParameter);
        }
    
        public virtual ObjectResult<Sp_LinkSetup_AccessRights_Result> Sp_LinkSetup_AccessRights(string queryType, string linkName, string url, Nullable<int> orderNo, string purpose, Nullable<bool> isActive, Nullable<bool> isDefault, string iconName, Nullable<long> linkID, Nullable<long> parentMenuId, string userType, Nullable<long> entityID, string accessRightsXml, Nullable<long> userID, Nullable<long> createdby, Nullable<long> notificationID, Nullable<long> isvalue)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var linkNameParameter = linkName != null ?
                new ObjectParameter("LinkName", linkName) :
                new ObjectParameter("LinkName", typeof(string));
    
            var urlParameter = url != null ?
                new ObjectParameter("url", url) :
                new ObjectParameter("url", typeof(string));
    
            var orderNoParameter = orderNo.HasValue ?
                new ObjectParameter("OrderNo", orderNo) :
                new ObjectParameter("OrderNo", typeof(int));
    
            var purposeParameter = purpose != null ?
                new ObjectParameter("Purpose", purpose) :
                new ObjectParameter("Purpose", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var isDefaultParameter = isDefault.HasValue ?
                new ObjectParameter("IsDefault", isDefault) :
                new ObjectParameter("IsDefault", typeof(bool));
    
            var iconNameParameter = iconName != null ?
                new ObjectParameter("IconName", iconName) :
                new ObjectParameter("IconName", typeof(string));
    
            var linkIDParameter = linkID.HasValue ?
                new ObjectParameter("LinkID", linkID) :
                new ObjectParameter("LinkID", typeof(long));
    
            var parentMenuIdParameter = parentMenuId.HasValue ?
                new ObjectParameter("ParentMenuId", parentMenuId) :
                new ObjectParameter("ParentMenuId", typeof(long));
    
            var userTypeParameter = userType != null ?
                new ObjectParameter("UserType", userType) :
                new ObjectParameter("UserType", typeof(string));
    
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(long));
    
            var accessRightsXmlParameter = accessRightsXml != null ?
                new ObjectParameter("AccessRightsXml", accessRightsXml) :
                new ObjectParameter("AccessRightsXml", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(long));
    
            var createdbyParameter = createdby.HasValue ?
                new ObjectParameter("Createdby", createdby) :
                new ObjectParameter("Createdby", typeof(long));
    
            var notificationIDParameter = notificationID.HasValue ?
                new ObjectParameter("NotificationID", notificationID) :
                new ObjectParameter("NotificationID", typeof(long));
    
            var isvalueParameter = isvalue.HasValue ?
                new ObjectParameter("Isvalue", isvalue) :
                new ObjectParameter("Isvalue", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_LinkSetup_AccessRights_Result>("Sp_LinkSetup_AccessRights", queryTypeParameter, linkNameParameter, urlParameter, orderNoParameter, purposeParameter, isActiveParameter, isDefaultParameter, iconNameParameter, linkIDParameter, parentMenuIdParameter, userTypeParameter, entityIDParameter, accessRightsXmlParameter, userIDParameter, createdbyParameter, notificationIDParameter, isvalueParameter);
        }
    
        public virtual ObjectResult<byte[]> Sp_LogoImageData(string queryType, string schemeId, string customerId)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var schemeIdParameter = schemeId != null ?
                new ObjectParameter("SchemeId", schemeId) :
                new ObjectParameter("SchemeId", typeof(string));
    
            var customerIdParameter = customerId != null ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<byte[]>("Sp_LogoImageData", queryTypeParameter, schemeIdParameter, customerIdParameter);
        }
    
        public virtual ObjectResult<Sp_Mandate_Result> Sp_Mandate(string queryType, Nullable<long> entityId, string debitType, string frequency, Nullable<long> userId, string toDebit, string acNo, string bankName, string iFSC, Nullable<double> mICR, Nullable<long> netBanking, Nullable<long> debitCard, string amountRupees, string qRCodeImagepath, string refrence1, string refrence2, string addr1, string phNumber, string emailId, string from, string to, Nullable<long> mandateId, string description, string status, string nach, string rupees, string customer1, string customer2, string customer3, string dateOnMandate, string tIPPath, string pNGPath, string utilityCode, string sponsorCode, string strFromDate, string strToDate, string strTable, string paymentDataX, string xmlMandate, string filePath, Nullable<long> activityId, string typeData, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string rejectedReason, string fullbankBranch, Nullable<long> bankValidationAdminCount, Nullable<long> bankValidationUserCount, Nullable<long> acValidationAdminCount, Nullable<long> acValidationUserCount, string mandateMode, string amountWords, string sponsorBankCode, Nullable<bool> iSPhysical, Nullable<bool> isEnach, Nullable<long> appId, Nullable<int> topVal, string tEUHID, string activityType, string categoryCode, Nullable<long> id, Nullable<long> mandateReverseId, Nullable<bool> isOnUs, string activityName)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var entityIdParameter = entityId.HasValue ?
                new ObjectParameter("EntityId", entityId) :
                new ObjectParameter("EntityId", typeof(long));
    
            var debitTypeParameter = debitType != null ?
                new ObjectParameter("DebitType", debitType) :
                new ObjectParameter("DebitType", typeof(string));
    
            var frequencyParameter = frequency != null ?
                new ObjectParameter("Frequency", frequency) :
                new ObjectParameter("Frequency", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var toDebitParameter = toDebit != null ?
                new ObjectParameter("ToDebit", toDebit) :
                new ObjectParameter("ToDebit", typeof(string));
    
            var acNoParameter = acNo != null ?
                new ObjectParameter("AcNo", acNo) :
                new ObjectParameter("AcNo", typeof(string));
    
            var bankNameParameter = bankName != null ?
                new ObjectParameter("BankName", bankName) :
                new ObjectParameter("BankName", typeof(string));
    
            var iFSCParameter = iFSC != null ?
                new ObjectParameter("IFSC", iFSC) :
                new ObjectParameter("IFSC", typeof(string));
    
            var mICRParameter = mICR.HasValue ?
                new ObjectParameter("MICR", mICR) :
                new ObjectParameter("MICR", typeof(double));
    
            var netBankingParameter = netBanking.HasValue ?
                new ObjectParameter("NetBanking", netBanking) :
                new ObjectParameter("NetBanking", typeof(long));
    
            var debitCardParameter = debitCard.HasValue ?
                new ObjectParameter("DebitCard", debitCard) :
                new ObjectParameter("DebitCard", typeof(long));
    
            var amountRupeesParameter = amountRupees != null ?
                new ObjectParameter("AmountRupees", amountRupees) :
                new ObjectParameter("AmountRupees", typeof(string));
    
            var qRCodeImagepathParameter = qRCodeImagepath != null ?
                new ObjectParameter("QRCodeImagepath", qRCodeImagepath) :
                new ObjectParameter("QRCodeImagepath", typeof(string));
    
            var refrence1Parameter = refrence1 != null ?
                new ObjectParameter("Refrence1", refrence1) :
                new ObjectParameter("Refrence1", typeof(string));
    
            var refrence2Parameter = refrence2 != null ?
                new ObjectParameter("Refrence2", refrence2) :
                new ObjectParameter("Refrence2", typeof(string));
    
            var addr1Parameter = addr1 != null ?
                new ObjectParameter("Addr1", addr1) :
                new ObjectParameter("Addr1", typeof(string));
    
            var phNumberParameter = phNumber != null ?
                new ObjectParameter("PhNumber", phNumber) :
                new ObjectParameter("PhNumber", typeof(string));
    
            var emailIdParameter = emailId != null ?
                new ObjectParameter("EmailId", emailId) :
                new ObjectParameter("EmailId", typeof(string));
    
            var fromParameter = from != null ?
                new ObjectParameter("From", from) :
                new ObjectParameter("From", typeof(string));
    
            var toParameter = to != null ?
                new ObjectParameter("To", to) :
                new ObjectParameter("To", typeof(string));
    
            var mandateIdParameter = mandateId.HasValue ?
                new ObjectParameter("MandateId", mandateId) :
                new ObjectParameter("MandateId", typeof(long));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var nachParameter = nach != null ?
                new ObjectParameter("Nach", nach) :
                new ObjectParameter("Nach", typeof(string));
    
            var rupeesParameter = rupees != null ?
                new ObjectParameter("Rupees", rupees) :
                new ObjectParameter("Rupees", typeof(string));
    
            var customer1Parameter = customer1 != null ?
                new ObjectParameter("Customer1", customer1) :
                new ObjectParameter("Customer1", typeof(string));
    
            var customer2Parameter = customer2 != null ?
                new ObjectParameter("Customer2", customer2) :
                new ObjectParameter("Customer2", typeof(string));
    
            var customer3Parameter = customer3 != null ?
                new ObjectParameter("Customer3", customer3) :
                new ObjectParameter("Customer3", typeof(string));
    
            var dateOnMandateParameter = dateOnMandate != null ?
                new ObjectParameter("DateOnMandate", dateOnMandate) :
                new ObjectParameter("DateOnMandate", typeof(string));
    
            var tIPPathParameter = tIPPath != null ?
                new ObjectParameter("TIPPath", tIPPath) :
                new ObjectParameter("TIPPath", typeof(string));
    
            var pNGPathParameter = pNGPath != null ?
                new ObjectParameter("PNGPath", pNGPath) :
                new ObjectParameter("PNGPath", typeof(string));
    
            var utilityCodeParameter = utilityCode != null ?
                new ObjectParameter("UtilityCode", utilityCode) :
                new ObjectParameter("UtilityCode", typeof(string));
    
            var sponsorCodeParameter = sponsorCode != null ?
                new ObjectParameter("SponsorCode", sponsorCode) :
                new ObjectParameter("SponsorCode", typeof(string));
    
            var strFromDateParameter = strFromDate != null ?
                new ObjectParameter("strFromDate", strFromDate) :
                new ObjectParameter("strFromDate", typeof(string));
    
            var strToDateParameter = strToDate != null ?
                new ObjectParameter("strToDate", strToDate) :
                new ObjectParameter("strToDate", typeof(string));
    
            var strTableParameter = strTable != null ?
                new ObjectParameter("strTable", strTable) :
                new ObjectParameter("strTable", typeof(string));
    
            var paymentDataXParameter = paymentDataX != null ?
                new ObjectParameter("PaymentDataX", paymentDataX) :
                new ObjectParameter("PaymentDataX", typeof(string));
    
            var xmlMandateParameter = xmlMandate != null ?
                new ObjectParameter("xmlMandate", xmlMandate) :
                new ObjectParameter("xmlMandate", typeof(string));
    
            var filePathParameter = filePath != null ?
                new ObjectParameter("FilePath", filePath) :
                new ObjectParameter("FilePath", typeof(string));
    
            var activityIdParameter = activityId.HasValue ?
                new ObjectParameter("ActivityId", activityId) :
                new ObjectParameter("ActivityId", typeof(long));
    
            var typeDataParameter = typeData != null ?
                new ObjectParameter("TypeData", typeData) :
                new ObjectParameter("TypeData", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var rejectedReasonParameter = rejectedReason != null ?
                new ObjectParameter("RejectedReason", rejectedReason) :
                new ObjectParameter("RejectedReason", typeof(string));
    
            var fullbankBranchParameter = fullbankBranch != null ?
                new ObjectParameter("fullbankBranch", fullbankBranch) :
                new ObjectParameter("fullbankBranch", typeof(string));
    
            var bankValidationAdminCountParameter = bankValidationAdminCount.HasValue ?
                new ObjectParameter("BankValidationAdminCount", bankValidationAdminCount) :
                new ObjectParameter("BankValidationAdminCount", typeof(long));
    
            var bankValidationUserCountParameter = bankValidationUserCount.HasValue ?
                new ObjectParameter("BankValidationUserCount", bankValidationUserCount) :
                new ObjectParameter("BankValidationUserCount", typeof(long));
    
            var acValidationAdminCountParameter = acValidationAdminCount.HasValue ?
                new ObjectParameter("AcValidationAdminCount", acValidationAdminCount) :
                new ObjectParameter("AcValidationAdminCount", typeof(long));
    
            var acValidationUserCountParameter = acValidationUserCount.HasValue ?
                new ObjectParameter("AcValidationUserCount", acValidationUserCount) :
                new ObjectParameter("AcValidationUserCount", typeof(long));
    
            var mandateModeParameter = mandateMode != null ?
                new ObjectParameter("MandateMode", mandateMode) :
                new ObjectParameter("MandateMode", typeof(string));
    
            var amountWordsParameter = amountWords != null ?
                new ObjectParameter("AmountWords", amountWords) :
                new ObjectParameter("AmountWords", typeof(string));
    
            var sponsorBankCodeParameter = sponsorBankCode != null ?
                new ObjectParameter("SponsorBankCode", sponsorBankCode) :
                new ObjectParameter("SponsorBankCode", typeof(string));
    
            var iSPhysicalParameter = iSPhysical.HasValue ?
                new ObjectParameter("ISPhysical", iSPhysical) :
                new ObjectParameter("ISPhysical", typeof(bool));
    
            var isEnachParameter = isEnach.HasValue ?
                new ObjectParameter("IsEnach", isEnach) :
                new ObjectParameter("IsEnach", typeof(bool));
    
            var appIdParameter = appId.HasValue ?
                new ObjectParameter("AppId", appId) :
                new ObjectParameter("AppId", typeof(long));
    
            var topValParameter = topVal.HasValue ?
                new ObjectParameter("topVal", topVal) :
                new ObjectParameter("topVal", typeof(int));
    
            var tEUHIDParameter = tEUHID != null ?
                new ObjectParameter("TEUHID", tEUHID) :
                new ObjectParameter("TEUHID", typeof(string));
    
            var activityTypeParameter = activityType != null ?
                new ObjectParameter("ActivityType", activityType) :
                new ObjectParameter("ActivityType", typeof(string));
    
            var categoryCodeParameter = categoryCode != null ?
                new ObjectParameter("CategoryCode", categoryCode) :
                new ObjectParameter("CategoryCode", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var mandateReverseIdParameter = mandateReverseId.HasValue ?
                new ObjectParameter("MandateReverseId", mandateReverseId) :
                new ObjectParameter("MandateReverseId", typeof(long));
    
            var isOnUsParameter = isOnUs.HasValue ?
                new ObjectParameter("IsOnUs", isOnUs) :
                new ObjectParameter("IsOnUs", typeof(bool));
    
            var activityNameParameter = activityName != null ?
                new ObjectParameter("ActivityName", activityName) :
                new ObjectParameter("ActivityName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_Mandate_Result>("Sp_Mandate", queryTypeParameter, entityIdParameter, debitTypeParameter, frequencyParameter, userIdParameter, toDebitParameter, acNoParameter, bankNameParameter, iFSCParameter, mICRParameter, netBankingParameter, debitCardParameter, amountRupeesParameter, qRCodeImagepathParameter, refrence1Parameter, refrence2Parameter, addr1Parameter, phNumberParameter, emailIdParameter, fromParameter, toParameter, mandateIdParameter, descriptionParameter, statusParameter, nachParameter, rupeesParameter, customer1Parameter, customer2Parameter, customer3Parameter, dateOnMandateParameter, tIPPathParameter, pNGPathParameter, utilityCodeParameter, sponsorCodeParameter, strFromDateParameter, strToDateParameter, strTableParameter, paymentDataXParameter, xmlMandateParameter, filePathParameter, activityIdParameter, typeDataParameter, fromDateParameter, toDateParameter, rejectedReasonParameter, fullbankBranchParameter, bankValidationAdminCountParameter, bankValidationUserCountParameter, acValidationAdminCountParameter, acValidationUserCountParameter, mandateModeParameter, amountWordsParameter, sponsorBankCodeParameter, iSPhysicalParameter, isEnachParameter, appIdParameter, topValParameter, tEUHIDParameter, activityTypeParameter, categoryCodeParameter, idParameter, mandateReverseIdParameter, isOnUsParameter, activityNameParameter);
        }
    
        public virtual int Sp_Mandate_OnUs(string queryType, Nullable<long> entityId, Nullable<long> userId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string usertype, string sponsorBankCode, string refrence1, string activityId, string isEntity, string strFromDate, string strToDate, string presDate, string xmlDimension, Nullable<long> bank_ID, string activityName, string xmlXlData)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var entityIdParameter = entityId.HasValue ?
                new ObjectParameter("EntityId", entityId) :
                new ObjectParameter("EntityId", typeof(long));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var usertypeParameter = usertype != null ?
                new ObjectParameter("usertype", usertype) :
                new ObjectParameter("usertype", typeof(string));
    
            var sponsorBankCodeParameter = sponsorBankCode != null ?
                new ObjectParameter("SponsorBankCode", sponsorBankCode) :
                new ObjectParameter("SponsorBankCode", typeof(string));
    
            var refrence1Parameter = refrence1 != null ?
                new ObjectParameter("Refrence1", refrence1) :
                new ObjectParameter("Refrence1", typeof(string));
    
            var activityIdParameter = activityId != null ?
                new ObjectParameter("ActivityId", activityId) :
                new ObjectParameter("ActivityId", typeof(string));
    
            var isEntityParameter = isEntity != null ?
                new ObjectParameter("IsEntity", isEntity) :
                new ObjectParameter("IsEntity", typeof(string));
    
            var strFromDateParameter = strFromDate != null ?
                new ObjectParameter("strFromDate", strFromDate) :
                new ObjectParameter("strFromDate", typeof(string));
    
            var strToDateParameter = strToDate != null ?
                new ObjectParameter("strToDate", strToDate) :
                new ObjectParameter("strToDate", typeof(string));
    
            var presDateParameter = presDate != null ?
                new ObjectParameter("PresDate", presDate) :
                new ObjectParameter("PresDate", typeof(string));
    
            var xmlDimensionParameter = xmlDimension != null ?
                new ObjectParameter("XmlDimension", xmlDimension) :
                new ObjectParameter("XmlDimension", typeof(string));
    
            var bank_IDParameter = bank_ID.HasValue ?
                new ObjectParameter("Bank_ID", bank_ID) :
                new ObjectParameter("Bank_ID", typeof(long));
    
            var activityNameParameter = activityName != null ?
                new ObjectParameter("ActivityName", activityName) :
                new ObjectParameter("ActivityName", typeof(string));
    
            var xmlXlDataParameter = xmlXlData != null ?
                new ObjectParameter("XmlXlData", xmlXlData) :
                new ObjectParameter("XmlXlData", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_Mandate_OnUs", queryTypeParameter, entityIdParameter, userIdParameter, fromDateParameter, toDateParameter, usertypeParameter, sponsorBankCodeParameter, refrence1Parameter, activityIdParameter, isEntityParameter, strFromDateParameter, strToDateParameter, presDateParameter, xmlDimensionParameter, bank_IDParameter, activityNameParameter, xmlXlDataParameter);
        }
    
        public virtual ObjectResult<sp_MandateDetails_Result> sp_MandateDetails(string queryType, Nullable<long> mandateId, string adharNo, string mobileNo, string enachEmail, Nullable<long> id, string eMandatetype, string appId)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var mandateIdParameter = mandateId.HasValue ?
                new ObjectParameter("MandateId", mandateId) :
                new ObjectParameter("MandateId", typeof(long));
    
            var adharNoParameter = adharNo != null ?
                new ObjectParameter("AdharNo", adharNo) :
                new ObjectParameter("AdharNo", typeof(string));
    
            var mobileNoParameter = mobileNo != null ?
                new ObjectParameter("MobileNo", mobileNo) :
                new ObjectParameter("MobileNo", typeof(string));
    
            var enachEmailParameter = enachEmail != null ?
                new ObjectParameter("EnachEmail", enachEmail) :
                new ObjectParameter("EnachEmail", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var eMandatetypeParameter = eMandatetype != null ?
                new ObjectParameter("EMandatetype", eMandatetype) :
                new ObjectParameter("EMandatetype", typeof(string));
    
            var appIdParameter = appId != null ?
                new ObjectParameter("AppId", appId) :
                new ObjectParameter("AppId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_MandateDetails_Result>("sp_MandateDetails", queryTypeParameter, mandateIdParameter, adharNoParameter, mobileNoParameter, enachEmailParameter, idParameter, eMandatetypeParameter, appIdParameter);
        }
    
        public virtual ObjectResult<Sp_MandateDirectDebit_Result> Sp_MandateDirectDebit(string queryType, Nullable<long> entityId, string debitType, string frequency, Nullable<long> userId, string toDebit, string acNo, string bankName, string iFSC, Nullable<double> mICR, string amountRupees, string refrence1, string refrence2, string addr1, string phNumber, string emailId, string from, string to, Nullable<long> mandateId, string description, string status, string nach, string rupees, string customer1, string customer2, string customer3, string dateOnMandate, string tIPPath, string pNGPath, string utilityCode, string sponsorCode, string strFromDate, string strToDate, string strTable, string paymentDataX, string xmlMandate, string filePath, Nullable<long> activityId, string typeData, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string rejectedReason, string fullbankBranch, Nullable<long> bankValidationAdminCount, Nullable<long> bankValidationUserCount, Nullable<long> acValidationAdminCount, Nullable<long> acValidationUserCount, string mandateMode, string amountWords, Nullable<long> appId, string sponsorBankCode)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var entityIdParameter = entityId.HasValue ?
                new ObjectParameter("EntityId", entityId) :
                new ObjectParameter("EntityId", typeof(long));
    
            var debitTypeParameter = debitType != null ?
                new ObjectParameter("DebitType", debitType) :
                new ObjectParameter("DebitType", typeof(string));
    
            var frequencyParameter = frequency != null ?
                new ObjectParameter("Frequency", frequency) :
                new ObjectParameter("Frequency", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var toDebitParameter = toDebit != null ?
                new ObjectParameter("ToDebit", toDebit) :
                new ObjectParameter("ToDebit", typeof(string));
    
            var acNoParameter = acNo != null ?
                new ObjectParameter("AcNo", acNo) :
                new ObjectParameter("AcNo", typeof(string));
    
            var bankNameParameter = bankName != null ?
                new ObjectParameter("BankName", bankName) :
                new ObjectParameter("BankName", typeof(string));
    
            var iFSCParameter = iFSC != null ?
                new ObjectParameter("IFSC", iFSC) :
                new ObjectParameter("IFSC", typeof(string));
    
            var mICRParameter = mICR.HasValue ?
                new ObjectParameter("MICR", mICR) :
                new ObjectParameter("MICR", typeof(double));
    
            var amountRupeesParameter = amountRupees != null ?
                new ObjectParameter("AmountRupees", amountRupees) :
                new ObjectParameter("AmountRupees", typeof(string));
    
            var refrence1Parameter = refrence1 != null ?
                new ObjectParameter("Refrence1", refrence1) :
                new ObjectParameter("Refrence1", typeof(string));
    
            var refrence2Parameter = refrence2 != null ?
                new ObjectParameter("Refrence2", refrence2) :
                new ObjectParameter("Refrence2", typeof(string));
    
            var addr1Parameter = addr1 != null ?
                new ObjectParameter("Addr1", addr1) :
                new ObjectParameter("Addr1", typeof(string));
    
            var phNumberParameter = phNumber != null ?
                new ObjectParameter("PhNumber", phNumber) :
                new ObjectParameter("PhNumber", typeof(string));
    
            var emailIdParameter = emailId != null ?
                new ObjectParameter("EmailId", emailId) :
                new ObjectParameter("EmailId", typeof(string));
    
            var fromParameter = from != null ?
                new ObjectParameter("From", from) :
                new ObjectParameter("From", typeof(string));
    
            var toParameter = to != null ?
                new ObjectParameter("To", to) :
                new ObjectParameter("To", typeof(string));
    
            var mandateIdParameter = mandateId.HasValue ?
                new ObjectParameter("MandateId", mandateId) :
                new ObjectParameter("MandateId", typeof(long));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var nachParameter = nach != null ?
                new ObjectParameter("Nach", nach) :
                new ObjectParameter("Nach", typeof(string));
    
            var rupeesParameter = rupees != null ?
                new ObjectParameter("Rupees", rupees) :
                new ObjectParameter("Rupees", typeof(string));
    
            var customer1Parameter = customer1 != null ?
                new ObjectParameter("Customer1", customer1) :
                new ObjectParameter("Customer1", typeof(string));
    
            var customer2Parameter = customer2 != null ?
                new ObjectParameter("Customer2", customer2) :
                new ObjectParameter("Customer2", typeof(string));
    
            var customer3Parameter = customer3 != null ?
                new ObjectParameter("Customer3", customer3) :
                new ObjectParameter("Customer3", typeof(string));
    
            var dateOnMandateParameter = dateOnMandate != null ?
                new ObjectParameter("DateOnMandate", dateOnMandate) :
                new ObjectParameter("DateOnMandate", typeof(string));
    
            var tIPPathParameter = tIPPath != null ?
                new ObjectParameter("TIPPath", tIPPath) :
                new ObjectParameter("TIPPath", typeof(string));
    
            var pNGPathParameter = pNGPath != null ?
                new ObjectParameter("PNGPath", pNGPath) :
                new ObjectParameter("PNGPath", typeof(string));
    
            var utilityCodeParameter = utilityCode != null ?
                new ObjectParameter("UtilityCode", utilityCode) :
                new ObjectParameter("UtilityCode", typeof(string));
    
            var sponsorCodeParameter = sponsorCode != null ?
                new ObjectParameter("SponsorCode", sponsorCode) :
                new ObjectParameter("SponsorCode", typeof(string));
    
            var strFromDateParameter = strFromDate != null ?
                new ObjectParameter("strFromDate", strFromDate) :
                new ObjectParameter("strFromDate", typeof(string));
    
            var strToDateParameter = strToDate != null ?
                new ObjectParameter("strToDate", strToDate) :
                new ObjectParameter("strToDate", typeof(string));
    
            var strTableParameter = strTable != null ?
                new ObjectParameter("strTable", strTable) :
                new ObjectParameter("strTable", typeof(string));
    
            var paymentDataXParameter = paymentDataX != null ?
                new ObjectParameter("PaymentDataX", paymentDataX) :
                new ObjectParameter("PaymentDataX", typeof(string));
    
            var xmlMandateParameter = xmlMandate != null ?
                new ObjectParameter("xmlMandate", xmlMandate) :
                new ObjectParameter("xmlMandate", typeof(string));
    
            var filePathParameter = filePath != null ?
                new ObjectParameter("FilePath", filePath) :
                new ObjectParameter("FilePath", typeof(string));
    
            var activityIdParameter = activityId.HasValue ?
                new ObjectParameter("ActivityId", activityId) :
                new ObjectParameter("ActivityId", typeof(long));
    
            var typeDataParameter = typeData != null ?
                new ObjectParameter("TypeData", typeData) :
                new ObjectParameter("TypeData", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var rejectedReasonParameter = rejectedReason != null ?
                new ObjectParameter("RejectedReason", rejectedReason) :
                new ObjectParameter("RejectedReason", typeof(string));
    
            var fullbankBranchParameter = fullbankBranch != null ?
                new ObjectParameter("fullbankBranch", fullbankBranch) :
                new ObjectParameter("fullbankBranch", typeof(string));
    
            var bankValidationAdminCountParameter = bankValidationAdminCount.HasValue ?
                new ObjectParameter("BankValidationAdminCount", bankValidationAdminCount) :
                new ObjectParameter("BankValidationAdminCount", typeof(long));
    
            var bankValidationUserCountParameter = bankValidationUserCount.HasValue ?
                new ObjectParameter("BankValidationUserCount", bankValidationUserCount) :
                new ObjectParameter("BankValidationUserCount", typeof(long));
    
            var acValidationAdminCountParameter = acValidationAdminCount.HasValue ?
                new ObjectParameter("AcValidationAdminCount", acValidationAdminCount) :
                new ObjectParameter("AcValidationAdminCount", typeof(long));
    
            var acValidationUserCountParameter = acValidationUserCount.HasValue ?
                new ObjectParameter("AcValidationUserCount", acValidationUserCount) :
                new ObjectParameter("AcValidationUserCount", typeof(long));
    
            var mandateModeParameter = mandateMode != null ?
                new ObjectParameter("MandateMode", mandateMode) :
                new ObjectParameter("MandateMode", typeof(string));
    
            var amountWordsParameter = amountWords != null ?
                new ObjectParameter("AmountWords", amountWords) :
                new ObjectParameter("AmountWords", typeof(string));
    
            var appIdParameter = appId.HasValue ?
                new ObjectParameter("AppId", appId) :
                new ObjectParameter("AppId", typeof(long));
    
            var sponsorBankCodeParameter = sponsorBankCode != null ?
                new ObjectParameter("SponsorBankCode", sponsorBankCode) :
                new ObjectParameter("SponsorBankCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_MandateDirectDebit_Result>("Sp_MandateDirectDebit", queryTypeParameter, entityIdParameter, debitTypeParameter, frequencyParameter, userIdParameter, toDebitParameter, acNoParameter, bankNameParameter, iFSCParameter, mICRParameter, amountRupeesParameter, refrence1Parameter, refrence2Parameter, addr1Parameter, phNumberParameter, emailIdParameter, fromParameter, toParameter, mandateIdParameter, descriptionParameter, statusParameter, nachParameter, rupeesParameter, customer1Parameter, customer2Parameter, customer3Parameter, dateOnMandateParameter, tIPPathParameter, pNGPathParameter, utilityCodeParameter, sponsorCodeParameter, strFromDateParameter, strToDateParameter, strTableParameter, paymentDataXParameter, xmlMandateParameter, filePathParameter, activityIdParameter, typeDataParameter, fromDateParameter, toDateParameter, rejectedReasonParameter, fullbankBranchParameter, bankValidationAdminCountParameter, bankValidationUserCountParameter, acValidationAdminCountParameter, acValidationUserCountParameter, mandateModeParameter, amountWordsParameter, appIdParameter, sponsorBankCodeParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> Sp_MandateFile(string queryType, Nullable<long> userId, Nullable<long> legalId, Nullable<long> proDimensionId, Nullable<long> projectId, string code, string name, Nullable<long> proGroupId, string userType, Nullable<long> refId, Nullable<long> branchId, Nullable<System.DateTime> weekDate)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var legalIdParameter = legalId.HasValue ?
                new ObjectParameter("LegalId", legalId) :
                new ObjectParameter("LegalId", typeof(long));
    
            var proDimensionIdParameter = proDimensionId.HasValue ?
                new ObjectParameter("ProDimensionId", proDimensionId) :
                new ObjectParameter("ProDimensionId", typeof(long));
    
            var projectIdParameter = projectId.HasValue ?
                new ObjectParameter("ProjectId", projectId) :
                new ObjectParameter("ProjectId", typeof(long));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var proGroupIdParameter = proGroupId.HasValue ?
                new ObjectParameter("ProGroupId", proGroupId) :
                new ObjectParameter("ProGroupId", typeof(long));
    
            var userTypeParameter = userType != null ?
                new ObjectParameter("UserType", userType) :
                new ObjectParameter("UserType", typeof(string));
    
            var refIdParameter = refId.HasValue ?
                new ObjectParameter("RefId", refId) :
                new ObjectParameter("RefId", typeof(long));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(long));
    
            var weekDateParameter = weekDate.HasValue ?
                new ObjectParameter("WeekDate", weekDate) :
                new ObjectParameter("WeekDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("Sp_MandateFile", queryTypeParameter, userIdParameter, legalIdParameter, proDimensionIdParameter, projectIdParameter, codeParameter, nameParameter, proGroupIdParameter, userTypeParameter, refIdParameter, branchIdParameter, weekDateParameter);
        }
    
        public virtual ObjectResult<Sp_MandateHistory_Result> Sp_MandateHistory(string queryType, string mandateId, string phoneNumber)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var mandateIdParameter = mandateId != null ?
                new ObjectParameter("MandateId", mandateId) :
                new ObjectParameter("MandateId", typeof(string));
    
            var phoneNumberParameter = phoneNumber != null ?
                new ObjectParameter("PhoneNumber", phoneNumber) :
                new ObjectParameter("PhoneNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_MandateHistory_Result>("Sp_MandateHistory", queryTypeParameter, mandateIdParameter, phoneNumberParameter);
        }
    
        public virtual ObjectResult<string> Sp_MandateRefrence(string queryType, string mandateId, string refrence1, string phoneNumber)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var mandateIdParameter = mandateId != null ?
                new ObjectParameter("MandateId", mandateId) :
                new ObjectParameter("MandateId", typeof(string));
    
            var refrence1Parameter = refrence1 != null ?
                new ObjectParameter("Refrence1", refrence1) :
                new ObjectParameter("Refrence1", typeof(string));
    
            var phoneNumberParameter = phoneNumber != null ?
                new ObjectParameter("PhoneNumber", phoneNumber) :
                new ObjectParameter("PhoneNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("Sp_MandateRefrence", queryTypeParameter, mandateIdParameter, refrence1Parameter, phoneNumberParameter);
        }
    
        public virtual ObjectResult<Sp_MandateReport_Result> Sp_MandateReport(string queryType, Nullable<long> userId, Nullable<long> legalId, Nullable<long> proDimensionId, Nullable<long> projectId, string code, string name, Nullable<long> proGroupId, string userType, Nullable<long> refId, Nullable<long> branchId, Nullable<System.DateTime> weekDate, Nullable<long> mandateId, Nullable<long> entityId, Nullable<long> month, Nullable<long> year)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var legalIdParameter = legalId.HasValue ?
                new ObjectParameter("LegalId", legalId) :
                new ObjectParameter("LegalId", typeof(long));
    
            var proDimensionIdParameter = proDimensionId.HasValue ?
                new ObjectParameter("ProDimensionId", proDimensionId) :
                new ObjectParameter("ProDimensionId", typeof(long));
    
            var projectIdParameter = projectId.HasValue ?
                new ObjectParameter("ProjectId", projectId) :
                new ObjectParameter("ProjectId", typeof(long));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var proGroupIdParameter = proGroupId.HasValue ?
                new ObjectParameter("ProGroupId", proGroupId) :
                new ObjectParameter("ProGroupId", typeof(long));
    
            var userTypeParameter = userType != null ?
                new ObjectParameter("UserType", userType) :
                new ObjectParameter("UserType", typeof(string));
    
            var refIdParameter = refId.HasValue ?
                new ObjectParameter("RefId", refId) :
                new ObjectParameter("RefId", typeof(long));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(long));
    
            var weekDateParameter = weekDate.HasValue ?
                new ObjectParameter("WeekDate", weekDate) :
                new ObjectParameter("WeekDate", typeof(System.DateTime));
    
            var mandateIdParameter = mandateId.HasValue ?
                new ObjectParameter("MandateId", mandateId) :
                new ObjectParameter("MandateId", typeof(long));
    
            var entityIdParameter = entityId.HasValue ?
                new ObjectParameter("EntityId", entityId) :
                new ObjectParameter("EntityId", typeof(long));
    
            var monthParameter = month.HasValue ?
                new ObjectParameter("Month", month) :
                new ObjectParameter("Month", typeof(long));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_MandateReport_Result>("Sp_MandateReport", queryTypeParameter, userIdParameter, legalIdParameter, proDimensionIdParameter, projectIdParameter, codeParameter, nameParameter, proGroupIdParameter, userTypeParameter, refIdParameter, branchIdParameter, weekDateParameter, mandateIdParameter, entityIdParameter, monthParameter, yearParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> Sp_Master(string queryType, Nullable<long> holidayID, Nullable<long> regionID, Nullable<long> rM_Id, string holidayName, Nullable<System.DateTime> holidayDate, Nullable<System.DateTime> createdOn, Nullable<System.DateTime> updatedOn, Nullable<long> userId, Nullable<long> entityId, string regionCode, string regionName, string stateIDs, Nullable<int> iSActive, string dtStatsName, string branchcode, string branchname, string branchifsc, string branchaddr, Nullable<long> branchid, string micr, string rM_Name, string rM_Code, string email, string mobile, Nullable<long> rM_Branch, Nullable<long> rM_Region, Nullable<bool> isDeleted, string password, string passwordKey, Nullable<long> updatedBy, Nullable<long> psmid, string psmcode, string psmname, Nullable<long> branch, Nullable<long> region, string contactno, string emailid, string designationCode, string designationName, Nullable<long> state, string settlementTypeCode, string settlementTypeName, string settlementTypeDesc, Nullable<long> settlementTypeID, Nullable<long> designationID, string documentCode, string documentName, Nullable<long> documentTypeid, Nullable<long> reasonId, string reasonCode, string reasonName, string description, string businessSegmentCode, string businessSegmentName, string businessSegmentDesc, Nullable<long> businessSegmentID, string chargemasterCode, string chargemasterName, string chargemasterDesc, Nullable<long> chargemasterid, Nullable<bool> isDefault)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var holidayIDParameter = holidayID.HasValue ?
                new ObjectParameter("HolidayID", holidayID) :
                new ObjectParameter("HolidayID", typeof(long));
    
            var regionIDParameter = regionID.HasValue ?
                new ObjectParameter("RegionID", regionID) :
                new ObjectParameter("RegionID", typeof(long));
    
            var rM_IdParameter = rM_Id.HasValue ?
                new ObjectParameter("RM_Id", rM_Id) :
                new ObjectParameter("RM_Id", typeof(long));
    
            var holidayNameParameter = holidayName != null ?
                new ObjectParameter("HolidayName", holidayName) :
                new ObjectParameter("HolidayName", typeof(string));
    
            var holidayDateParameter = holidayDate.HasValue ?
                new ObjectParameter("HolidayDate", holidayDate) :
                new ObjectParameter("HolidayDate", typeof(System.DateTime));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var entityIdParameter = entityId.HasValue ?
                new ObjectParameter("EntityId", entityId) :
                new ObjectParameter("EntityId", typeof(long));
    
            var regionCodeParameter = regionCode != null ?
                new ObjectParameter("RegionCode", regionCode) :
                new ObjectParameter("RegionCode", typeof(string));
    
            var regionNameParameter = regionName != null ?
                new ObjectParameter("RegionName", regionName) :
                new ObjectParameter("RegionName", typeof(string));
    
            var stateIDsParameter = stateIDs != null ?
                new ObjectParameter("StateIDs", stateIDs) :
                new ObjectParameter("StateIDs", typeof(string));
    
            var iSActiveParameter = iSActive.HasValue ?
                new ObjectParameter("ISActive", iSActive) :
                new ObjectParameter("ISActive", typeof(int));
    
            var dtStatsNameParameter = dtStatsName != null ?
                new ObjectParameter("dtStatsName", dtStatsName) :
                new ObjectParameter("dtStatsName", typeof(string));
    
            var branchcodeParameter = branchcode != null ?
                new ObjectParameter("branchcode", branchcode) :
                new ObjectParameter("branchcode", typeof(string));
    
            var branchnameParameter = branchname != null ?
                new ObjectParameter("branchname", branchname) :
                new ObjectParameter("branchname", typeof(string));
    
            var branchifscParameter = branchifsc != null ?
                new ObjectParameter("branchifsc", branchifsc) :
                new ObjectParameter("branchifsc", typeof(string));
    
            var branchaddrParameter = branchaddr != null ?
                new ObjectParameter("branchaddr", branchaddr) :
                new ObjectParameter("branchaddr", typeof(string));
    
            var branchidParameter = branchid.HasValue ?
                new ObjectParameter("branchid", branchid) :
                new ObjectParameter("branchid", typeof(long));
    
            var micrParameter = micr != null ?
                new ObjectParameter("Micr", micr) :
                new ObjectParameter("Micr", typeof(string));
    
            var rM_NameParameter = rM_Name != null ?
                new ObjectParameter("RM_Name", rM_Name) :
                new ObjectParameter("RM_Name", typeof(string));
    
            var rM_CodeParameter = rM_Code != null ?
                new ObjectParameter("RM_Code", rM_Code) :
                new ObjectParameter("RM_Code", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var mobileParameter = mobile != null ?
                new ObjectParameter("Mobile", mobile) :
                new ObjectParameter("Mobile", typeof(string));
    
            var rM_BranchParameter = rM_Branch.HasValue ?
                new ObjectParameter("RM_Branch", rM_Branch) :
                new ObjectParameter("RM_Branch", typeof(long));
    
            var rM_RegionParameter = rM_Region.HasValue ?
                new ObjectParameter("RM_Region", rM_Region) :
                new ObjectParameter("RM_Region", typeof(long));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            var passwordKeyParameter = passwordKey != null ?
                new ObjectParameter("passwordKey", passwordKey) :
                new ObjectParameter("passwordKey", typeof(string));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(long));
    
            var psmidParameter = psmid.HasValue ?
                new ObjectParameter("psmid", psmid) :
                new ObjectParameter("psmid", typeof(long));
    
            var psmcodeParameter = psmcode != null ?
                new ObjectParameter("psmcode", psmcode) :
                new ObjectParameter("psmcode", typeof(string));
    
            var psmnameParameter = psmname != null ?
                new ObjectParameter("psmname", psmname) :
                new ObjectParameter("psmname", typeof(string));
    
            var branchParameter = branch.HasValue ?
                new ObjectParameter("branch", branch) :
                new ObjectParameter("branch", typeof(long));
    
            var regionParameter = region.HasValue ?
                new ObjectParameter("region", region) :
                new ObjectParameter("region", typeof(long));
    
            var contactnoParameter = contactno != null ?
                new ObjectParameter("contactno", contactno) :
                new ObjectParameter("contactno", typeof(string));
    
            var emailidParameter = emailid != null ?
                new ObjectParameter("emailid", emailid) :
                new ObjectParameter("emailid", typeof(string));
    
            var designationCodeParameter = designationCode != null ?
                new ObjectParameter("DesignationCode", designationCode) :
                new ObjectParameter("DesignationCode", typeof(string));
    
            var designationNameParameter = designationName != null ?
                new ObjectParameter("DesignationName", designationName) :
                new ObjectParameter("DesignationName", typeof(string));
    
            var stateParameter = state.HasValue ?
                new ObjectParameter("state", state) :
                new ObjectParameter("state", typeof(long));
    
            var settlementTypeCodeParameter = settlementTypeCode != null ?
                new ObjectParameter("SettlementTypeCode", settlementTypeCode) :
                new ObjectParameter("SettlementTypeCode", typeof(string));
    
            var settlementTypeNameParameter = settlementTypeName != null ?
                new ObjectParameter("SettlementTypeName", settlementTypeName) :
                new ObjectParameter("SettlementTypeName", typeof(string));
    
            var settlementTypeDescParameter = settlementTypeDesc != null ?
                new ObjectParameter("SettlementTypeDesc", settlementTypeDesc) :
                new ObjectParameter("SettlementTypeDesc", typeof(string));
    
            var settlementTypeIDParameter = settlementTypeID.HasValue ?
                new ObjectParameter("SettlementTypeID", settlementTypeID) :
                new ObjectParameter("SettlementTypeID", typeof(long));
    
            var designationIDParameter = designationID.HasValue ?
                new ObjectParameter("DesignationID", designationID) :
                new ObjectParameter("DesignationID", typeof(long));
    
            var documentCodeParameter = documentCode != null ?
                new ObjectParameter("DocumentCode", documentCode) :
                new ObjectParameter("DocumentCode", typeof(string));
    
            var documentNameParameter = documentName != null ?
                new ObjectParameter("DocumentName", documentName) :
                new ObjectParameter("DocumentName", typeof(string));
    
            var documentTypeidParameter = documentTypeid.HasValue ?
                new ObjectParameter("DocumentTypeid", documentTypeid) :
                new ObjectParameter("DocumentTypeid", typeof(long));
    
            var reasonIdParameter = reasonId.HasValue ?
                new ObjectParameter("ReasonId", reasonId) :
                new ObjectParameter("ReasonId", typeof(long));
    
            var reasonCodeParameter = reasonCode != null ?
                new ObjectParameter("ReasonCode", reasonCode) :
                new ObjectParameter("ReasonCode", typeof(string));
    
            var reasonNameParameter = reasonName != null ?
                new ObjectParameter("ReasonName", reasonName) :
                new ObjectParameter("ReasonName", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var businessSegmentCodeParameter = businessSegmentCode != null ?
                new ObjectParameter("BusinessSegmentCode", businessSegmentCode) :
                new ObjectParameter("BusinessSegmentCode", typeof(string));
    
            var businessSegmentNameParameter = businessSegmentName != null ?
                new ObjectParameter("BusinessSegmentName", businessSegmentName) :
                new ObjectParameter("BusinessSegmentName", typeof(string));
    
            var businessSegmentDescParameter = businessSegmentDesc != null ?
                new ObjectParameter("BusinessSegmentDesc", businessSegmentDesc) :
                new ObjectParameter("BusinessSegmentDesc", typeof(string));
    
            var businessSegmentIDParameter = businessSegmentID.HasValue ?
                new ObjectParameter("BusinessSegmentID", businessSegmentID) :
                new ObjectParameter("BusinessSegmentID", typeof(long));
    
            var chargemasterCodeParameter = chargemasterCode != null ?
                new ObjectParameter("ChargemasterCode", chargemasterCode) :
                new ObjectParameter("ChargemasterCode", typeof(string));
    
            var chargemasterNameParameter = chargemasterName != null ?
                new ObjectParameter("ChargemasterName", chargemasterName) :
                new ObjectParameter("ChargemasterName", typeof(string));
    
            var chargemasterDescParameter = chargemasterDesc != null ?
                new ObjectParameter("ChargemasterDesc", chargemasterDesc) :
                new ObjectParameter("ChargemasterDesc", typeof(string));
    
            var chargemasteridParameter = chargemasterid.HasValue ?
                new ObjectParameter("Chargemasterid", chargemasterid) :
                new ObjectParameter("Chargemasterid", typeof(long));
    
            var isDefaultParameter = isDefault.HasValue ?
                new ObjectParameter("IsDefault", isDefault) :
                new ObjectParameter("IsDefault", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("Sp_Master", queryTypeParameter, holidayIDParameter, regionIDParameter, rM_IdParameter, holidayNameParameter, holidayDateParameter, createdOnParameter, updatedOnParameter, userIdParameter, entityIdParameter, regionCodeParameter, regionNameParameter, stateIDsParameter, iSActiveParameter, dtStatsNameParameter, branchcodeParameter, branchnameParameter, branchifscParameter, branchaddrParameter, branchidParameter, micrParameter, rM_NameParameter, rM_CodeParameter, emailParameter, mobileParameter, rM_BranchParameter, rM_RegionParameter, isDeletedParameter, passwordParameter, passwordKeyParameter, updatedByParameter, psmidParameter, psmcodeParameter, psmnameParameter, branchParameter, regionParameter, contactnoParameter, emailidParameter, designationCodeParameter, designationNameParameter, stateParameter, settlementTypeCodeParameter, settlementTypeNameParameter, settlementTypeDescParameter, settlementTypeIDParameter, designationIDParameter, documentCodeParameter, documentNameParameter, documentTypeidParameter, reasonIdParameter, reasonCodeParameter, reasonNameParameter, descriptionParameter, businessSegmentCodeParameter, businessSegmentNameParameter, businessSegmentDescParameter, businessSegmentIDParameter, chargemasterCodeParameter, chargemasterNameParameter, chargemasterDescParameter, chargemasteridParameter, isDefaultParameter);
        }
    
        public virtual ObjectResult<Sp_MobileUploadImageName_Result> Sp_MobileUploadImageName(string queryType, string imagePath, Nullable<long> mandateId)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var imagePathParameter = imagePath != null ?
                new ObjectParameter("ImagePath", imagePath) :
                new ObjectParameter("ImagePath", typeof(string));
    
            var mandateIdParameter = mandateId.HasValue ?
                new ObjectParameter("MandateId", mandateId) :
                new ObjectParameter("MandateId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_MobileUploadImageName_Result>("Sp_MobileUploadImageName", queryTypeParameter, imagePathParameter, mandateIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_MobileUserLogin(string queryType, Nullable<long> mobileNo, Nullable<long> mob)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var mobileNoParameter = mobileNo.HasValue ?
                new ObjectParameter("MobileNo", mobileNo) :
                new ObjectParameter("MobileNo", typeof(long));
    
            var mobParameter = mob.HasValue ?
                new ObjectParameter("Mob", mob) :
                new ObjectParameter("Mob", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_MobileUserLogin", queryTypeParameter, mobileNoParameter, mobParameter);
        }
    
        public virtual ObjectResult<sp_OTP_Result> sp_OTP(string queryType, Nullable<long> mandateId, string enachMessageId, string mobileNo, Nullable<long> mainMandateId, string oTP, string adharno, Nullable<long> userId, Nullable<long> entityId)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var mandateIdParameter = mandateId.HasValue ?
                new ObjectParameter("MandateId", mandateId) :
                new ObjectParameter("MandateId", typeof(long));
    
            var enachMessageIdParameter = enachMessageId != null ?
                new ObjectParameter("EnachMessageId", enachMessageId) :
                new ObjectParameter("EnachMessageId", typeof(string));
    
            var mobileNoParameter = mobileNo != null ?
                new ObjectParameter("MobileNo", mobileNo) :
                new ObjectParameter("MobileNo", typeof(string));
    
            var mainMandateIdParameter = mainMandateId.HasValue ?
                new ObjectParameter("MainMandateId", mainMandateId) :
                new ObjectParameter("MainMandateId", typeof(long));
    
            var oTPParameter = oTP != null ?
                new ObjectParameter("OTP", oTP) :
                new ObjectParameter("OTP", typeof(string));
    
            var adharnoParameter = adharno != null ?
                new ObjectParameter("Adharno", adharno) :
                new ObjectParameter("Adharno", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var entityIdParameter = entityId.HasValue ?
                new ObjectParameter("EntityId", entityId) :
                new ObjectParameter("EntityId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_OTP_Result>("sp_OTP", queryTypeParameter, mandateIdParameter, enachMessageIdParameter, mobileNoParameter, mainMandateIdParameter, oTPParameter, adharnoParameter, userIdParameter, entityIdParameter);
        }
    
        public virtual ObjectResult<sp_Payment_Result> sp_Payment(string queryType, Nullable<long> userId, string beniACNo, string beniAcType, string beniAmount, string beniIFSC, string chkSum, Nullable<long> entityId, string filler1, string filler2, string type, string filler3, string filler4, string filler5, Nullable<long> mandateId, string merchantId, string messageCode, string remarks, Nullable<long> requestDateTime, string requestType, string traceNo, string bankRefNo, string beniName, string errorReason, string responseCode, string rRN, string msg, string paymentReqXml, string paymentResponseXML, Nullable<long> activityId, string iFSC, string tEUHID, Nullable<int> accountValCountPerDay)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var beniACNoParameter = beniACNo != null ?
                new ObjectParameter("BeniACNo", beniACNo) :
                new ObjectParameter("BeniACNo", typeof(string));
    
            var beniAcTypeParameter = beniAcType != null ?
                new ObjectParameter("BeniAcType", beniAcType) :
                new ObjectParameter("BeniAcType", typeof(string));
    
            var beniAmountParameter = beniAmount != null ?
                new ObjectParameter("BeniAmount", beniAmount) :
                new ObjectParameter("BeniAmount", typeof(string));
    
            var beniIFSCParameter = beniIFSC != null ?
                new ObjectParameter("BeniIFSC", beniIFSC) :
                new ObjectParameter("BeniIFSC", typeof(string));
    
            var chkSumParameter = chkSum != null ?
                new ObjectParameter("ChkSum", chkSum) :
                new ObjectParameter("ChkSum", typeof(string));
    
            var entityIdParameter = entityId.HasValue ?
                new ObjectParameter("EntityId", entityId) :
                new ObjectParameter("EntityId", typeof(long));
    
            var filler1Parameter = filler1 != null ?
                new ObjectParameter("Filler1", filler1) :
                new ObjectParameter("Filler1", typeof(string));
    
            var filler2Parameter = filler2 != null ?
                new ObjectParameter("Filler2", filler2) :
                new ObjectParameter("Filler2", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var filler3Parameter = filler3 != null ?
                new ObjectParameter("Filler3", filler3) :
                new ObjectParameter("Filler3", typeof(string));
    
            var filler4Parameter = filler4 != null ?
                new ObjectParameter("Filler4", filler4) :
                new ObjectParameter("Filler4", typeof(string));
    
            var filler5Parameter = filler5 != null ?
                new ObjectParameter("Filler5", filler5) :
                new ObjectParameter("Filler5", typeof(string));
    
            var mandateIdParameter = mandateId.HasValue ?
                new ObjectParameter("MandateId", mandateId) :
                new ObjectParameter("MandateId", typeof(long));
    
            var merchantIdParameter = merchantId != null ?
                new ObjectParameter("MerchantId", merchantId) :
                new ObjectParameter("MerchantId", typeof(string));
    
            var messageCodeParameter = messageCode != null ?
                new ObjectParameter("MessageCode", messageCode) :
                new ObjectParameter("MessageCode", typeof(string));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var requestDateTimeParameter = requestDateTime.HasValue ?
                new ObjectParameter("RequestDateTime", requestDateTime) :
                new ObjectParameter("RequestDateTime", typeof(long));
    
            var requestTypeParameter = requestType != null ?
                new ObjectParameter("RequestType", requestType) :
                new ObjectParameter("RequestType", typeof(string));
    
            var traceNoParameter = traceNo != null ?
                new ObjectParameter("TraceNo", traceNo) :
                new ObjectParameter("TraceNo", typeof(string));
    
            var bankRefNoParameter = bankRefNo != null ?
                new ObjectParameter("BankRefNo", bankRefNo) :
                new ObjectParameter("BankRefNo", typeof(string));
    
            var beniNameParameter = beniName != null ?
                new ObjectParameter("BeniName", beniName) :
                new ObjectParameter("BeniName", typeof(string));
    
            var errorReasonParameter = errorReason != null ?
                new ObjectParameter("ErrorReason", errorReason) :
                new ObjectParameter("ErrorReason", typeof(string));
    
            var responseCodeParameter = responseCode != null ?
                new ObjectParameter("ResponseCode", responseCode) :
                new ObjectParameter("ResponseCode", typeof(string));
    
            var rRNParameter = rRN != null ?
                new ObjectParameter("RRN", rRN) :
                new ObjectParameter("RRN", typeof(string));
    
            var msgParameter = msg != null ?
                new ObjectParameter("msg", msg) :
                new ObjectParameter("msg", typeof(string));
    
            var paymentReqXmlParameter = paymentReqXml != null ?
                new ObjectParameter("PaymentReqXml", paymentReqXml) :
                new ObjectParameter("PaymentReqXml", typeof(string));
    
            var paymentResponseXMLParameter = paymentResponseXML != null ?
                new ObjectParameter("PaymentResponseXML", paymentResponseXML) :
                new ObjectParameter("PaymentResponseXML", typeof(string));
    
            var activityIdParameter = activityId.HasValue ?
                new ObjectParameter("ActivityId", activityId) :
                new ObjectParameter("ActivityId", typeof(long));
    
            var iFSCParameter = iFSC != null ?
                new ObjectParameter("IFSC", iFSC) :
                new ObjectParameter("IFSC", typeof(string));
    
            var tEUHIDParameter = tEUHID != null ?
                new ObjectParameter("TEUHID", tEUHID) :
                new ObjectParameter("TEUHID", typeof(string));
    
            var accountValCountPerDayParameter = accountValCountPerDay.HasValue ?
                new ObjectParameter("AccountValCountPerDay", accountValCountPerDay) :
                new ObjectParameter("AccountValCountPerDay", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Payment_Result>("sp_Payment", queryTypeParameter, userIdParameter, beniACNoParameter, beniAcTypeParameter, beniAmountParameter, beniIFSCParameter, chkSumParameter, entityIdParameter, filler1Parameter, filler2Parameter, typeParameter, filler3Parameter, filler4Parameter, filler5Parameter, mandateIdParameter, merchantIdParameter, messageCodeParameter, remarksParameter, requestDateTimeParameter, requestTypeParameter, traceNoParameter, bankRefNoParameter, beniNameParameter, errorReasonParameter, responseCodeParameter, rRNParameter, msgParameter, paymentReqXmlParameter, paymentResponseXMLParameter, activityIdParameter, iFSCParameter, tEUHIDParameter, accountValCountPerDayParameter);
        }
    
        public virtual ObjectResult<sp_PostmandateStatus_Result> sp_PostmandateStatus(string queryType, string xmlXlData, string corporateName, Nullable<long> dBId, Nullable<long> year, Nullable<long> month)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var xmlXlDataParameter = xmlXlData != null ?
                new ObjectParameter("XmlXlData", xmlXlData) :
                new ObjectParameter("XmlXlData", typeof(string));
    
            var corporateNameParameter = corporateName != null ?
                new ObjectParameter("CorporateName", corporateName) :
                new ObjectParameter("CorporateName", typeof(string));
    
            var dBIdParameter = dBId.HasValue ?
                new ObjectParameter("DBId", dBId) :
                new ObjectParameter("DBId", typeof(long));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(long));
    
            var monthParameter = month.HasValue ?
                new ObjectParameter("Month", month) :
                new ObjectParameter("Month", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_PostmandateStatus_Result>("sp_PostmandateStatus", queryTypeParameter, xmlXlDataParameter, corporateNameParameter, dBIdParameter, yearParameter, monthParameter);
        }
    
        public virtual ObjectResult<Sp_Presenment_Result> Sp_Presenment(string queryType, string bankName, Nullable<int> entityID, Nullable<int> userID, string refrence1, string uMRN, string year, string fileno, string username, string presentmentDate, Nullable<System.DateTime> createdOn, Nullable<System.DateTime> date, string xmlDimension, string customer1, string mandateId, Nullable<long> transheaderId, Nullable<int> bank_ID, string presDate)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var bankNameParameter = bankName != null ?
                new ObjectParameter("BankName", bankName) :
                new ObjectParameter("BankName", typeof(string));
    
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var refrence1Parameter = refrence1 != null ?
                new ObjectParameter("Refrence1", refrence1) :
                new ObjectParameter("Refrence1", typeof(string));
    
            var uMRNParameter = uMRN != null ?
                new ObjectParameter("UMRN", uMRN) :
                new ObjectParameter("UMRN", typeof(string));
    
            var yearParameter = year != null ?
                new ObjectParameter("year", year) :
                new ObjectParameter("year", typeof(string));
    
            var filenoParameter = fileno != null ?
                new ObjectParameter("Fileno", fileno) :
                new ObjectParameter("Fileno", typeof(string));
    
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            var presentmentDateParameter = presentmentDate != null ?
                new ObjectParameter("PresentmentDate", presentmentDate) :
                new ObjectParameter("PresentmentDate", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var xmlDimensionParameter = xmlDimension != null ?
                new ObjectParameter("XmlDimension", xmlDimension) :
                new ObjectParameter("XmlDimension", typeof(string));
    
            var customer1Parameter = customer1 != null ?
                new ObjectParameter("customer1", customer1) :
                new ObjectParameter("customer1", typeof(string));
    
            var mandateIdParameter = mandateId != null ?
                new ObjectParameter("MandateId", mandateId) :
                new ObjectParameter("MandateId", typeof(string));
    
            var transheaderIdParameter = transheaderId.HasValue ?
                new ObjectParameter("TransheaderId", transheaderId) :
                new ObjectParameter("TransheaderId", typeof(long));
    
            var bank_IDParameter = bank_ID.HasValue ?
                new ObjectParameter("Bank_ID", bank_ID) :
                new ObjectParameter("Bank_ID", typeof(int));
    
            var presDateParameter = presDate != null ?
                new ObjectParameter("PresDate", presDate) :
                new ObjectParameter("PresDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_Presenment_Result>("Sp_Presenment", queryTypeParameter, bankNameParameter, entityIDParameter, userIDParameter, refrence1Parameter, uMRNParameter, yearParameter, filenoParameter, usernameParameter, presentmentDateParameter, createdOnParameter, dateParameter, xmlDimensionParameter, customer1Parameter, mandateIdParameter, transheaderIdParameter, bank_IDParameter, presDateParameter);
        }
    
        public virtual int Sp_PresentMentWebApi(string queryType, Nullable<long> appId, string activityId, string fileNumber, string bankcode, string presentmentDate, Nullable<bool> activityType, Nullable<long> requestType, string sINGLEUMRN, string uMRNData, string enitityMarchantKey, Nullable<long> transheaderId)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var appIdParameter = appId.HasValue ?
                new ObjectParameter("AppId", appId) :
                new ObjectParameter("AppId", typeof(long));
    
            var activityIdParameter = activityId != null ?
                new ObjectParameter("ActivityId", activityId) :
                new ObjectParameter("ActivityId", typeof(string));
    
            var fileNumberParameter = fileNumber != null ?
                new ObjectParameter("FileNumber", fileNumber) :
                new ObjectParameter("FileNumber", typeof(string));
    
            var bankcodeParameter = bankcode != null ?
                new ObjectParameter("Bankcode", bankcode) :
                new ObjectParameter("Bankcode", typeof(string));
    
            var presentmentDateParameter = presentmentDate != null ?
                new ObjectParameter("PresentmentDate", presentmentDate) :
                new ObjectParameter("PresentmentDate", typeof(string));
    
            var activityTypeParameter = activityType.HasValue ?
                new ObjectParameter("ActivityType", activityType) :
                new ObjectParameter("ActivityType", typeof(bool));
    
            var requestTypeParameter = requestType.HasValue ?
                new ObjectParameter("RequestType", requestType) :
                new ObjectParameter("RequestType", typeof(long));
    
            var sINGLEUMRNParameter = sINGLEUMRN != null ?
                new ObjectParameter("SINGLEUMRN", sINGLEUMRN) :
                new ObjectParameter("SINGLEUMRN", typeof(string));
    
            var uMRNDataParameter = uMRNData != null ?
                new ObjectParameter("UMRNData", uMRNData) :
                new ObjectParameter("UMRNData", typeof(string));
    
            var enitityMarchantKeyParameter = enitityMarchantKey != null ?
                new ObjectParameter("EnitityMarchantKey", enitityMarchantKey) :
                new ObjectParameter("EnitityMarchantKey", typeof(string));
    
            var transheaderIdParameter = transheaderId.HasValue ?
                new ObjectParameter("TransheaderId", transheaderId) :
                new ObjectParameter("TransheaderId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_PresentMentWebApi", queryTypeParameter, appIdParameter, activityIdParameter, fileNumberParameter, bankcodeParameter, presentmentDateParameter, activityTypeParameter, requestTypeParameter, sINGLEUMRNParameter, uMRNDataParameter, enitityMarchantKeyParameter, transheaderIdParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> Sp_ProcessMandate(string queryType, string xmlXlData)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var xmlXlDataParameter = xmlXlData != null ?
                new ObjectParameter("XmlXlData", xmlXlData) :
                new ObjectParameter("XmlXlData", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("Sp_ProcessMandate", queryTypeParameter, xmlXlDataParameter);
        }
    
        public virtual ObjectResult<Sp_PSMMaster_Result> Sp_PSMMaster(string queryType, Nullable<long> psmid, string psmcode, string psmname, Nullable<long> branch, Nullable<long> region, string contactno, string emailid, Nullable<bool> isActive, Nullable<bool> isDeleted, string password, string passwordkey, Nullable<long> entityId, Nullable<long> userId)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var psmidParameter = psmid.HasValue ?
                new ObjectParameter("psmid", psmid) :
                new ObjectParameter("psmid", typeof(long));
    
            var psmcodeParameter = psmcode != null ?
                new ObjectParameter("psmcode", psmcode) :
                new ObjectParameter("psmcode", typeof(string));
    
            var psmnameParameter = psmname != null ?
                new ObjectParameter("psmname", psmname) :
                new ObjectParameter("psmname", typeof(string));
    
            var branchParameter = branch.HasValue ?
                new ObjectParameter("branch", branch) :
                new ObjectParameter("branch", typeof(long));
    
            var regionParameter = region.HasValue ?
                new ObjectParameter("region", region) :
                new ObjectParameter("region", typeof(long));
    
            var contactnoParameter = contactno != null ?
                new ObjectParameter("contactno", contactno) :
                new ObjectParameter("contactno", typeof(string));
    
            var emailidParameter = emailid != null ?
                new ObjectParameter("emailid", emailid) :
                new ObjectParameter("emailid", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            var passwordkeyParameter = passwordkey != null ?
                new ObjectParameter("passwordkey", passwordkey) :
                new ObjectParameter("passwordkey", typeof(string));
    
            var entityIdParameter = entityId.HasValue ?
                new ObjectParameter("EntityId", entityId) :
                new ObjectParameter("EntityId", typeof(long));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_PSMMaster_Result>("Sp_PSMMaster", queryTypeParameter, psmidParameter, psmcodeParameter, psmnameParameter, branchParameter, regionParameter, contactnoParameter, emailidParameter, isActiveParameter, isDeletedParameter, passwordParameter, passwordkeyParameter, entityIdParameter, userIdParameter);
        }
    
        public virtual ObjectResult<sp_QbackRequest_Result> sp_QbackRequest(string queryType, Nullable<long> userId, string beniACNo, string beniAcType, string beniAmount, string beniIFSC, string chkSum, Nullable<long> entityId, string type, Nullable<long> mandateId, string merchantId, string messageCode, string remarks, Nullable<long> requestDateTime, string requestType, string traceNo, string oldTraceNo, string bankRefNo, string beniName, string errorReason, string responseCode, string rRN, string msg, string paymentReqXml, string paymentResponseXML, Nullable<long> activityId, Nullable<long> oldActivityId, string iFSC, string activityName, Nullable<decimal> amount, string authzStatus, string responseDesc)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var beniACNoParameter = beniACNo != null ?
                new ObjectParameter("BeniACNo", beniACNo) :
                new ObjectParameter("BeniACNo", typeof(string));
    
            var beniAcTypeParameter = beniAcType != null ?
                new ObjectParameter("BeniAcType", beniAcType) :
                new ObjectParameter("BeniAcType", typeof(string));
    
            var beniAmountParameter = beniAmount != null ?
                new ObjectParameter("BeniAmount", beniAmount) :
                new ObjectParameter("BeniAmount", typeof(string));
    
            var beniIFSCParameter = beniIFSC != null ?
                new ObjectParameter("BeniIFSC", beniIFSC) :
                new ObjectParameter("BeniIFSC", typeof(string));
    
            var chkSumParameter = chkSum != null ?
                new ObjectParameter("ChkSum", chkSum) :
                new ObjectParameter("ChkSum", typeof(string));
    
            var entityIdParameter = entityId.HasValue ?
                new ObjectParameter("EntityId", entityId) :
                new ObjectParameter("EntityId", typeof(long));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var mandateIdParameter = mandateId.HasValue ?
                new ObjectParameter("MandateId", mandateId) :
                new ObjectParameter("MandateId", typeof(long));
    
            var merchantIdParameter = merchantId != null ?
                new ObjectParameter("MerchantId", merchantId) :
                new ObjectParameter("MerchantId", typeof(string));
    
            var messageCodeParameter = messageCode != null ?
                new ObjectParameter("MessageCode", messageCode) :
                new ObjectParameter("MessageCode", typeof(string));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var requestDateTimeParameter = requestDateTime.HasValue ?
                new ObjectParameter("RequestDateTime", requestDateTime) :
                new ObjectParameter("RequestDateTime", typeof(long));
    
            var requestTypeParameter = requestType != null ?
                new ObjectParameter("RequestType", requestType) :
                new ObjectParameter("RequestType", typeof(string));
    
            var traceNoParameter = traceNo != null ?
                new ObjectParameter("TraceNo", traceNo) :
                new ObjectParameter("TraceNo", typeof(string));
    
            var oldTraceNoParameter = oldTraceNo != null ?
                new ObjectParameter("OldTraceNo", oldTraceNo) :
                new ObjectParameter("OldTraceNo", typeof(string));
    
            var bankRefNoParameter = bankRefNo != null ?
                new ObjectParameter("BankRefNo", bankRefNo) :
                new ObjectParameter("BankRefNo", typeof(string));
    
            var beniNameParameter = beniName != null ?
                new ObjectParameter("BeniName", beniName) :
                new ObjectParameter("BeniName", typeof(string));
    
            var errorReasonParameter = errorReason != null ?
                new ObjectParameter("ErrorReason", errorReason) :
                new ObjectParameter("ErrorReason", typeof(string));
    
            var responseCodeParameter = responseCode != null ?
                new ObjectParameter("ResponseCode", responseCode) :
                new ObjectParameter("ResponseCode", typeof(string));
    
            var rRNParameter = rRN != null ?
                new ObjectParameter("RRN", rRN) :
                new ObjectParameter("RRN", typeof(string));
    
            var msgParameter = msg != null ?
                new ObjectParameter("msg", msg) :
                new ObjectParameter("msg", typeof(string));
    
            var paymentReqXmlParameter = paymentReqXml != null ?
                new ObjectParameter("PaymentReqXml", paymentReqXml) :
                new ObjectParameter("PaymentReqXml", typeof(string));
    
            var paymentResponseXMLParameter = paymentResponseXML != null ?
                new ObjectParameter("PaymentResponseXML", paymentResponseXML) :
                new ObjectParameter("PaymentResponseXML", typeof(string));
    
            var activityIdParameter = activityId.HasValue ?
                new ObjectParameter("ActivityId", activityId) :
                new ObjectParameter("ActivityId", typeof(long));
    
            var oldActivityIdParameter = oldActivityId.HasValue ?
                new ObjectParameter("oldActivityId", oldActivityId) :
                new ObjectParameter("oldActivityId", typeof(long));
    
            var iFSCParameter = iFSC != null ?
                new ObjectParameter("IFSC", iFSC) :
                new ObjectParameter("IFSC", typeof(string));
    
            var activityNameParameter = activityName != null ?
                new ObjectParameter("ActivityName", activityName) :
                new ObjectParameter("ActivityName", typeof(string));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("amount", amount) :
                new ObjectParameter("amount", typeof(decimal));
    
            var authzStatusParameter = authzStatus != null ?
                new ObjectParameter("AuthzStatus", authzStatus) :
                new ObjectParameter("AuthzStatus", typeof(string));
    
            var responseDescParameter = responseDesc != null ?
                new ObjectParameter("ResponseDesc", responseDesc) :
                new ObjectParameter("ResponseDesc", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_QbackRequest_Result>("sp_QbackRequest", queryTypeParameter, userIdParameter, beniACNoParameter, beniAcTypeParameter, beniAmountParameter, beniIFSCParameter, chkSumParameter, entityIdParameter, typeParameter, mandateIdParameter, merchantIdParameter, messageCodeParameter, remarksParameter, requestDateTimeParameter, requestTypeParameter, traceNoParameter, oldTraceNoParameter, bankRefNoParameter, beniNameParameter, errorReasonParameter, responseCodeParameter, rRNParameter, msgParameter, paymentReqXmlParameter, paymentResponseXMLParameter, activityIdParameter, oldActivityIdParameter, iFSCParameter, activityNameParameter, amountParameter, authzStatusParameter, responseDescParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> Sp_RBLBranchMaster(string queryType, string branchcode, string branchname, string branchifsc, string branchaddr, Nullable<long> branchid, Nullable<long> entityId, Nullable<long> userId, Nullable<bool> isActive, Nullable<long> state)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var branchcodeParameter = branchcode != null ?
                new ObjectParameter("branchcode", branchcode) :
                new ObjectParameter("branchcode", typeof(string));
    
            var branchnameParameter = branchname != null ?
                new ObjectParameter("branchname", branchname) :
                new ObjectParameter("branchname", typeof(string));
    
            var branchifscParameter = branchifsc != null ?
                new ObjectParameter("branchifsc", branchifsc) :
                new ObjectParameter("branchifsc", typeof(string));
    
            var branchaddrParameter = branchaddr != null ?
                new ObjectParameter("branchaddr", branchaddr) :
                new ObjectParameter("branchaddr", typeof(string));
    
            var branchidParameter = branchid.HasValue ?
                new ObjectParameter("branchid", branchid) :
                new ObjectParameter("branchid", typeof(long));
    
            var entityIdParameter = entityId.HasValue ?
                new ObjectParameter("EntityId", entityId) :
                new ObjectParameter("EntityId", typeof(long));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var stateParameter = state.HasValue ?
                new ObjectParameter("state", state) :
                new ObjectParameter("state", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("Sp_RBLBranchMaster", queryTypeParameter, branchcodeParameter, branchnameParameter, branchifscParameter, branchaddrParameter, branchidParameter, entityIdParameter, userIdParameter, isActiveParameter, stateParameter);
        }
    
        public virtual ObjectResult<SP_Report_Result> SP_Report(string queryType, Nullable<long> userId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<long> ddlUserId, Nullable<long> appID, string corporateName, Nullable<int> dBID, Nullable<long> reportMapID, Nullable<int> month, Nullable<int> year, string mandateType)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var ddlUserIdParameter = ddlUserId.HasValue ?
                new ObjectParameter("ddlUserId", ddlUserId) :
                new ObjectParameter("ddlUserId", typeof(long));
    
            var appIDParameter = appID.HasValue ?
                new ObjectParameter("AppID", appID) :
                new ObjectParameter("AppID", typeof(long));
    
            var corporateNameParameter = corporateName != null ?
                new ObjectParameter("CorporateName", corporateName) :
                new ObjectParameter("CorporateName", typeof(string));
    
            var dBIDParameter = dBID.HasValue ?
                new ObjectParameter("DBID", dBID) :
                new ObjectParameter("DBID", typeof(int));
    
            var reportMapIDParameter = reportMapID.HasValue ?
                new ObjectParameter("ReportMapID", reportMapID) :
                new ObjectParameter("ReportMapID", typeof(long));
    
            var monthParameter = month.HasValue ?
                new ObjectParameter("Month", month) :
                new ObjectParameter("Month", typeof(int));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            var mandateTypeParameter = mandateType != null ?
                new ObjectParameter("MandateType", mandateType) :
                new ObjectParameter("MandateType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_Report_Result>("SP_Report", queryTypeParameter, userIdParameter, fromDateParameter, toDateParameter, ddlUserIdParameter, appIDParameter, corporateNameParameter, dBIDParameter, reportMapIDParameter, monthParameter, yearParameter, mandateTypeParameter);
        }
    
        public virtual ObjectResult<Sp_RMMaster_Result> Sp_RMMaster(string queryType, Nullable<long> rM_Id, Nullable<long> entityId, string rM_Name, string rM_Code, string email, string mobile, Nullable<long> rM_Branch, Nullable<long> rM_Region, Nullable<long> regionID, Nullable<long> userId, Nullable<bool> isActive, Nullable<bool> isDeleted, string password, string passwordKey, Nullable<long> updatedBy, Nullable<int> designation)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var rM_IdParameter = rM_Id.HasValue ?
                new ObjectParameter("RM_Id", rM_Id) :
                new ObjectParameter("RM_Id", typeof(long));
    
            var entityIdParameter = entityId.HasValue ?
                new ObjectParameter("EntityId", entityId) :
                new ObjectParameter("EntityId", typeof(long));
    
            var rM_NameParameter = rM_Name != null ?
                new ObjectParameter("RM_Name", rM_Name) :
                new ObjectParameter("RM_Name", typeof(string));
    
            var rM_CodeParameter = rM_Code != null ?
                new ObjectParameter("RM_Code", rM_Code) :
                new ObjectParameter("RM_Code", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var mobileParameter = mobile != null ?
                new ObjectParameter("Mobile", mobile) :
                new ObjectParameter("Mobile", typeof(string));
    
            var rM_BranchParameter = rM_Branch.HasValue ?
                new ObjectParameter("RM_Branch", rM_Branch) :
                new ObjectParameter("RM_Branch", typeof(long));
    
            var rM_RegionParameter = rM_Region.HasValue ?
                new ObjectParameter("RM_Region", rM_Region) :
                new ObjectParameter("RM_Region", typeof(long));
    
            var regionIDParameter = regionID.HasValue ?
                new ObjectParameter("RegionID", regionID) :
                new ObjectParameter("RegionID", typeof(long));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            var passwordKeyParameter = passwordKey != null ?
                new ObjectParameter("passwordKey", passwordKey) :
                new ObjectParameter("passwordKey", typeof(string));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(long));
    
            var designationParameter = designation.HasValue ?
                new ObjectParameter("Designation", designation) :
                new ObjectParameter("Designation", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_RMMaster_Result>("Sp_RMMaster", queryTypeParameter, rM_IdParameter, entityIdParameter, rM_NameParameter, rM_CodeParameter, emailParameter, mobileParameter, rM_BranchParameter, rM_RegionParameter, regionIDParameter, userIdParameter, isActiveParameter, isDeletedParameter, passwordParameter, passwordKeyParameter, updatedByParameter, designationParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> Sp_RoleMaster(string queryType, Nullable<long> roleid, string rolecode, string rolename, string description, Nullable<long> userId, Nullable<long> linkId, string xmlMappeddata, Nullable<long> entityId)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var roleidParameter = roleid.HasValue ?
                new ObjectParameter("roleid", roleid) :
                new ObjectParameter("roleid", typeof(long));
    
            var rolecodeParameter = rolecode != null ?
                new ObjectParameter("rolecode", rolecode) :
                new ObjectParameter("rolecode", typeof(string));
    
            var rolenameParameter = rolename != null ?
                new ObjectParameter("rolename", rolename) :
                new ObjectParameter("rolename", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var linkIdParameter = linkId.HasValue ?
                new ObjectParameter("LinkId", linkId) :
                new ObjectParameter("LinkId", typeof(long));
    
            var xmlMappeddataParameter = xmlMappeddata != null ?
                new ObjectParameter("XmlMappeddata", xmlMappeddata) :
                new ObjectParameter("XmlMappeddata", typeof(string));
    
            var entityIdParameter = entityId.HasValue ?
                new ObjectParameter("EntityId", entityId) :
                new ObjectParameter("EntityId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("Sp_RoleMaster", queryTypeParameter, roleidParameter, rolecodeParameter, rolenameParameter, descriptionParameter, userIdParameter, linkIdParameter, xmlMappeddataParameter, entityIdParameter);
        }
    
        public virtual ObjectResult<Sp_SelectForChangeRefrence_Result> Sp_SelectForChangeRefrence(string refrence1)
        {
            var refrence1Parameter = refrence1 != null ?
                new ObjectParameter("Refrence1", refrence1) :
                new ObjectParameter("Refrence1", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_SelectForChangeRefrence_Result>("Sp_SelectForChangeRefrence", refrence1Parameter);
        }
    
        public virtual ObjectResult<string> Sp_SelectForMobileRefrence(string phoneNumber)
        {
            var phoneNumberParameter = phoneNumber != null ?
                new ObjectParameter("PhoneNumber", phoneNumber) :
                new ObjectParameter("PhoneNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("Sp_SelectForMobileRefrence", phoneNumberParameter);
        }
    
        public virtual ObjectResult<Sp_SelectForPhysical_Result> Sp_SelectForPhysical(Nullable<int> mandateId)
        {
            var mandateIdParameter = mandateId.HasValue ?
                new ObjectParameter("MandateId", mandateId) :
                new ObjectParameter("MandateId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_SelectForPhysical_Result>("Sp_SelectForPhysical", mandateIdParameter);
        }
    
        public virtual int Sp_SendEmail(string queryType, string mandateId, string refNo, string fromMail, string toMail, string isSent, string reason, Nullable<long> emailCount, Nullable<long> smsCount, string activity, string webAppUrl, string encodedMandateID, string encodedRefNo)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var mandateIdParameter = mandateId != null ?
                new ObjectParameter("MandateId", mandateId) :
                new ObjectParameter("MandateId", typeof(string));
    
            var refNoParameter = refNo != null ?
                new ObjectParameter("RefNo", refNo) :
                new ObjectParameter("RefNo", typeof(string));
    
            var fromMailParameter = fromMail != null ?
                new ObjectParameter("FromMail", fromMail) :
                new ObjectParameter("FromMail", typeof(string));
    
            var toMailParameter = toMail != null ?
                new ObjectParameter("ToMail", toMail) :
                new ObjectParameter("ToMail", typeof(string));
    
            var isSentParameter = isSent != null ?
                new ObjectParameter("IsSent", isSent) :
                new ObjectParameter("IsSent", typeof(string));
    
            var reasonParameter = reason != null ?
                new ObjectParameter("Reason", reason) :
                new ObjectParameter("Reason", typeof(string));
    
            var emailCountParameter = emailCount.HasValue ?
                new ObjectParameter("EmailCount", emailCount) :
                new ObjectParameter("EmailCount", typeof(long));
    
            var smsCountParameter = smsCount.HasValue ?
                new ObjectParameter("SmsCount", smsCount) :
                new ObjectParameter("SmsCount", typeof(long));
    
            var activityParameter = activity != null ?
                new ObjectParameter("Activity", activity) :
                new ObjectParameter("Activity", typeof(string));
    
            var webAppUrlParameter = webAppUrl != null ?
                new ObjectParameter("WebAppUrl", webAppUrl) :
                new ObjectParameter("WebAppUrl", typeof(string));
    
            var encodedMandateIDParameter = encodedMandateID != null ?
                new ObjectParameter("EncodedMandateID", encodedMandateID) :
                new ObjectParameter("EncodedMandateID", typeof(string));
    
            var encodedRefNoParameter = encodedRefNo != null ?
                new ObjectParameter("EncodedRefNo", encodedRefNo) :
                new ObjectParameter("EncodedRefNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_SendEmail", queryTypeParameter, mandateIdParameter, refNoParameter, fromMailParameter, toMailParameter, isSentParameter, reasonParameter, emailCountParameter, smsCountParameter, activityParameter, webAppUrlParameter, encodedMandateIDParameter, encodedRefNoParameter);
        }
    
        public virtual int sp_ServiceLog(string logDescription)
        {
            var logDescriptionParameter = logDescription != null ?
                new ObjectParameter("LogDescription", logDescription) :
                new ObjectParameter("LogDescription", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ServiceLog", logDescriptionParameter);
        }
    
        public virtual ObjectResult<Sp_UMRNPresentment_Result> Sp_UMRNPresentment(string queryType, Nullable<int> entityID, Nullable<int> userID, string customerName, string refrence, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> todate, string uMRN, string amount, Nullable<System.DateTime> createdOn, Nullable<System.DateTime> date, string xmlDimension, string fileName, Nullable<System.DateTime> prsentmentDate, string filePath, string bankName, string uploadHeaderId, string createdBy, Nullable<long> uploadHeaderId1, string uploadNo, Nullable<long> totalCount, Nullable<long> successCunt, Nullable<int> topVal, string refrence1, string presentmentDate, string legacyId, string fileno, string userName, Nullable<int> bank_ID, string presDate, string xmlStatusUpload, Nullable<int> status)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var customerNameParameter = customerName != null ?
                new ObjectParameter("CustomerName", customerName) :
                new ObjectParameter("CustomerName", typeof(string));
    
            var refrenceParameter = refrence != null ?
                new ObjectParameter("Refrence", refrence) :
                new ObjectParameter("Refrence", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("Todate", todate) :
                new ObjectParameter("Todate", typeof(System.DateTime));
    
            var uMRNParameter = uMRN != null ?
                new ObjectParameter("UMRN", uMRN) :
                new ObjectParameter("UMRN", typeof(string));
    
            var amountParameter = amount != null ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var xmlDimensionParameter = xmlDimension != null ?
                new ObjectParameter("XmlDimension", xmlDimension) :
                new ObjectParameter("XmlDimension", typeof(string));
    
            var fileNameParameter = fileName != null ?
                new ObjectParameter("FileName", fileName) :
                new ObjectParameter("FileName", typeof(string));
    
            var prsentmentDateParameter = prsentmentDate.HasValue ?
                new ObjectParameter("PrsentmentDate", prsentmentDate) :
                new ObjectParameter("PrsentmentDate", typeof(System.DateTime));
    
            var filePathParameter = filePath != null ?
                new ObjectParameter("FilePath", filePath) :
                new ObjectParameter("FilePath", typeof(string));
    
            var bankNameParameter = bankName != null ?
                new ObjectParameter("BankName", bankName) :
                new ObjectParameter("BankName", typeof(string));
    
            var uploadHeaderIdParameter = uploadHeaderId != null ?
                new ObjectParameter("UploadHeaderId", uploadHeaderId) :
                new ObjectParameter("UploadHeaderId", typeof(string));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var uploadHeaderId1Parameter = uploadHeaderId1.HasValue ?
                new ObjectParameter("UploadHeaderId1", uploadHeaderId1) :
                new ObjectParameter("UploadHeaderId1", typeof(long));
    
            var uploadNoParameter = uploadNo != null ?
                new ObjectParameter("UploadNo", uploadNo) :
                new ObjectParameter("UploadNo", typeof(string));
    
            var totalCountParameter = totalCount.HasValue ?
                new ObjectParameter("TotalCount", totalCount) :
                new ObjectParameter("TotalCount", typeof(long));
    
            var successCuntParameter = successCunt.HasValue ?
                new ObjectParameter("SuccessCunt", successCunt) :
                new ObjectParameter("SuccessCunt", typeof(long));
    
            var topValParameter = topVal.HasValue ?
                new ObjectParameter("topVal", topVal) :
                new ObjectParameter("topVal", typeof(int));
    
            var refrence1Parameter = refrence1 != null ?
                new ObjectParameter("Refrence1", refrence1) :
                new ObjectParameter("Refrence1", typeof(string));
    
            var presentmentDateParameter = presentmentDate != null ?
                new ObjectParameter("PresentmentDate", presentmentDate) :
                new ObjectParameter("PresentmentDate", typeof(string));
    
            var legacyIdParameter = legacyId != null ?
                new ObjectParameter("LegacyId", legacyId) :
                new ObjectParameter("LegacyId", typeof(string));
    
            var filenoParameter = fileno != null ?
                new ObjectParameter("Fileno", fileno) :
                new ObjectParameter("Fileno", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var bank_IDParameter = bank_ID.HasValue ?
                new ObjectParameter("Bank_ID", bank_ID) :
                new ObjectParameter("Bank_ID", typeof(int));
    
            var presDateParameter = presDate != null ?
                new ObjectParameter("PresDate", presDate) :
                new ObjectParameter("PresDate", typeof(string));
    
            var xmlStatusUploadParameter = xmlStatusUpload != null ?
                new ObjectParameter("XmlStatusUpload", xmlStatusUpload) :
                new ObjectParameter("XmlStatusUpload", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_UMRNPresentment_Result>("Sp_UMRNPresentment", queryTypeParameter, entityIDParameter, userIDParameter, customerNameParameter, refrenceParameter, fromDateParameter, todateParameter, uMRNParameter, amountParameter, createdOnParameter, dateParameter, xmlDimensionParameter, fileNameParameter, prsentmentDateParameter, filePathParameter, bankNameParameter, uploadHeaderIdParameter, createdByParameter, uploadHeaderId1Parameter, uploadNoParameter, totalCountParameter, successCuntParameter, topValParameter, refrence1Parameter, presentmentDateParameter, legacyIdParameter, filenoParameter, userNameParameter, bank_IDParameter, presDateParameter, xmlStatusUploadParameter, statusParameter);
        }
    
        public virtual ObjectResult<Sp_UMRNPresentment_OnUs_Result> Sp_UMRNPresentment_OnUs(string queryType, Nullable<int> entityID, Nullable<int> userID, string customerName, string refrence, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> todate, string uMRN, string amount, Nullable<System.DateTime> createdOn, Nullable<System.DateTime> date, string xmlDimension, string fileName, Nullable<System.DateTime> prsentmentDate, string filePath, string bankName, string uploadHeaderId, string createdBy, Nullable<long> uploadHeaderId1, string uploadNo, Nullable<long> totalCount, Nullable<long> successCunt, Nullable<int> topVal, string refrence1, string presentmentDate, string legacyId, string fileno, string userName, Nullable<int> bank_ID, string presDate, string xmlStatusUpload, Nullable<int> status)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var customerNameParameter = customerName != null ?
                new ObjectParameter("CustomerName", customerName) :
                new ObjectParameter("CustomerName", typeof(string));
    
            var refrenceParameter = refrence != null ?
                new ObjectParameter("Refrence", refrence) :
                new ObjectParameter("Refrence", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("Todate", todate) :
                new ObjectParameter("Todate", typeof(System.DateTime));
    
            var uMRNParameter = uMRN != null ?
                new ObjectParameter("UMRN", uMRN) :
                new ObjectParameter("UMRN", typeof(string));
    
            var amountParameter = amount != null ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var xmlDimensionParameter = xmlDimension != null ?
                new ObjectParameter("XmlDimension", xmlDimension) :
                new ObjectParameter("XmlDimension", typeof(string));
    
            var fileNameParameter = fileName != null ?
                new ObjectParameter("FileName", fileName) :
                new ObjectParameter("FileName", typeof(string));
    
            var prsentmentDateParameter = prsentmentDate.HasValue ?
                new ObjectParameter("PrsentmentDate", prsentmentDate) :
                new ObjectParameter("PrsentmentDate", typeof(System.DateTime));
    
            var filePathParameter = filePath != null ?
                new ObjectParameter("FilePath", filePath) :
                new ObjectParameter("FilePath", typeof(string));
    
            var bankNameParameter = bankName != null ?
                new ObjectParameter("BankName", bankName) :
                new ObjectParameter("BankName", typeof(string));
    
            var uploadHeaderIdParameter = uploadHeaderId != null ?
                new ObjectParameter("UploadHeaderId", uploadHeaderId) :
                new ObjectParameter("UploadHeaderId", typeof(string));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var uploadHeaderId1Parameter = uploadHeaderId1.HasValue ?
                new ObjectParameter("UploadHeaderId1", uploadHeaderId1) :
                new ObjectParameter("UploadHeaderId1", typeof(long));
    
            var uploadNoParameter = uploadNo != null ?
                new ObjectParameter("UploadNo", uploadNo) :
                new ObjectParameter("UploadNo", typeof(string));
    
            var totalCountParameter = totalCount.HasValue ?
                new ObjectParameter("TotalCount", totalCount) :
                new ObjectParameter("TotalCount", typeof(long));
    
            var successCuntParameter = successCunt.HasValue ?
                new ObjectParameter("SuccessCunt", successCunt) :
                new ObjectParameter("SuccessCunt", typeof(long));
    
            var topValParameter = topVal.HasValue ?
                new ObjectParameter("topVal", topVal) :
                new ObjectParameter("topVal", typeof(int));
    
            var refrence1Parameter = refrence1 != null ?
                new ObjectParameter("Refrence1", refrence1) :
                new ObjectParameter("Refrence1", typeof(string));
    
            var presentmentDateParameter = presentmentDate != null ?
                new ObjectParameter("PresentmentDate", presentmentDate) :
                new ObjectParameter("PresentmentDate", typeof(string));
    
            var legacyIdParameter = legacyId != null ?
                new ObjectParameter("LegacyId", legacyId) :
                new ObjectParameter("LegacyId", typeof(string));
    
            var filenoParameter = fileno != null ?
                new ObjectParameter("Fileno", fileno) :
                new ObjectParameter("Fileno", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var bank_IDParameter = bank_ID.HasValue ?
                new ObjectParameter("Bank_ID", bank_ID) :
                new ObjectParameter("Bank_ID", typeof(int));
    
            var presDateParameter = presDate != null ?
                new ObjectParameter("PresDate", presDate) :
                new ObjectParameter("PresDate", typeof(string));
    
            var xmlStatusUploadParameter = xmlStatusUpload != null ?
                new ObjectParameter("XmlStatusUpload", xmlStatusUpload) :
                new ObjectParameter("XmlStatusUpload", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_UMRNPresentment_OnUs_Result>("Sp_UMRNPresentment_OnUs", queryTypeParameter, entityIDParameter, userIDParameter, customerNameParameter, refrenceParameter, fromDateParameter, todateParameter, uMRNParameter, amountParameter, createdOnParameter, dateParameter, xmlDimensionParameter, fileNameParameter, prsentmentDateParameter, filePathParameter, bankNameParameter, uploadHeaderIdParameter, createdByParameter, uploadHeaderId1Parameter, uploadNoParameter, totalCountParameter, successCuntParameter, topValParameter, refrence1Parameter, presentmentDateParameter, legacyIdParameter, filenoParameter, userNameParameter, bank_IDParameter, presDateParameter, xmlStatusUploadParameter, statusParameter);
        }
    
        public virtual ObjectResult<Sp_UpdateFileStatus_Result> Sp_UpdateFileStatus(string queryType, Nullable<long> entity, Nullable<long> userid)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var entityParameter = entity.HasValue ?
                new ObjectParameter("Entity", entity) :
                new ObjectParameter("Entity", typeof(long));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("Userid", userid) :
                new ObjectParameter("Userid", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_UpdateFileStatus_Result>("Sp_UpdateFileStatus", queryTypeParameter, entityParameter, useridParameter);
        }
    
        public virtual ObjectResult<Sp_Uploaddata_Result> Sp_Uploaddata(string queryType, Nullable<int> entityID, Nullable<int> userID, string customerName, string refrence, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> todate, string uMRN, string amount, Nullable<System.DateTime> createdOn, Nullable<System.DateTime> date, string xmlDimension, string fileName, Nullable<System.DateTime> prsentmentDate, string filePath, string bankName, string uploadHeaderId, string createdBy, Nullable<long> uploadHeaderId1, string uploadNo, Nullable<long> totalCount, Nullable<long> successCunt, Nullable<int> topVal, string legacyId)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var customerNameParameter = customerName != null ?
                new ObjectParameter("CustomerName", customerName) :
                new ObjectParameter("CustomerName", typeof(string));
    
            var refrenceParameter = refrence != null ?
                new ObjectParameter("Refrence", refrence) :
                new ObjectParameter("Refrence", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("Todate", todate) :
                new ObjectParameter("Todate", typeof(System.DateTime));
    
            var uMRNParameter = uMRN != null ?
                new ObjectParameter("UMRN", uMRN) :
                new ObjectParameter("UMRN", typeof(string));
    
            var amountParameter = amount != null ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var xmlDimensionParameter = xmlDimension != null ?
                new ObjectParameter("XmlDimension", xmlDimension) :
                new ObjectParameter("XmlDimension", typeof(string));
    
            var fileNameParameter = fileName != null ?
                new ObjectParameter("FileName", fileName) :
                new ObjectParameter("FileName", typeof(string));
    
            var prsentmentDateParameter = prsentmentDate.HasValue ?
                new ObjectParameter("PrsentmentDate", prsentmentDate) :
                new ObjectParameter("PrsentmentDate", typeof(System.DateTime));
    
            var filePathParameter = filePath != null ?
                new ObjectParameter("FilePath", filePath) :
                new ObjectParameter("FilePath", typeof(string));
    
            var bankNameParameter = bankName != null ?
                new ObjectParameter("BankName", bankName) :
                new ObjectParameter("BankName", typeof(string));
    
            var uploadHeaderIdParameter = uploadHeaderId != null ?
                new ObjectParameter("UploadHeaderId", uploadHeaderId) :
                new ObjectParameter("UploadHeaderId", typeof(string));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var uploadHeaderId1Parameter = uploadHeaderId1.HasValue ?
                new ObjectParameter("UploadHeaderId1", uploadHeaderId1) :
                new ObjectParameter("UploadHeaderId1", typeof(long));
    
            var uploadNoParameter = uploadNo != null ?
                new ObjectParameter("UploadNo", uploadNo) :
                new ObjectParameter("UploadNo", typeof(string));
    
            var totalCountParameter = totalCount.HasValue ?
                new ObjectParameter("TotalCount", totalCount) :
                new ObjectParameter("TotalCount", typeof(long));
    
            var successCuntParameter = successCunt.HasValue ?
                new ObjectParameter("SuccessCunt", successCunt) :
                new ObjectParameter("SuccessCunt", typeof(long));
    
            var topValParameter = topVal.HasValue ?
                new ObjectParameter("topVal", topVal) :
                new ObjectParameter("topVal", typeof(int));
    
            var legacyIdParameter = legacyId != null ?
                new ObjectParameter("LegacyId", legacyId) :
                new ObjectParameter("LegacyId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_Uploaddata_Result>("Sp_Uploaddata", queryTypeParameter, entityIDParameter, userIDParameter, customerNameParameter, refrenceParameter, fromDateParameter, todateParameter, uMRNParameter, amountParameter, createdOnParameter, dateParameter, xmlDimensionParameter, fileNameParameter, prsentmentDateParameter, filePathParameter, bankNameParameter, uploadHeaderIdParameter, createdByParameter, uploadHeaderId1Parameter, uploadNoParameter, totalCountParameter, successCuntParameter, topValParameter, legacyIdParameter);
        }
    
        public virtual ObjectResult<Sp_Uploaddata1_Result> Sp_Uploaddata1(string queryType, Nullable<int> entityID, Nullable<int> userID, string customerName, string refrence, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> todate, string uMRN, string amount, Nullable<System.DateTime> createdOn, Nullable<System.DateTime> date, string xmlDimension, string fileName, Nullable<System.DateTime> prsentmentDate, string filePath, string bankName, string uploadHeaderId, string createdBy, Nullable<long> uploadHeaderId1, string uploadNo, Nullable<long> totalCount, Nullable<long> successCunt, Nullable<int> topVal, string legacyId)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var customerNameParameter = customerName != null ?
                new ObjectParameter("CustomerName", customerName) :
                new ObjectParameter("CustomerName", typeof(string));
    
            var refrenceParameter = refrence != null ?
                new ObjectParameter("Refrence", refrence) :
                new ObjectParameter("Refrence", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("Todate", todate) :
                new ObjectParameter("Todate", typeof(System.DateTime));
    
            var uMRNParameter = uMRN != null ?
                new ObjectParameter("UMRN", uMRN) :
                new ObjectParameter("UMRN", typeof(string));
    
            var amountParameter = amount != null ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var xmlDimensionParameter = xmlDimension != null ?
                new ObjectParameter("XmlDimension", xmlDimension) :
                new ObjectParameter("XmlDimension", typeof(string));
    
            var fileNameParameter = fileName != null ?
                new ObjectParameter("FileName", fileName) :
                new ObjectParameter("FileName", typeof(string));
    
            var prsentmentDateParameter = prsentmentDate.HasValue ?
                new ObjectParameter("PrsentmentDate", prsentmentDate) :
                new ObjectParameter("PrsentmentDate", typeof(System.DateTime));
    
            var filePathParameter = filePath != null ?
                new ObjectParameter("FilePath", filePath) :
                new ObjectParameter("FilePath", typeof(string));
    
            var bankNameParameter = bankName != null ?
                new ObjectParameter("BankName", bankName) :
                new ObjectParameter("BankName", typeof(string));
    
            var uploadHeaderIdParameter = uploadHeaderId != null ?
                new ObjectParameter("UploadHeaderId", uploadHeaderId) :
                new ObjectParameter("UploadHeaderId", typeof(string));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var uploadHeaderId1Parameter = uploadHeaderId1.HasValue ?
                new ObjectParameter("UploadHeaderId1", uploadHeaderId1) :
                new ObjectParameter("UploadHeaderId1", typeof(long));
    
            var uploadNoParameter = uploadNo != null ?
                new ObjectParameter("UploadNo", uploadNo) :
                new ObjectParameter("UploadNo", typeof(string));
    
            var totalCountParameter = totalCount.HasValue ?
                new ObjectParameter("TotalCount", totalCount) :
                new ObjectParameter("TotalCount", typeof(long));
    
            var successCuntParameter = successCunt.HasValue ?
                new ObjectParameter("SuccessCunt", successCunt) :
                new ObjectParameter("SuccessCunt", typeof(long));
    
            var topValParameter = topVal.HasValue ?
                new ObjectParameter("topVal", topVal) :
                new ObjectParameter("topVal", typeof(int));
    
            var legacyIdParameter = legacyId != null ?
                new ObjectParameter("LegacyId", legacyId) :
                new ObjectParameter("LegacyId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_Uploaddata1_Result>("Sp_Uploaddata1", queryTypeParameter, entityIDParameter, userIDParameter, customerNameParameter, refrenceParameter, fromDateParameter, todateParameter, uMRNParameter, amountParameter, createdOnParameter, dateParameter, xmlDimensionParameter, fileNameParameter, prsentmentDateParameter, filePathParameter, bankNameParameter, uploadHeaderIdParameter, createdByParameter, uploadHeaderId1Parameter, uploadNoParameter, totalCountParameter, successCuntParameter, topValParameter, legacyIdParameter);
        }
    
        public virtual ObjectResult<Sp_user_Result> Sp_user(string queryType, string type, Nullable<long> userId, string contactNo, string emailId, string userNameId, string password, string passwordKey, string xmlEntity, Nullable<long> entityId, Nullable<long> user, string xmlUtilityCode, string xmlSponsorBankCode, string xmlPaymentMode, Nullable<bool> isBulkMandate, Nullable<bool> isMandate, Nullable<bool> isMandateEdit, Nullable<bool> isRefrenceEdit, Nullable<bool> isRefrenceCheck, string emailSendTo, Nullable<bool> isAllowFundTransfer, Nullable<bool> isZipSure, Nullable<long> aPPId, Nullable<long> presentmentMaker, Nullable<long> presentmentChecker, string xmlPresentmentMaker, string xmlUserRightsA, string xmlUserRightsB, string xmlUserRightsC, string xmlUserRightsD, string nachViewUserID, string dtRole, string dtroleid, Nullable<long> entityUserID, string mandateID, Nullable<int> isDashBoard, Nullable<long> masterBankId, string xmlbulkuploadMaker, Nullable<int> bulkmaker, Nullable<int> bulkchecker, Nullable<int> pageCount, string search_Text)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var contactNoParameter = contactNo != null ?
                new ObjectParameter("ContactNo", contactNo) :
                new ObjectParameter("ContactNo", typeof(string));
    
            var emailIdParameter = emailId != null ?
                new ObjectParameter("EmailId", emailId) :
                new ObjectParameter("EmailId", typeof(string));
    
            var userNameIdParameter = userNameId != null ?
                new ObjectParameter("userNameId", userNameId) :
                new ObjectParameter("userNameId", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            var passwordKeyParameter = passwordKey != null ?
                new ObjectParameter("passwordKey", passwordKey) :
                new ObjectParameter("passwordKey", typeof(string));
    
            var xmlEntityParameter = xmlEntity != null ?
                new ObjectParameter("XmlEntity", xmlEntity) :
                new ObjectParameter("XmlEntity", typeof(string));
    
            var entityIdParameter = entityId.HasValue ?
                new ObjectParameter("EntityId", entityId) :
                new ObjectParameter("EntityId", typeof(long));
    
            var userParameter = user.HasValue ?
                new ObjectParameter("User", user) :
                new ObjectParameter("User", typeof(long));
    
            var xmlUtilityCodeParameter = xmlUtilityCode != null ?
                new ObjectParameter("XmlUtilityCode", xmlUtilityCode) :
                new ObjectParameter("XmlUtilityCode", typeof(string));
    
            var xmlSponsorBankCodeParameter = xmlSponsorBankCode != null ?
                new ObjectParameter("XmlSponsorBankCode", xmlSponsorBankCode) :
                new ObjectParameter("XmlSponsorBankCode", typeof(string));
    
            var xmlPaymentModeParameter = xmlPaymentMode != null ?
                new ObjectParameter("XmlPaymentMode", xmlPaymentMode) :
                new ObjectParameter("XmlPaymentMode", typeof(string));
    
            var isBulkMandateParameter = isBulkMandate.HasValue ?
                new ObjectParameter("IsBulkMandate", isBulkMandate) :
                new ObjectParameter("IsBulkMandate", typeof(bool));
    
            var isMandateParameter = isMandate.HasValue ?
                new ObjectParameter("IsMandate", isMandate) :
                new ObjectParameter("IsMandate", typeof(bool));
    
            var isMandateEditParameter = isMandateEdit.HasValue ?
                new ObjectParameter("IsMandateEdit", isMandateEdit) :
                new ObjectParameter("IsMandateEdit", typeof(bool));
    
            var isRefrenceEditParameter = isRefrenceEdit.HasValue ?
                new ObjectParameter("IsRefrenceEdit", isRefrenceEdit) :
                new ObjectParameter("IsRefrenceEdit", typeof(bool));
    
            var isRefrenceCheckParameter = isRefrenceCheck.HasValue ?
                new ObjectParameter("IsRefrenceCheck", isRefrenceCheck) :
                new ObjectParameter("IsRefrenceCheck", typeof(bool));
    
            var emailSendToParameter = emailSendTo != null ?
                new ObjectParameter("EmailSendTo", emailSendTo) :
                new ObjectParameter("EmailSendTo", typeof(string));
    
            var isAllowFundTransferParameter = isAllowFundTransfer.HasValue ?
                new ObjectParameter("IsAllowFundTransfer", isAllowFundTransfer) :
                new ObjectParameter("IsAllowFundTransfer", typeof(bool));
    
            var isZipSureParameter = isZipSure.HasValue ?
                new ObjectParameter("IsZipSure", isZipSure) :
                new ObjectParameter("IsZipSure", typeof(bool));
    
            var aPPIdParameter = aPPId.HasValue ?
                new ObjectParameter("APPId", aPPId) :
                new ObjectParameter("APPId", typeof(long));
    
            var presentmentMakerParameter = presentmentMaker.HasValue ?
                new ObjectParameter("PresentmentMaker", presentmentMaker) :
                new ObjectParameter("PresentmentMaker", typeof(long));
    
            var presentmentCheckerParameter = presentmentChecker.HasValue ?
                new ObjectParameter("PresentmentChecker", presentmentChecker) :
                new ObjectParameter("PresentmentChecker", typeof(long));
    
            var xmlPresentmentMakerParameter = xmlPresentmentMaker != null ?
                new ObjectParameter("XmlPresentmentMaker", xmlPresentmentMaker) :
                new ObjectParameter("XmlPresentmentMaker", typeof(string));
    
            var xmlUserRightsAParameter = xmlUserRightsA != null ?
                new ObjectParameter("XmlUserRightsA", xmlUserRightsA) :
                new ObjectParameter("XmlUserRightsA", typeof(string));
    
            var xmlUserRightsBParameter = xmlUserRightsB != null ?
                new ObjectParameter("XmlUserRightsB", xmlUserRightsB) :
                new ObjectParameter("XmlUserRightsB", typeof(string));
    
            var xmlUserRightsCParameter = xmlUserRightsC != null ?
                new ObjectParameter("XmlUserRightsC", xmlUserRightsC) :
                new ObjectParameter("XmlUserRightsC", typeof(string));
    
            var xmlUserRightsDParameter = xmlUserRightsD != null ?
                new ObjectParameter("XmlUserRightsD", xmlUserRightsD) :
                new ObjectParameter("XmlUserRightsD", typeof(string));
    
            var nachViewUserIDParameter = nachViewUserID != null ?
                new ObjectParameter("NachViewUserID", nachViewUserID) :
                new ObjectParameter("NachViewUserID", typeof(string));
    
            var dtRoleParameter = dtRole != null ?
                new ObjectParameter("dtRole", dtRole) :
                new ObjectParameter("dtRole", typeof(string));
    
            var dtroleidParameter = dtroleid != null ?
                new ObjectParameter("dtroleid", dtroleid) :
                new ObjectParameter("dtroleid", typeof(string));
    
            var entityUserIDParameter = entityUserID.HasValue ?
                new ObjectParameter("EntityUserID", entityUserID) :
                new ObjectParameter("EntityUserID", typeof(long));
    
            var mandateIDParameter = mandateID != null ?
                new ObjectParameter("MandateID", mandateID) :
                new ObjectParameter("MandateID", typeof(string));
    
            var isDashBoardParameter = isDashBoard.HasValue ?
                new ObjectParameter("IsDashBoard", isDashBoard) :
                new ObjectParameter("IsDashBoard", typeof(int));
    
            var masterBankIdParameter = masterBankId.HasValue ?
                new ObjectParameter("MasterBankId", masterBankId) :
                new ObjectParameter("MasterBankId", typeof(long));
    
            var xmlbulkuploadMakerParameter = xmlbulkuploadMaker != null ?
                new ObjectParameter("XmlbulkuploadMaker", xmlbulkuploadMaker) :
                new ObjectParameter("XmlbulkuploadMaker", typeof(string));
    
            var bulkmakerParameter = bulkmaker.HasValue ?
                new ObjectParameter("bulkmaker", bulkmaker) :
                new ObjectParameter("bulkmaker", typeof(int));
    
            var bulkcheckerParameter = bulkchecker.HasValue ?
                new ObjectParameter("bulkchecker", bulkchecker) :
                new ObjectParameter("bulkchecker", typeof(int));
    
            var pageCountParameter = pageCount.HasValue ?
                new ObjectParameter("PageCount", pageCount) :
                new ObjectParameter("PageCount", typeof(int));
    
            var search_TextParameter = search_Text != null ?
                new ObjectParameter("Search_Text", search_Text) :
                new ObjectParameter("Search_Text", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_user_Result>("Sp_user", queryTypeParameter, typeParameter, userIdParameter, contactNoParameter, emailIdParameter, userNameIdParameter, passwordParameter, passwordKeyParameter, xmlEntityParameter, entityIdParameter, userParameter, xmlUtilityCodeParameter, xmlSponsorBankCodeParameter, xmlPaymentModeParameter, isBulkMandateParameter, isMandateParameter, isMandateEditParameter, isRefrenceEditParameter, isRefrenceCheckParameter, emailSendToParameter, isAllowFundTransferParameter, isZipSureParameter, aPPIdParameter, presentmentMakerParameter, presentmentCheckerParameter, xmlPresentmentMakerParameter, xmlUserRightsAParameter, xmlUserRightsBParameter, xmlUserRightsCParameter, xmlUserRightsDParameter, nachViewUserIDParameter, dtRoleParameter, dtroleidParameter, entityUserIDParameter, mandateIDParameter, isDashBoardParameter, masterBankIdParameter, xmlbulkuploadMakerParameter, bulkmakerParameter, bulkcheckerParameter, pageCountParameter, search_TextParameter);
        }
    
        public virtual ObjectResult<sp_UserLogin_Result> sp_UserLogin(string queryType, string userName, string phoneNo, string emailId, string changePassword, string changePasswordKey, Nullable<long> userId, string tokenID, string iPAddress, string macAddress, Nullable<int> isLogin, Nullable<int> idleTime)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var phoneNoParameter = phoneNo != null ?
                new ObjectParameter("PhoneNo", phoneNo) :
                new ObjectParameter("PhoneNo", typeof(string));
    
            var emailIdParameter = emailId != null ?
                new ObjectParameter("EmailId", emailId) :
                new ObjectParameter("EmailId", typeof(string));
    
            var changePasswordParameter = changePassword != null ?
                new ObjectParameter("ChangePassword", changePassword) :
                new ObjectParameter("ChangePassword", typeof(string));
    
            var changePasswordKeyParameter = changePasswordKey != null ?
                new ObjectParameter("ChangePasswordKey", changePasswordKey) :
                new ObjectParameter("ChangePasswordKey", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var tokenIDParameter = tokenID != null ?
                new ObjectParameter("TokenID", tokenID) :
                new ObjectParameter("TokenID", typeof(string));
    
            var iPAddressParameter = iPAddress != null ?
                new ObjectParameter("IPAddress", iPAddress) :
                new ObjectParameter("IPAddress", typeof(string));
    
            var macAddressParameter = macAddress != null ?
                new ObjectParameter("MacAddress", macAddress) :
                new ObjectParameter("MacAddress", typeof(string));
    
            var isLoginParameter = isLogin.HasValue ?
                new ObjectParameter("IsLogin", isLogin) :
                new ObjectParameter("IsLogin", typeof(int));
    
            var idleTimeParameter = idleTime.HasValue ?
                new ObjectParameter("idleTime", idleTime) :
                new ObjectParameter("idleTime", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_UserLogin_Result>("sp_UserLogin", queryTypeParameter, userNameParameter, phoneNoParameter, emailIdParameter, changePasswordParameter, changePasswordKeyParameter, userIdParameter, tokenIDParameter, iPAddressParameter, macAddressParameter, isLoginParameter, idleTimeParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> Sp_WebAPI(string queryType, string userName, Nullable<long> userId, string acNo, string iFSC, string mICR, string customer, string description, string status, string bankName, Nullable<long> entityId, Nullable<long> acValidatedId, string password, string passwordKey, string adharCardNo, string refrenceNo, string traceNumber, string debitType, string frequency, string toDebit, string amountRupees, string refrence1, string @ref, string refrence2, string addr1, string phNumber, string emailId, string from, string to, Nullable<long> mandateId, string nach, string rupees, string customer1, string customer2, string customer3, string dateOnMandate, string tIPPath, string pNGPath, string utilityCode, string mandateType, string sponsorCode, string strFromDate, string strToDate, string strTable, string paymentDataX, string xmlMandate, string filePath, Nullable<long> activityId, string typeData, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string tIFPath, string jPGPath, string type, string eNachPhoneNumber, string eNachEmailId, Nullable<bool> agree, string eNachAadharNumber, string mandateMode, Nullable<long> id, string enachMessageId, Nullable<long> appId, Nullable<long> printQR, string eMandateType, Nullable<bool> isAggregator, string isAggregatorValue, string categoryCode)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var acNoParameter = acNo != null ?
                new ObjectParameter("AcNo", acNo) :
                new ObjectParameter("AcNo", typeof(string));
    
            var iFSCParameter = iFSC != null ?
                new ObjectParameter("IFSC", iFSC) :
                new ObjectParameter("IFSC", typeof(string));
    
            var mICRParameter = mICR != null ?
                new ObjectParameter("MICR", mICR) :
                new ObjectParameter("MICR", typeof(string));
    
            var customerParameter = customer != null ?
                new ObjectParameter("Customer", customer) :
                new ObjectParameter("Customer", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var bankNameParameter = bankName != null ?
                new ObjectParameter("BankName", bankName) :
                new ObjectParameter("BankName", typeof(string));
    
            var entityIdParameter = entityId.HasValue ?
                new ObjectParameter("EntityId", entityId) :
                new ObjectParameter("EntityId", typeof(long));
    
            var acValidatedIdParameter = acValidatedId.HasValue ?
                new ObjectParameter("AcValidatedId", acValidatedId) :
                new ObjectParameter("AcValidatedId", typeof(long));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var passwordKeyParameter = passwordKey != null ?
                new ObjectParameter("PasswordKey", passwordKey) :
                new ObjectParameter("PasswordKey", typeof(string));
    
            var adharCardNoParameter = adharCardNo != null ?
                new ObjectParameter("AdharCardNo", adharCardNo) :
                new ObjectParameter("AdharCardNo", typeof(string));
    
            var refrenceNoParameter = refrenceNo != null ?
                new ObjectParameter("RefrenceNo", refrenceNo) :
                new ObjectParameter("RefrenceNo", typeof(string));
    
            var traceNumberParameter = traceNumber != null ?
                new ObjectParameter("TraceNumber", traceNumber) :
                new ObjectParameter("TraceNumber", typeof(string));
    
            var debitTypeParameter = debitType != null ?
                new ObjectParameter("DebitType", debitType) :
                new ObjectParameter("DebitType", typeof(string));
    
            var frequencyParameter = frequency != null ?
                new ObjectParameter("Frequency", frequency) :
                new ObjectParameter("Frequency", typeof(string));
    
            var toDebitParameter = toDebit != null ?
                new ObjectParameter("ToDebit", toDebit) :
                new ObjectParameter("ToDebit", typeof(string));
    
            var amountRupeesParameter = amountRupees != null ?
                new ObjectParameter("AmountRupees", amountRupees) :
                new ObjectParameter("AmountRupees", typeof(string));
    
            var refrence1Parameter = refrence1 != null ?
                new ObjectParameter("Refrence1", refrence1) :
                new ObjectParameter("Refrence1", typeof(string));
    
            var refParameter = @ref != null ?
                new ObjectParameter("Ref", @ref) :
                new ObjectParameter("Ref", typeof(string));
    
            var refrence2Parameter = refrence2 != null ?
                new ObjectParameter("Refrence2", refrence2) :
                new ObjectParameter("Refrence2", typeof(string));
    
            var addr1Parameter = addr1 != null ?
                new ObjectParameter("Addr1", addr1) :
                new ObjectParameter("Addr1", typeof(string));
    
            var phNumberParameter = phNumber != null ?
                new ObjectParameter("PhNumber", phNumber) :
                new ObjectParameter("PhNumber", typeof(string));
    
            var emailIdParameter = emailId != null ?
                new ObjectParameter("EmailId", emailId) :
                new ObjectParameter("EmailId", typeof(string));
    
            var fromParameter = from != null ?
                new ObjectParameter("From", from) :
                new ObjectParameter("From", typeof(string));
    
            var toParameter = to != null ?
                new ObjectParameter("To", to) :
                new ObjectParameter("To", typeof(string));
    
            var mandateIdParameter = mandateId.HasValue ?
                new ObjectParameter("MandateId", mandateId) :
                new ObjectParameter("MandateId", typeof(long));
    
            var nachParameter = nach != null ?
                new ObjectParameter("Nach", nach) :
                new ObjectParameter("Nach", typeof(string));
    
            var rupeesParameter = rupees != null ?
                new ObjectParameter("Rupees", rupees) :
                new ObjectParameter("Rupees", typeof(string));
    
            var customer1Parameter = customer1 != null ?
                new ObjectParameter("Customer1", customer1) :
                new ObjectParameter("Customer1", typeof(string));
    
            var customer2Parameter = customer2 != null ?
                new ObjectParameter("Customer2", customer2) :
                new ObjectParameter("Customer2", typeof(string));
    
            var customer3Parameter = customer3 != null ?
                new ObjectParameter("Customer3", customer3) :
                new ObjectParameter("Customer3", typeof(string));
    
            var dateOnMandateParameter = dateOnMandate != null ?
                new ObjectParameter("DateOnMandate", dateOnMandate) :
                new ObjectParameter("DateOnMandate", typeof(string));
    
            var tIPPathParameter = tIPPath != null ?
                new ObjectParameter("TIPPath", tIPPath) :
                new ObjectParameter("TIPPath", typeof(string));
    
            var pNGPathParameter = pNGPath != null ?
                new ObjectParameter("PNGPath", pNGPath) :
                new ObjectParameter("PNGPath", typeof(string));
    
            var utilityCodeParameter = utilityCode != null ?
                new ObjectParameter("UtilityCode", utilityCode) :
                new ObjectParameter("UtilityCode", typeof(string));
    
            var mandateTypeParameter = mandateType != null ?
                new ObjectParameter("MandateType", mandateType) :
                new ObjectParameter("MandateType", typeof(string));
    
            var sponsorCodeParameter = sponsorCode != null ?
                new ObjectParameter("SponsorCode", sponsorCode) :
                new ObjectParameter("SponsorCode", typeof(string));
    
            var strFromDateParameter = strFromDate != null ?
                new ObjectParameter("strFromDate", strFromDate) :
                new ObjectParameter("strFromDate", typeof(string));
    
            var strToDateParameter = strToDate != null ?
                new ObjectParameter("strToDate", strToDate) :
                new ObjectParameter("strToDate", typeof(string));
    
            var strTableParameter = strTable != null ?
                new ObjectParameter("strTable", strTable) :
                new ObjectParameter("strTable", typeof(string));
    
            var paymentDataXParameter = paymentDataX != null ?
                new ObjectParameter("PaymentDataX", paymentDataX) :
                new ObjectParameter("PaymentDataX", typeof(string));
    
            var xmlMandateParameter = xmlMandate != null ?
                new ObjectParameter("xmlMandate", xmlMandate) :
                new ObjectParameter("xmlMandate", typeof(string));
    
            var filePathParameter = filePath != null ?
                new ObjectParameter("FilePath", filePath) :
                new ObjectParameter("FilePath", typeof(string));
    
            var activityIdParameter = activityId.HasValue ?
                new ObjectParameter("ActivityId", activityId) :
                new ObjectParameter("ActivityId", typeof(long));
    
            var typeDataParameter = typeData != null ?
                new ObjectParameter("TypeData", typeData) :
                new ObjectParameter("TypeData", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var tIFPathParameter = tIFPath != null ?
                new ObjectParameter("TIFPath", tIFPath) :
                new ObjectParameter("TIFPath", typeof(string));
    
            var jPGPathParameter = jPGPath != null ?
                new ObjectParameter("JPGPath", jPGPath) :
                new ObjectParameter("JPGPath", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var eNachPhoneNumberParameter = eNachPhoneNumber != null ?
                new ObjectParameter("ENachPhoneNumber", eNachPhoneNumber) :
                new ObjectParameter("ENachPhoneNumber", typeof(string));
    
            var eNachEmailIdParameter = eNachEmailId != null ?
                new ObjectParameter("ENachEmailId", eNachEmailId) :
                new ObjectParameter("ENachEmailId", typeof(string));
    
            var agreeParameter = agree.HasValue ?
                new ObjectParameter("Agree", agree) :
                new ObjectParameter("Agree", typeof(bool));
    
            var eNachAadharNumberParameter = eNachAadharNumber != null ?
                new ObjectParameter("ENachAadharNumber", eNachAadharNumber) :
                new ObjectParameter("ENachAadharNumber", typeof(string));
    
            var mandateModeParameter = mandateMode != null ?
                new ObjectParameter("MandateMode", mandateMode) :
                new ObjectParameter("MandateMode", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var enachMessageIdParameter = enachMessageId != null ?
                new ObjectParameter("EnachMessageId", enachMessageId) :
                new ObjectParameter("EnachMessageId", typeof(string));
    
            var appIdParameter = appId.HasValue ?
                new ObjectParameter("appId", appId) :
                new ObjectParameter("appId", typeof(long));
    
            var printQRParameter = printQR.HasValue ?
                new ObjectParameter("PrintQR", printQR) :
                new ObjectParameter("PrintQR", typeof(long));
    
            var eMandateTypeParameter = eMandateType != null ?
                new ObjectParameter("EMandateType", eMandateType) :
                new ObjectParameter("EMandateType", typeof(string));
    
            var isAggregatorParameter = isAggregator.HasValue ?
                new ObjectParameter("IsAggregator", isAggregator) :
                new ObjectParameter("IsAggregator", typeof(bool));
    
            var isAggregatorValueParameter = isAggregatorValue != null ?
                new ObjectParameter("IsAggregatorValue", isAggregatorValue) :
                new ObjectParameter("IsAggregatorValue", typeof(string));
    
            var categoryCodeParameter = categoryCode != null ?
                new ObjectParameter("CategoryCode", categoryCode) :
                new ObjectParameter("CategoryCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("Sp_WebAPI", queryTypeParameter, userNameParameter, userIdParameter, acNoParameter, iFSCParameter, mICRParameter, customerParameter, descriptionParameter, statusParameter, bankNameParameter, entityIdParameter, acValidatedIdParameter, passwordParameter, passwordKeyParameter, adharCardNoParameter, refrenceNoParameter, traceNumberParameter, debitTypeParameter, frequencyParameter, toDebitParameter, amountRupeesParameter, refrence1Parameter, refParameter, refrence2Parameter, addr1Parameter, phNumberParameter, emailIdParameter, fromParameter, toParameter, mandateIdParameter, nachParameter, rupeesParameter, customer1Parameter, customer2Parameter, customer3Parameter, dateOnMandateParameter, tIPPathParameter, pNGPathParameter, utilityCodeParameter, mandateTypeParameter, sponsorCodeParameter, strFromDateParameter, strToDateParameter, strTableParameter, paymentDataXParameter, xmlMandateParameter, filePathParameter, activityIdParameter, typeDataParameter, fromDateParameter, toDateParameter, tIFPathParameter, jPGPathParameter, typeParameter, eNachPhoneNumberParameter, eNachEmailIdParameter, agreeParameter, eNachAadharNumberParameter, mandateModeParameter, idParameter, enachMessageIdParameter, appIdParameter, printQRParameter, eMandateTypeParameter, isAggregatorParameter, isAggregatorValueParameter, categoryCodeParameter);
        }
    
        public virtual ObjectResult<Sp_WebSevice_Result> Sp_WebSevice(string queryType, string userName, Nullable<long> userId, string acNo, string iFSC, string mICR, string customer, string description, string status, string bankName, Nullable<long> entityId, Nullable<long> acValidatedId, string password, string passwordKey, string adharCardNo, string refrenceNo, string traceNumber, string debitType, string frequency, string toDebit, string amountRupees, string refrence1, string @ref, string refrence2, string addr1, string phNumber, string emailId, string from, string to, Nullable<long> mandateId, string nach, string rupees, string customer1, string customer2, string customer3, string dateOnMandate, string tIPPath, string pNGPath, string utilityCode, string sponsorCode, string strFromDate, string strToDate, string strTable, string paymentDataX, string xmlMandate, string filePath, Nullable<long> activityId, string typeData, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string tIFPath, string jPGPath, string type, string eNachPhoneNumber, string eNachEmailId, Nullable<bool> agree, string eNachAadharNumber, string mandateMode, Nullable<long> id, string enachMessageId, string emandateType, Nullable<bool> isPhysical, Nullable<bool> isEmandate, Nullable<long> appId, string categoryCode)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var acNoParameter = acNo != null ?
                new ObjectParameter("AcNo", acNo) :
                new ObjectParameter("AcNo", typeof(string));
    
            var iFSCParameter = iFSC != null ?
                new ObjectParameter("IFSC", iFSC) :
                new ObjectParameter("IFSC", typeof(string));
    
            var mICRParameter = mICR != null ?
                new ObjectParameter("MICR", mICR) :
                new ObjectParameter("MICR", typeof(string));
    
            var customerParameter = customer != null ?
                new ObjectParameter("Customer", customer) :
                new ObjectParameter("Customer", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var bankNameParameter = bankName != null ?
                new ObjectParameter("BankName", bankName) :
                new ObjectParameter("BankName", typeof(string));
    
            var entityIdParameter = entityId.HasValue ?
                new ObjectParameter("EntityId", entityId) :
                new ObjectParameter("EntityId", typeof(long));
    
            var acValidatedIdParameter = acValidatedId.HasValue ?
                new ObjectParameter("AcValidatedId", acValidatedId) :
                new ObjectParameter("AcValidatedId", typeof(long));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var passwordKeyParameter = passwordKey != null ?
                new ObjectParameter("PasswordKey", passwordKey) :
                new ObjectParameter("PasswordKey", typeof(string));
    
            var adharCardNoParameter = adharCardNo != null ?
                new ObjectParameter("AdharCardNo", adharCardNo) :
                new ObjectParameter("AdharCardNo", typeof(string));
    
            var refrenceNoParameter = refrenceNo != null ?
                new ObjectParameter("RefrenceNo", refrenceNo) :
                new ObjectParameter("RefrenceNo", typeof(string));
    
            var traceNumberParameter = traceNumber != null ?
                new ObjectParameter("TraceNumber", traceNumber) :
                new ObjectParameter("TraceNumber", typeof(string));
    
            var debitTypeParameter = debitType != null ?
                new ObjectParameter("DebitType", debitType) :
                new ObjectParameter("DebitType", typeof(string));
    
            var frequencyParameter = frequency != null ?
                new ObjectParameter("Frequency", frequency) :
                new ObjectParameter("Frequency", typeof(string));
    
            var toDebitParameter = toDebit != null ?
                new ObjectParameter("ToDebit", toDebit) :
                new ObjectParameter("ToDebit", typeof(string));
    
            var amountRupeesParameter = amountRupees != null ?
                new ObjectParameter("AmountRupees", amountRupees) :
                new ObjectParameter("AmountRupees", typeof(string));
    
            var refrence1Parameter = refrence1 != null ?
                new ObjectParameter("Refrence1", refrence1) :
                new ObjectParameter("Refrence1", typeof(string));
    
            var refParameter = @ref != null ?
                new ObjectParameter("Ref", @ref) :
                new ObjectParameter("Ref", typeof(string));
    
            var refrence2Parameter = refrence2 != null ?
                new ObjectParameter("Refrence2", refrence2) :
                new ObjectParameter("Refrence2", typeof(string));
    
            var addr1Parameter = addr1 != null ?
                new ObjectParameter("Addr1", addr1) :
                new ObjectParameter("Addr1", typeof(string));
    
            var phNumberParameter = phNumber != null ?
                new ObjectParameter("PhNumber", phNumber) :
                new ObjectParameter("PhNumber", typeof(string));
    
            var emailIdParameter = emailId != null ?
                new ObjectParameter("EmailId", emailId) :
                new ObjectParameter("EmailId", typeof(string));
    
            var fromParameter = from != null ?
                new ObjectParameter("From", from) :
                new ObjectParameter("From", typeof(string));
    
            var toParameter = to != null ?
                new ObjectParameter("To", to) :
                new ObjectParameter("To", typeof(string));
    
            var mandateIdParameter = mandateId.HasValue ?
                new ObjectParameter("MandateId", mandateId) :
                new ObjectParameter("MandateId", typeof(long));
    
            var nachParameter = nach != null ?
                new ObjectParameter("Nach", nach) :
                new ObjectParameter("Nach", typeof(string));
    
            var rupeesParameter = rupees != null ?
                new ObjectParameter("Rupees", rupees) :
                new ObjectParameter("Rupees", typeof(string));
    
            var customer1Parameter = customer1 != null ?
                new ObjectParameter("Customer1", customer1) :
                new ObjectParameter("Customer1", typeof(string));
    
            var customer2Parameter = customer2 != null ?
                new ObjectParameter("Customer2", customer2) :
                new ObjectParameter("Customer2", typeof(string));
    
            var customer3Parameter = customer3 != null ?
                new ObjectParameter("Customer3", customer3) :
                new ObjectParameter("Customer3", typeof(string));
    
            var dateOnMandateParameter = dateOnMandate != null ?
                new ObjectParameter("DateOnMandate", dateOnMandate) :
                new ObjectParameter("DateOnMandate", typeof(string));
    
            var tIPPathParameter = tIPPath != null ?
                new ObjectParameter("TIPPath", tIPPath) :
                new ObjectParameter("TIPPath", typeof(string));
    
            var pNGPathParameter = pNGPath != null ?
                new ObjectParameter("PNGPath", pNGPath) :
                new ObjectParameter("PNGPath", typeof(string));
    
            var utilityCodeParameter = utilityCode != null ?
                new ObjectParameter("UtilityCode", utilityCode) :
                new ObjectParameter("UtilityCode", typeof(string));
    
            var sponsorCodeParameter = sponsorCode != null ?
                new ObjectParameter("SponsorCode", sponsorCode) :
                new ObjectParameter("SponsorCode", typeof(string));
    
            var strFromDateParameter = strFromDate != null ?
                new ObjectParameter("strFromDate", strFromDate) :
                new ObjectParameter("strFromDate", typeof(string));
    
            var strToDateParameter = strToDate != null ?
                new ObjectParameter("strToDate", strToDate) :
                new ObjectParameter("strToDate", typeof(string));
    
            var strTableParameter = strTable != null ?
                new ObjectParameter("strTable", strTable) :
                new ObjectParameter("strTable", typeof(string));
    
            var paymentDataXParameter = paymentDataX != null ?
                new ObjectParameter("PaymentDataX", paymentDataX) :
                new ObjectParameter("PaymentDataX", typeof(string));
    
            var xmlMandateParameter = xmlMandate != null ?
                new ObjectParameter("xmlMandate", xmlMandate) :
                new ObjectParameter("xmlMandate", typeof(string));
    
            var filePathParameter = filePath != null ?
                new ObjectParameter("FilePath", filePath) :
                new ObjectParameter("FilePath", typeof(string));
    
            var activityIdParameter = activityId.HasValue ?
                new ObjectParameter("ActivityId", activityId) :
                new ObjectParameter("ActivityId", typeof(long));
    
            var typeDataParameter = typeData != null ?
                new ObjectParameter("TypeData", typeData) :
                new ObjectParameter("TypeData", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var tIFPathParameter = tIFPath != null ?
                new ObjectParameter("TIFPath", tIFPath) :
                new ObjectParameter("TIFPath", typeof(string));
    
            var jPGPathParameter = jPGPath != null ?
                new ObjectParameter("JPGPath", jPGPath) :
                new ObjectParameter("JPGPath", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var eNachPhoneNumberParameter = eNachPhoneNumber != null ?
                new ObjectParameter("ENachPhoneNumber", eNachPhoneNumber) :
                new ObjectParameter("ENachPhoneNumber", typeof(string));
    
            var eNachEmailIdParameter = eNachEmailId != null ?
                new ObjectParameter("ENachEmailId", eNachEmailId) :
                new ObjectParameter("ENachEmailId", typeof(string));
    
            var agreeParameter = agree.HasValue ?
                new ObjectParameter("Agree", agree) :
                new ObjectParameter("Agree", typeof(bool));
    
            var eNachAadharNumberParameter = eNachAadharNumber != null ?
                new ObjectParameter("ENachAadharNumber", eNachAadharNumber) :
                new ObjectParameter("ENachAadharNumber", typeof(string));
    
            var mandateModeParameter = mandateMode != null ?
                new ObjectParameter("MandateMode", mandateMode) :
                new ObjectParameter("MandateMode", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var enachMessageIdParameter = enachMessageId != null ?
                new ObjectParameter("EnachMessageId", enachMessageId) :
                new ObjectParameter("EnachMessageId", typeof(string));
    
            var emandateTypeParameter = emandateType != null ?
                new ObjectParameter("EmandateType", emandateType) :
                new ObjectParameter("EmandateType", typeof(string));
    
            var isPhysicalParameter = isPhysical.HasValue ?
                new ObjectParameter("IsPhysical", isPhysical) :
                new ObjectParameter("IsPhysical", typeof(bool));
    
            var isEmandateParameter = isEmandate.HasValue ?
                new ObjectParameter("IsEmandate", isEmandate) :
                new ObjectParameter("IsEmandate", typeof(bool));
    
            var appIdParameter = appId.HasValue ?
                new ObjectParameter("appId", appId) :
                new ObjectParameter("appId", typeof(long));
    
            var categoryCodeParameter = categoryCode != null ?
                new ObjectParameter("CategoryCode", categoryCode) :
                new ObjectParameter("CategoryCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_WebSevice_Result>("Sp_WebSevice", queryTypeParameter, userNameParameter, userIdParameter, acNoParameter, iFSCParameter, mICRParameter, customerParameter, descriptionParameter, statusParameter, bankNameParameter, entityIdParameter, acValidatedIdParameter, passwordParameter, passwordKeyParameter, adharCardNoParameter, refrenceNoParameter, traceNumberParameter, debitTypeParameter, frequencyParameter, toDebitParameter, amountRupeesParameter, refrence1Parameter, refParameter, refrence2Parameter, addr1Parameter, phNumberParameter, emailIdParameter, fromParameter, toParameter, mandateIdParameter, nachParameter, rupeesParameter, customer1Parameter, customer2Parameter, customer3Parameter, dateOnMandateParameter, tIPPathParameter, pNGPathParameter, utilityCodeParameter, sponsorCodeParameter, strFromDateParameter, strToDateParameter, strTableParameter, paymentDataXParameter, xmlMandateParameter, filePathParameter, activityIdParameter, typeDataParameter, fromDateParameter, toDateParameter, tIFPathParameter, jPGPathParameter, typeParameter, eNachPhoneNumberParameter, eNachEmailIdParameter, agreeParameter, eNachAadharNumberParameter, mandateModeParameter, idParameter, enachMessageIdParameter, emandateTypeParameter, isPhysicalParameter, isEmandateParameter, appIdParameter, categoryCodeParameter);
        }
    
        public virtual ObjectResult<Sp_WindowsService_Result> Sp_WindowsService(string queryType)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_WindowsService_Result>("Sp_WindowsService", queryTypeParameter);
        }
    }
}
